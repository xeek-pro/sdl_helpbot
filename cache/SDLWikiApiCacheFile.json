{
  "Cache": [
    {
      "Name": "SDL_HINT_ACCELEROMETER_AS_JOYSTICK",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_ACCELEROMETER_AS_JOYSTICK",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:24:36.4516046-06:00",
      "RawText": "## page was renamed from SDL_HINT_ACCEL_AS_JOY\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_ACCELEROMETER_AS_JOYSTICK =\r\nA hint that specifies whether the Android / iOS built-in accelerometer should be listed as a joystick device, rather than listing actual joysticks only.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||list only real joysticks and accept input from them||\r\n||1||list real joysticks along with the accelerometer as if it were a 3 axis joystick (the default)||\r\n\r\n\r\n== Default ==\r\nBy default SDL will list real joysticks along with the accelerometer as if it were a 3 axis joystick.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    // This disables the use of gyroscopes as axis device\r\n    SDL_SetHint(SDL_HINT_ACCELEROMETER_AS_JOYSTICK, \"0\");\r\n}\r\n\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe hint is supported for iOS since SDL 2.0.4.\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:04.5399656-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION =\r\nA hint that specifies the Android APK expansion main file version.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||the Android APK expansion main file version (should be a string number like \"1\", \"2\" etc.)||\r\n\r\n\r\n== Default ==\r\nBy default this hint is not set.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint must be set together with the hint [[SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION]].\r\n\r\nIf both hints were set then [[SDL_RWFromFile]]() will look into expansion files after a given relative path was not found in the internal storage and assets.\r\n\r\nBy default this hint is not set and the APK expansion files are not searched.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:05.2171181-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION =\r\nA hint that specifies the Android APK expansion patch file version.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||the Android APK expansion patch file version (should be a string number like \"1\", \"2\" etc.)||\r\n\r\n\r\n== Default ==\r\nBy default this hint is not set.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint must be set together with the hint [[SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION]].\r\n\r\nIf both hints were set then [[SDL_RWFromFile]]() will look into expansion files after a given relative path was not found in the internal storage and assets.\r\n\r\nBy default this hint is not set and the APK expansion files are not searched.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:05.9293476-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH =\r\nA hint that specifies a variable to control whether mouse and touch events are to be treated together or separately.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||mouse events will be handled as touch events and touch will raise fake mouse events||\r\n||1||mouse events will be handled separately from pure touch events||\r\n\r\n\r\n== Default ==\r\nBy default mouse events will be handled as touch events and touch will raise fake mouse events.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe value of this hint is used at runtime, so it can be changed at any time.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:06.6831805-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS =\r\nA hint that specifies whether controllers used with the Apple TV generate UI events.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||controller input does not generate UI events||\r\n||1||controller input generates UI events||\r\n\r\n\r\n== Default ==\r\nBy default controller input does not generate UI events.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nWhen UI events are generated by controller input, the app will be backgrounded when the Apple TV remote's menu button is pressed, and when the pause or B buttons on gamepads are pressed.\r\n\r\nMore information about properly making use of controllers for the Apple TV can be found here: https://developer.apple.com/tvos/human-interface-guidelines/remote-and-controllers/\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.5.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:07.3446117-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION =\r\nA hint that specifies whether the Apple TV remote's joystick axes will automatically match the rotation of the remote.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||remote orientation does not affect joystick axes||\r\n||1||joystick axes are based on the orientation of the remote||\r\n\r\n\r\n== Default ==\r\nBy default remote orientation does not affect joystick axes.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.5.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_BMP_SAVE_LEGACY_FORMAT",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_BMP_SAVE_LEGACY_FORMAT",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:13.0530925-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_BMP_SAVE_LEGACY_FORMAT =\r\nA hint that specifies whether SDL should not use version 4 of the bitmap header when saving BMPs.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||version 4 of the bitmap header will be used when saving BMPs||\r\n||1||version 4 of the bitmap header will not be used when saving BMPs||\r\n\r\n\r\n== Default ==\r\nBy default SDL will use version 4 of the bitmap header when saving BMPs.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe bitmap header version 4 is required for proper alpha channel support and SDL will use it when required.  Should this not be desired, this hint can force the use of the 40 byte header version which is supported everywhere.\r\n\r\nIf the hint is not set then surfaces with a colorkey or an alpha channel are saved to a 32-bit BMP file with an alpha mask.  SDL will use the bitmap header version 4 and set the alpha mask accordingly.  This is the default behavior since SDL 2.0.5.\r\n\r\nIf the hint is set then surfaces with a colorkey or an alpha channel are saved to a 32-bit BMP file without an alpha mask.  The alpha channel data will be in the file, but applications are going to ignore it.  This was the default behavior before SDL 2.0.5.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_SaveBMP]]\r\n .[[SDL_SaveBMP_RW]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:13.6645348-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT =\r\nA hint that specifies a value to override the binding element for keyboard inputs for Emscripten builds.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||#window||the !JavaScript window object (this is the default)||\r\n||#document||the !JavaScript document object||\r\n||#screen||the !JavaScript window.screen object||\r\n||#canvas||the default WebGL canvas element||\r\n\r\nAny other string without a leading # sign applies to the element on the page with that ID.\r\n\r\n\r\n== Default ==\r\nBy default SDL will use the !JavaScript window object.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint only applies to the Emscripten platform.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_FRAMEBUFFER_ACCELERATION",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_FRAMEBUFFER_ACCELERATION",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:14.3853161-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HINT_FRAMEBUFFER_ACCELERATION =\r\nA hint that specifies how 3D acceleration is used with [[SDL_GetWindowSurface]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||0||disable 3D acceleration||\r\n||1||enable 3D acceleration, using the default renderer||\r\n||X||enable 3D acceleration, using X where X is one of the valid rendering drivers.  (e.g. \"direct3d\", \"opengl\", etc.)||\r\n\r\n== Default ==\r\nBy default SDL tries to make a best guess whether to use acceleration or not on each platform.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL can try to accelerate the screen surface returned by [[SDL_GetWindowSurface]]() by using streaming textures with a 3D rendering engine.  This variable controls whether and how this is done.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HINT_GAMECONTROLLERCONFIG",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_GAMECONTROLLERCONFIG",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:15.067511-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_GAMECONTROLLERCONFIG =\r\nA hint that specifies extra gamecontroller db entries.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||a newline delimited rows of gamecontroller config data, see SDL_gamecontroller.h||\r\n\r\n\r\n== Default ==\r\nBy default no extra gamecontroller db entries are specified.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint must be set before calling [[SDL_Init]](SDL_INIT_GAMECONTROLLER).\r\n\r\nYou can update mappings after the system is initialized with [[SDL_GameControllerMappingForGUID]]() and [[SDL_GameControllerAddMapping]]().\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_GRAB_KEYBOARD",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_GRAB_KEYBOARD",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:15.6605375-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_GRAB_KEYBOARD =\r\nA hint that specifies whether grabbing input grabs the keyboard.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||grab will affect only the mouse||\r\n||1||grab will affect mouse and keyboard||\r\n\r\n\r\n== Default ==\r\nBy default SDL will not grab the keyboard so system shortcuts still work.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_IDLE_TIMER_DISABLED",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_IDLE_TIMER_DISABLED",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:16.3105047-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HINT_IDLE_TIMER_DISABLED =\r\nA hint that specifies a variable controlling whether the idle timer is disabled on iOS.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||0||enable idle timer||\r\n||1||disable idle timer||\r\n\r\n== Default ==\r\nBy default the idle timer is enabled.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen an iOS application does not receive touches for some time, the screen is dimmed automatically. For games where the accelerometer is the only input this is problematic. This functionality can be disabled by setting this hint.\r\n\r\nAs of SDL 2.0.4, [[SDL_EnableScreenSaver]]() and [[SDL_DisableScreenSaver]]() accomplish the same thing on iOS. They should be preferred over this hint.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HINT_IME_INTERNAL_EDITING",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_IME_INTERNAL_EDITING",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:21.9729421-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_IME_INTERNAL_EDITING =\r\nA hint that specifies whether certain IMEs should handle text editing internally instead of sending [[SDL_TextEditingEvent|SDL_TEXTEDITING]] events.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||[[SDL_TextEditingEvent|SDL_TEXTEDITING]] events are sent, and it is the application's responsibility to render the text from these events and differentiate it somehow from committed text. (default)||\r\n||1||If supported by the IME then [[SDL_TextEditingEvent|SDL_TEXTEDITING]] events are not sent, and text that is being composed will be rendered in its own UI.||\r\n\r\n\r\n== Default ==\r\nBy default [[SDL_TextEditingEvent|SDL_TEXTEDITING]] events are sent, and it is the application's responsibility to render the text from these events and differentiate it somehow from committed text.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:22.6181899-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS =\r\nA hint that specifies if joystick (and gamecontroller) events are enabled even when the application is in the background.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable joystick & gamecontroller input events when the application is in the background||\r\n||1||enable joystick & gamecontroller input events when the application is in the background||\r\n\r\n\r\n== Default ==\r\nBy default joystick (and gamecontroller) events are not enabled when the application is in the background.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint may be set at any time.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_MAC_BACKGROUND_APP",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_MAC_BACKGROUND_APP",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:23.3460034-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_MAC_BACKGROUND_APP =\r\nA hint that specifies if the SDL app should not be forced to become a foreground process on Mac OS X.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||force the SDL app to become a foreground process (default)||\r\n||1||do not force the SDL app to become a foreground process||\r\n\r\n\r\n== Default ==\r\nBy default the SDL app will be forced to become a foreground process on Mac OS X.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint only applies to Mac OS X.\r\n\r\n\r\n== Version ==\r\n\r\nThis hint is available since SDL 2.0.4.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:24.0228953-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK =\r\nA hint that specifies whether ctrl+click should generate a right-click event on Mac.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable emulating right click||\r\n||1||enable emulating right click||\r\n\r\n\r\n== Default ==\r\nBy default holding ctrl while left clicking will not generate a right click event when on Mac.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:24.7896049-06:00",
      "RawText": "## page was renamed from SDL_HINT_MAC_MOUSE_FOCUS_CLICKTHROUGH\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH =\r\nA hint that specifies if mouse click events are sent when clicking to focus an SDL window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||no mouse click events are sent when clicking to focus||\r\n||1||mouse click events are sent when clicking to focus||\r\n\r\n\r\n== Default ==\r\nBy default no mouse click events are sent when clicking to focus.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.5.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_MOUSE_RELATIVE_MODE_WARP",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_MOUSE_RELATIVE_MODE_WARP",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:25.4195425-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_MOUSE_RELATIVE_MODE_WARP =\r\nA hint that specifies whether relative mouse mode is implemented using mouse warping.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||relative mouse mode uses the raw input||\r\n||1||relative mouse mode uses mouse warping||\r\n\r\n\r\n== Default ==\r\nBy default SDL will use raw input for relative mouse mode\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_NO_SIGNAL_HANDLERS",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_NO_SIGNAL_HANDLERS",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:31.0519345-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_NO_SIGNAL_HANDLERS =\r\nA hint that specifies not to catch the SIGINT or SIGTERM signals.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||SDL will install a SIGINT and SIGTERM handler, and when it catches a signal, convert it into an SDL_QUIT event||\r\n||1||SDL will not install a signal handler at all||\r\n\r\n\r\n== Default ==\r\nBy default install a SIGINT and SIGTERM handler, and when it catches a signal, convert it into an SDL_QUIT event.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint only applies to Unix-like platforms.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_ORIENTATIONS",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_ORIENTATIONS",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:31.7194544-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HINT_ORIENTATIONS =\r\nA hint that specifies a variable controlling which orientations are allowed on iOS.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||!LandscapeLeft||top of device left||\r\n||!LandscapeRight||top of device right||\r\n||Portrait||top of device up||\r\n||!PortraitUpsideDown||top of device down||\r\n\r\n\r\n== Default ==\r\nBy default all orientations are allowed.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    SDL_SetHint(SDL_HINT_ORIENTATIONS, \"LandscapeLeft LandscapeRight\");\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nIn some circumstances it is necessary to be able to explicitly control which UI orientations are allowed.\r\n\r\nThis variable is a space delimited list of the above values.\r\n\r\n{{{#!wiki comment\r\nCould this statement be reworded to be more clear esp. for non-English speakers?  Maybe - These values may be combined by using a space between them. Or - Separate multiple values by a space.\r\n}}}\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HINT_RENDER_DIRECT3D11_DEBUG",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_RENDER_DIRECT3D11_DEBUG",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:58:32.4764052-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_RENDER_DIRECT3D11_DEBUG =\r\nA hint that specifies a variable controlling whether to enable Direct3D 11+'s Debug Layer.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable Debug Layer use||\r\n||1||enable Debug Layer use||\r\n\r\n\r\n== Default ==\r\nBy default SDL does not use Direct3D Debug Layer.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis variable does not have any effect on the Direct3D 9 based renderer.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.3.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_RENDER_DIRECT3D_THREADSAFE",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_RENDER_DIRECT3D_THREADSAFE",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:13.8662178-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_RENDER_DIRECT3D_THREADSAFE =\r\nA hint that specifies whether the Direct3D device is initialized for thread-safe operations.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable thread-safety (faster)||\r\n||1||enable thread-safety (slower)||\r\n\r\n\r\n== Default ==\r\nBy default the Direct3D device is created with thread-safety disabled.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.1.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_RENDER_DRIVER",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_RENDER_DRIVER",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:14.553144-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HINT_RENDER_DRIVER =\r\nA hint that specifies which render driver to use.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||direct3d||\r\n||opengl||\r\n||opengles2||\r\n||opengles||\r\n||metal||\r\n||software||\r\n\r\n== Default ==\r\nBy default the first one in the list that is available on the current platform is chosen.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe values are case-insensitive.\r\n\r\nIf the application doesn't pick a specific renderer to use, this variable specifies the name of the preferred renderer.  If the preferred renderer can't be initialized, the normal default renderer is used.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HINT_RENDER_OPENGL_SHADERS",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_RENDER_OPENGL_SHADERS",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:15.2691701-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HINT_RENDER_OPENGL_SHADERS =\r\nA hint that specifies whether the OpenGL render driver uses shaders.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||0||disable shaders||\r\n||1||enable shaders, if they are available||\r\n\r\n== Default ==\r\nBy default shaders are used if OpenGL supports them.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HINT_RENDER_SCALE_QUALITY",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_RENDER_SCALE_QUALITY",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:20.9107732-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HINT_RENDER_SCALE_QUALITY =\r\nA hint that specifies scaling quality.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||0 or nearest||nearest pixel sampling||\r\n||1 or linear||linear filtering (supported by OpenGL and Direct3D)||\r\n||2 or best||anisotropic filtering (supported by Direct3D)||\r\n\r\n== Default ==\r\nBy default nearest pixel sampling is used.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis hint is checked when a texture is created and it affects scaling when copying that texture.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HINT_RENDER_VSYNC",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_RENDER_VSYNC",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:21.6923341-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HINT_RENDER_VSYNC =\r\nA hint that specifies whether sync to vertical refresh is enabled or disabled in [[SDL_CreateRenderer]]() to avoid tearing.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||0||disable vsync||\r\n||1||enable vsync||\r\n\r\n== Default ==\r\nBy default SDL uses the SDL_RENDERER_PRESENTVSYNC flag passed into [[SDL_CreateRenderer]]().\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_HINT_RENDER_VSYNC]] overrides the SDL_RENDERER_PRESENTVSYNC flag in [[SDL_CreateRenderer]]().\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HINT_RPI_VIDEO_LAYER",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_RPI_VIDEO_LAYER",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:22.4538693-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_RPI_VIDEO_LAYER =\r\nA hint that specifies which Dispmanx layer SDL should use on a Raspberry PI.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||the Dispmanx layer to use||\r\n\r\n\r\n== Default ==\r\nBy default the Dispmanx layer is \"10000\".\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis is also known as Z-order.  The variable can take a negative or positive value.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.5.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_THREAD_STACK_SIZE",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_THREAD_STACK_SIZE",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:23.2397619-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_THREAD_STACK_SIZE =\r\nA hint that specifies a variable specifying SDL's threads stack size in bytes or \"0\" for the backend's default size.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||use the backend's default threads stack size||\r\n||X||use the provided positive threads stack size||\r\n\r\n\r\n== Default ==\r\nBy default the backend's default threads stack size is used.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nUse this hint in case you need to set SDL's threads stack size to other than the default. This is specially useful if you build SDL against a non glibc libc library (such as musl) which provides a relatively small default thread stack size (a few kilobytes versus the default 8 MB glibc uses).\r\n\r\nSupport for this hint is currently available only in the pthread, Windows (>= SDL 2.0.5), and PSP (>= SDL 2.0.5) backend.\r\n\r\n== Version ==\r\n\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_TIMER_RESOLUTION",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_TIMER_RESOLUTION",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:23.9930465-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_TIMER_RESOLUTION =\r\nA hint that specifies the timer resolution in milliseconds.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||the timer resolution in milliseconds||\r\n\r\n\r\n== Default ==\r\nBy default the value is \"1\".\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe higher resolution the timer, the more frequently the CPU services timer interrupts, and the more precise delays are, but this takes up power and CPU time. This hint is only used on Windows, but not supported on WinRT.\r\n\r\nSee this blog post for more information:\r\nhttp://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/\r\n\r\nIf this variable is set to \"0\", the system timer resolution is not set.\r\n\r\nThis hint may be set at any time.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_ALLOW_SCREENSAVER",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_ALLOW_SCREENSAVER",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:24.633768-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_ALLOW_SCREENSAVER =\r\nA hint that specifies whether the screensaver is enabled.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable screensaver||\r\n||1||enable screensaver||\r\n\r\n== Default ==\r\nBy default SDL will disable the screensaver.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_HIGHDPI_DISABLED",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_HIGHDPI_DISABLED",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:30.2851319-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_HIGHDPI_DISABLED =\r\nA hint that specifies if high-DPI windows (\"Retina\" on Mac and iOS) are not allowed.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||allow high-DPI windows||\r\n||1||do not allow high-DPI windows||\r\n\r\n\r\n== Default ==\r\nBy default high-DPI windows (\"Retina\" on Mac and iOS) are allowed.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nOn Apple's OS X you '''must''' set the NSHighResolutionCapable Info.plist property to YES, otherwise you will not receive a High DPI OpenGL display.\r\n\r\nThe hint is supported for iOS since SDL 2.0.4.\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.1.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:31.0113544-06:00",
      "RawText": "## page was renamed from SDL_HINT_VIDEO_FULLSCREEN_SPACES\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES =\r\nA hint that dictates policy for fullscreen Spaces on Mac OS X.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable Spaces support (FULLSCREEN_DESKTOP won't use them and SDL_WINDOW_RESIZABLE windows won't offer the \"fullscreen\" button on their titlebars)||\r\n||1||enable Spaces support (FULLSCREEN_DESKTOP will use them and SDL_WINDOW_RESIZABLE windows will offer the \"fullscreen\" button on their titlebars)||\r\n\r\n\r\n== Default ==\r\nBy default Spaces support is enabled.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint only applies to Mac OS X.\r\n\r\nSpaces are disabled regardless of this hint if the OS isn't at least Mac OS X Lion (10.7). This hint must be set before any windows are created.\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:31.7335999-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS =\r\nA hint that specifies if a SDL_Window is minimized if it loses key focus when in fullscreen mode.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||do not minimize SDL_Window if it loses key focus when in fullscreen mode||\r\n||1||do minimize the SDL_Window if it loses key focus when in fullscreen mode||\r\n\r\n\r\n== Default ==\r\nBy default a SDL_Window is minimized if it loses key focus when in fullscreen mode.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:32.3857924-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT =\r\nA hint that specifies the address of another SDL_Window* (as a hex string formatted with \"%p\").\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||the address (as a string \"%p\") of the SDL_Window* that new windows created with [[SDL_CreateWindowFrom]]() should share a pixel format with||\r\n\r\n\r\n== Default ==\r\nBy default this hint is not set.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nIf this hint is set before [[SDL_CreateWindowFrom]]() and the SDL_Window* it is set to has SDL_WINDOW_OPENGL set (and running on WGL only, currently), then two things will occur on the newly created SDL_Window:\r\n\r\n 1. Its pixel format will be set to the same pixel format as this SDL_Window.  This is needed for example when sharing an OpenGL context across multiple windows.\r\n\r\n 1. The flag SDL_WINDOW_OPENGL will be set on the new window so it can be used for OpenGL rendering.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_WIN_D3DCOMPILER",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_WIN_D3DCOMPILER",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:33.202042-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_WIN_D3DCOMPILER =\r\nA hint that specifies which shader compiler to preload when using the Chrome ANGLE binaries.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||d3dcompiler_46.dll||default, best for Vista or later||\r\n||d3dcompiler_43.dll||for XP support||\r\n||none||do not load any library, useful if you compiled ANGLE from source and included the compiler in your binaries||\r\n\r\n\r\n== Default ==\r\nBy default \"d3dcompiler_46.dll\" will be used.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nSDL has EGL and OpenGL ES2 support on Windows via the ANGLE project. It can use two different sets of binaries, those compiled by the user from source or those provided by the Chrome browser. In the later case, these binaries require that SDL loads a DLL providing the shader compiler.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_X11_NET_WM_PING",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_X11_NET_WM_PING",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:33.9004489-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_X11_NET_WM_PING =\r\nA hint that specifies whether the X11 _NET_WM_PING protocol should be supported.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable _NET_WM_PING||\r\n||1||enable _NET_WM_PING||\r\n\r\n\r\n== Default ==\r\nBy default SDL will use _NET_WM_PING, but for applications that know they will not always be able to respond to ping requests in a timely manner they can turn it off to avoid the window manager thinking the app is hung.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe hint is checked in [[SDL_CreateWindow]]().\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_X11_XINERAMA",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_X11_XINERAMA",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:39.6595439-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_X11_XINERAMA =\r\nA hint that specifies whether the X11 Xinerama extension should be used.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable Xinerama||\r\n||1||enable Xinerama||\r\n\r\n\r\n== Default ==\r\nBy default SDL will use Xinerama if it is available.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_X11_XRANDR",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_X11_XRANDR",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:40.3571614-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_X11_XRANDR =\r\nA hint that specifies whether the X11 XRandR extension should be used.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable XRandR||\r\n||1||enable XRandR||\r\n\r\n\r\n== Default ==\r\nBy default SDL will not use XRandR because of window manager issues.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nFor details about the referenced window manager issues see the following message (and its thread) on the SDL mailing list: http://lists.libsdl.org/pipermail/sdl-libsdl.org/2012-October/651919.html\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_VIDEO_X11_XVIDMODE",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_VIDEO_X11_XVIDMODE",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:40.9748794-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_VIDEO_X11_XVIDMODE =\r\nA hint that specifies whether the X11 !VidMode extension should be used.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable XVidMode||\r\n||1||enable XVidMode||\r\n\r\n\r\n== Default ==\r\nBy default SDL will use XVidMode if it is available.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T13:59:41.7026299-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING =\r\nA hint that specifies whether SDL should not name threads on Microsoft Windows.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||threads will be named||\r\n||1||threads will not be named||\r\n\r\n\r\n== Default ==\r\nBy default SDL will name threads on Microsoft Windows.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nIf the hint is not set then SDL will raise the 0x406D1388 Exception to name threads.  This is the default behavior of SDL.\r\n\r\nIf the hint is set then SDL will not raise this exception, and threads will be unnamed.  For .NET languages this is required when running under a debugger.\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateThread]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:22.9823456-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP =\r\nA hint that specifies whether the windows message loop is processed by SDL.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||the window message loop is not run||\r\n||1||the window message loop is processed in [[SDL_PumpEvents]]()||\r\n\r\n\r\n== Default ==\r\nBy default SDL will process the windows message loop.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:23.6723087-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 =\r\nA hint that specifies that SDL should not to generate [[SDL_WindowEvent|SDL_WINDOWEVENT_CLOSE]] events for Alt+F4 on Microsoft Windows.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||generate an [[SDL_WindowEvent|SDL_WINDOWEVENT_CLOSE]] event for Alt+F4 (default)||\r\n||1||do not generate event and only do normal key handling for Alt+F4||\r\n\r\n\r\n== Default ==\r\nBy default SDL will generate an [[SDL_WindowEvent|SDL_WINDOWEVENT_CLOSE]] event for Alt+F4.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:29.3052378-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN =\r\nA hint that specifies whether the window frame and title bar are interactive when the cursor is hidden.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||the window frame is not interactive when the cursor is hidden (no move, resize, etc)||\r\n||1||the window frame is interactive when the cursor is hidden||\r\n\r\n\r\n== Default ==\r\nBy default SDL will allow interaction with the window frame when the cursor is hidden.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_WINRT_HANDLE_BACK_BUTTON",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_WINRT_HANDLE_BACK_BUTTON",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:30.0622397-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_WINRT_HANDLE_BACK_BUTTON =\r\nA hint that specifies a variable to allow back-button-press events on Windows Phone to be marked as handled.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||1||mark the button as handled||\r\n\r\n\r\n== Default ==\r\nBy default this hint is not set and the application will be terminated.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nWindows Phone devices typically feature a Back button.  When pressed, the OS will emit back-button-press events, which apps are expected to\r\nhandle in an appropriate manner.  If apps do not explicitly mark these events as 'Handled', then the OS will invoke its default behavior for\r\nunhandled back-button-press events, which on Windows Phone 8 and 8.1 is to terminate the app (and attempt to switch to the previous app, or to the\r\ndevice's home screen).\r\n\r\nSetting the SDL_HINT_WINRT_HANDLE_BACK_BUTTON hint to \"1\" will cause SDL to mark back-button-press events as Handled, if and when one is sent to\r\nthe app.\r\n\r\nInternally, Windows Phone sends back button events as parameters to special back-button-press callback functions.  Apps that need to respond\r\nto back-button-press events are expected to register one or more callback functions for such, shortly after being launched (during the\r\napp's initialization phase).  After the back button is pressed, the OS will invoke these callbacks.  If the app's callback(s) do not explicitly\r\nmark the event as handled by the time they return, or if the app never registers one of these callback, the OS will consider the event un-handled, and it will apply its default back button behavior (terminate the app).\r\n\r\nSDL registers its own back-button-press callback with the Windows Phone OS.  This callback will emit a pair of SDL key-press events (SDL_KEYDOWN\r\nand SDL_KEYUP), each with a scancode of SDL_SCANCODE_AC_BACK, after which it will check the contents of the hint, SDL_HINT_WINRT_HANDLE_BACK_BUTTON.\r\nIf the hint's value is set to \"1\", the back button event's Handled property will get set to 'true'.  If the hint's value is set to something\r\nelse, or if it is unset, SDL will leave the event's Handled property alone.  (By default, the OS sets this property to 'false', to note.)\r\n\r\nSDL apps can either set SDL_HINT_WINRT_HANDLE_BACK_BUTTON well before a back button is pressed, or can set it in direct-response to a back button\r\nbeing pressed.\r\n\r\nIn order to get notified when a back button is pressed, SDL apps should register a callback function with [[SDL_AddEventWatch]](), and have it listen\r\nfor SDL_KEYDOWN events that have a scancode of SDL_SCANCODE_AC_BACK. (Alternatively, SDL_KEYUP events can be listened-for.  Listening for\r\neither event type is suitable.)  Any value of SDL_HINT_WINRT_HANDLE_BACK_BUTTON set by such a callback, will be applied to the OS' current back-button-press event.\r\n\r\nMore details on back button behavior in Windows Phone apps can be found at the following page, on Microsoft's developer site:\r\nhttp://msdn.microsoft.com/en-us/library/windowsphone/develop/jj247550(v=vs.105).aspx\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.3.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_WINRT_PRIVACY_POLICY_LABEL",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_WINRT_PRIVACY_POLICY_LABEL",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:30.8167049-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_WINRT_PRIVACY_POLICY_LABEL =\r\nA hint that specifies a label text for a WinRT app's privacy policy link.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||a label text for a WinRT app's privacy policy link||\r\n\r\n\r\n== Default ==\r\nBy default this hint's value is \"Privacy Policy\".\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nNetwork-enabled WinRT apps must include a privacy policy.  On Windows 8, 8.1, and RT, Microsoft mandates that this policy be available via the Windows Settings charm.  SDL provides code to add a link there, with its label text being set via the optional hint, SDL_HINT_WINRT_PRIVACY_POLICY_LABEL.\r\n\r\nPlease note that a privacy policy's contents are not set via this hint.  A separate hint, [[SDL_HINT_WINRT_PRIVACY_POLICY_URL]], is used to link to the actual text of the policy.\r\n\r\nThe contents of this hint should be encoded as a UTF8 string.\r\n\r\nThe default value is \"Privacy Policy\".  This hint should only be set during app initialization, preferably before any calls to [[SDL_Init]]().\r\n\r\nFor additional information on linking to a privacy policy, see the documentation for [[SDL_HINT_WINRT_PRIVACY_POLICY_URL]].\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.3.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_WINRT_PRIVACY_POLICY_URL",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_WINRT_PRIVACY_POLICY_URL",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:31.526744-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_WINRT_PRIVACY_POLICY_URL =\r\nA hint that specifies a URL to a WinRT app's privacy policy.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||X||a URL to a WinRT app's privacy policy||\r\n\r\n\r\n== Default ==\r\nBy default this hint is not set.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nAll network-enabled WinRT apps must make a privacy policy available to its users.  On Windows 8, 8.1, and RT, Microsoft mandates that this policy be available in the Windows Settings charm, as accessed from within the app.  SDL provides code to add a URL-based link there, which can point to the app's privacy policy.\r\n\r\nTo setup a URL to an app's privacy policy, set SDL_HINT_WINRT_PRIVACY_POLICY_URL before calling any [[SDL_Init]]() functions.  The contents of the hint should be a valid URL.  For example, \"http://www.example.com\".\r\n\r\nThe default value is \"\", which will prevent SDL from adding a privacy policy link to the Settings charm.  This hint should only be set during app init.\r\n\r\nThe label text of an app's \"Privacy Policy\" link may be customized via another hint, [[SDL_HINT_WINRT_PRIVACY_POLICY_LABEL]].\r\n\r\nPlease note that on Windows Phone, Microsoft does not provide standard UI for displaying a privacy policy link, and as such, SDL_HINT_WINRT_PRIVACY_POLICY_URL will not get used on that platform.  Network-enabled phone apps should display their privacy policy through some other, in-app means.\r\n\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.3.\r\n\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_XINPUT_ENABLED",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_XINPUT_ENABLED",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:32.2282179-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_XINPUT_ENABLED =\r\nA hint that specifies if Xinput gamepad devices are detected. Xinput is limited to 4 gamepads, if you want more than four you need to set it to \"0\".\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||disable XInput detection (only uses direct input)||\r\n||1||enable XInput detection (the default)||\r\n\r\n\r\n== Default ==\r\nBy default Xinput gamepad devices are detected.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_SetHint(SDL_HINT_XINPUT_ENABLED, \"0\");\r\n//...\r\nSDL_Init(SDL_INIT_EVERYTHING);\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nYou need to set this hint before you call [[SDL_Init]] otherwise it will not take effect.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING",
      "Uri": "https://wiki.libsdl.org/SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING",
      "Categories": [
        "CategoryDefine",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:00:32.9798701-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING =\r\nA hint that specifies that SDL should use the old axis and button mapping for XInput devices.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||0||use the old axis and button mapping for XInput devices||\r\n||1||do not use old axis and button mapping for XInput devices||\r\n\r\n\r\n== Default ==\r\nBy default SDL does not use the old axis and button mapping for XInput devices.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis hint is for backwards compatibility only and will be removed in SDL 2.1.\r\n\r\nThe default value is \"0\".  This hint must be set before [[SDL_Init]]().\r\n\r\n== Version ==\r\nThis hint is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryDefine]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_AssertState",
      "Uri": "https://wiki.libsdl.org/SDL_AssertState",
      "Categories": [
        "CategoryEnum",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T14:00:38.5483029-06:00",
      "RawText": "## page was renamed from SDL_assert_state\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AssertState =\r\nAn enumeration of assertion handling states.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_ASSERTION_RETRY||retry the assert immediately||\r\n||SDL_ASSERTION_BREAK||trigger a breakpoint under the debugger||\r\n||SDL_ASSERTION_ABORT||terminate the program||\r\n||SDL_ASSERTION_IGNORE||ignore the assert||\r\n||SDL_ASSERTION_ALWAYS_IGNORE||ignore the assert from now on||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis enumeration is returned by the callback function in [[SDL_SetAssertionHandler]]() to determine the response to failed assertions.  \r\n\r\n== Related Functions ==\r\n .[[SDL_SetAssertionHandler]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_AudioFormat",
      "Uri": "https://wiki.libsdl.org/SDL_AudioFormat",
      "Categories": [
        "CategoryEnum",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:00:39.2882333-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AudioFormat =\r\nAn enumeration of audio formats.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n=== Bit Meanings ===\r\nThese are what the 16 bits in [[SDL_AudioFormat]] currently mean:\r\n{{{\r\n +----------------------sample is signed if set\r\n |\r\n |        +----------sample is bigendian if set\r\n |        |\r\n |        |           +--sample is float if set\r\n |        |           |\r\n |        |           |  +--sample bit size---+\r\n |        |           |  |                    |\r\n15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0\r\n}}}\r\nUnspecified bits are always zero, but may be used in later versions of SDL.  There are macros to query the specified bits.\r\n\r\n=== Audio Format Macros ===\r\n||SDL_AUDIO_MASK_BITSIZE||(0xFF)||\r\n||SDL_AUDIO_MASK_DATATYPE||(1<<8)||\r\n||SDL_AUDIO_MASK_ENDIAN||(1<<12)||\r\n||SDL_AUDIO_MASK_SIGNED||(1<<15)||\r\n||SDL_AUDIO_BITSIZE(x)||(x & SDL_AUDIO_MASK_BITSIZE)||\r\n||SDL_AUDIO_ISFLOAT(x)||(x & SDL_AUDIO_MASK_DATATYPE)||\r\n||SDL_AUDIO_ISBIGENDIAN(x)||(x & SDL_AUDIO_MASK_ENDIAN)||\r\n||SDL_AUDIO_ISSIGNED(x)||(x & SDL_AUDIO_MASK_SIGNED)||\r\n||SDL_AUDIO_ISINT(x)||(!SDL_AUDIO_ISFLOAT(x))||\r\n||SDL_AUDIO_ISLITTLEENDIAN(x)||(!SDL_AUDIO_ISBIGENDIAN(x))||\r\n||SDL_AUDIO_ISUNSIGNED(x)||(!SDL_AUDIO_ISSIGNED(x))||\r\n\r\n\r\n=== Audio Format Values ===\r\n||||<bgcolor=\"#EDEDED\">''8-bit support''||\r\n||AUDIO_S8||signed 8-bit samples||\r\n||AUDIO_U8||unsigned 8-bit samples||\r\n||||<bgcolor=\"#EDEDED\">''16-bit support''||\r\n||AUDIO_S16LSB||signed 16-bit samples in little-endian byte order||\r\n||AUDIO_S16MSB||signed 16-bit samples in big-endian byte order||\r\n||AUDIO_S16SYS||signed 16-bit samples in native byte order||\r\n||AUDIO_S16||AUDIO_S16LSB||\r\n||AUDIO_U16LSB||unsigned 16-bit samples in little-endian byte order||\r\n||AUDIO_U16MSB||unsigned 16-bit samples in big-endian byte order||\r\n||AUDIO_U16SYS||unsigned 16-bit samples in native byte order||\r\n||AUDIO_U16||AUDIO_U16LSB||\r\n||||<bgcolor=\"#EDEDED\">''32-bit support (new to SDL 2.0)''||\r\n||AUDIO_S32LSB||32-bit integer samples in little-endian byte order||\r\n||AUDIO_S32MSB||32-bit integer samples in big-endian byte order||\r\n||AUDIO_S32SYS||32-bit integer samples in native byte order||\r\n||AUDIO_S32||AUDIO_S32LSB||\r\n||||<bgcolor=\"#EDEDED\">''float support (new to SDL 2.0)''||\r\n||AUDIO_F32LSB||32-bit floating point samples in little-endian byte order||\r\n||AUDIO_F32MSB||32-bit floating point samples in big-endian byte order||\r\n||AUDIO_F32SYS||32-bit floating point samples in native byte order||\r\n||AUDIO_F32||AUDIO_F32LSB||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_AudioFormat fmt;\r\nif (SDL_AUDIO_ISFLOAT(fmt)) {\r\n    printf(\"floating point data\\n\");\r\n} else {\r\n    printf(\"integer data\\n\");\r\n}\r\nprintf(\"%d bits per sample\\n\", (int) SDL_AUDIO_BITSIZE(fmt));\r\n}}}\r\n\r\n== Remarks ==\r\nBe careful about assuming details of a data format. If you only check SDL_AUDIO_ISFLOAT(), you might be surprised to find a later version of SDL adds Float64 support when you expected there to be only 32-bit data, for example.\r\n\r\n== Related Structures ==\r\n .[[SDL_AudioCVT]]\r\n .[[SDL_AudioSpec]]\r\n\r\n== Related Functions ==\r\n .[[SDL_BuildAudioCVT]]\r\n .[[SDL_MixAudioFormat]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_AudioStatus",
      "Uri": "https://wiki.libsdl.org/SDL_AudioStatus",
      "Categories": [
        "CategoryEnum",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:00:39.9636377-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AudioStatus =\r\nAn enumeration of audio device states.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_AUDIO_STOPPED||audio device is stopped||\r\n||SDL_AUDIO_PLAYING||audio device is playing||\r\n||SDL_AUDIO_PAUSED||audio device is paused||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nvoid printStatus(SDL_AudioDeviceID dev)\r\n{\r\n    switch (SDL_GetAudioDeviceStatus(dev))\r\n    {\r\n        case SDL_AUDIO_STOPPED: printf(\"stopped\\n\"); break;\r\n        case SDL_AUDIO_PLAYING: printf(\"playing\\n\"); break;\r\n        case SDL_AUDIO_PAUSED: printf(\"paused\\n\"); break;\r\n        default: printf(\"???\"); break;\r\n    }\r\n}\r\n\r\n// device starts paused\r\nSDL_AudioDeviceID dev;\r\ndev = SDL_OpenAudioDevice(NULL, 0, &desired, &obtained, 0);  \r\nif (dev != 0)\r\n{\r\n     printStatus(dev);  // prints \"paused\"\r\n     SDL_PauseAudioDevice(dev, 0);\r\n     printStatus(dev);  // prints \"playing\"\r\n     SDL_PauseAudioDevice(dev, 1);\r\n     printStatus(dev);  // prints \"paused\"\r\n     SDL_CloseAudioDevice(dev);\r\n     printStatus(dev);  // prints \"stopped\"\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nOpened devices are always PLAYING or PAUSED in normal circumstances. A failing device may change its status to STOPPED at any time, and closing a device will progress to STOPPED, too. Asking for the state on an unopened or unknown device ID will report STOPPED.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAudioDeviceStatus]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_BlendFactor",
      "Uri": "https://wiki.libsdl.org/SDL_BlendFactor",
      "Categories": [
        "CategoryEnum",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:00:40.5729182-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_BlendFactor =\r\nAn enumeration of blend factors used when creating a custom blend mode with [[SDL_ComposeCustomBlendMode]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_BLENDFACTOR_ZERO||0, 0, 0, 0||\r\n||SDL_BLENDFACTOR_ONE||1, 1, 1, 1||\r\n||SDL_BLENDFACTOR_SRC_COLOR||srcR, srcG, srcB, srcA||\r\n||SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR||1-srcR, 1-srcG, 1-srcB, 1-srcA||\r\n||SDL_BLENDFACTOR_SRC_ALPHA||srcA, srcA, srcA, srcA||\r\n||SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA||1-srcA, 1-srcA, 1-srcA, 1-srcA||\r\n||SDL_BLENDFACTOR_DST_COLOR||dstR, dstG, dstB, dstA||\r\n||SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR||1-dstR, 1-dstG, 1-dstB, 1-dstA||\r\n||SDL_BLENDFACTOR_DST_ALPHA||dstA, dstA, dstA, dstA||\r\n||SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA||1-dstA, 1-dstA, 1-dstA, 1-dstA||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThe blend factors are multiplied with the pixels from a drawing operation (src) and the pixels from the render target (dst) before the blend operation. The comma-separated factors listed above are always applied in the component order red, green, blue, and alpha.\r\n\r\nSome renderers may not support all factors. See [[SDL_ComposeCustomBlendMode]]() for a list of what the current renderers support.\r\n\r\n== Version ==\r\n\r\nThis enumeration is available since SDL 2.0.6.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_BlendOperation]]\r\n\r\n== Related Functions ==\r\n .[[SDL_ComposeCustomBlendMode]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetTextureBlendMode]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryRender]]\r\n\r\n##Actually from the SDL_blendmode.h header which does not have it's own category in this wiki.\r\n"
    },
    {
      "Name": "SDL_BlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_BlendMode",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:00:41.3043367-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_BlendMode =\r\nAn enumeration of blend modes used in [[SDL_RenderCopy]]() and drawing operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_BLENDMODE_NONE||no blending||\r\n|| ||dstRGBA = srcRGBA||\r\n||SDL_BLENDMODE_BLEND||alpha blending||\r\n|| ||dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))||\r\n|| ||dstA = srcA + (dstA * (1-srcA))||\r\n||SDL_BLENDMODE_ADD||additive blending||\r\n|| ||dstRGB = (srcRGB * srcA) + dstRGB||\r\n|| ||dstA = dstA||\r\n||SDL_BLENDMODE_MOD||color modulate||\r\n|| ||dstRGB = srcRGB * dstRGB||\r\n|| ||dstA = dstA||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Structures ==\r\n .[[SDL_RendererInfo]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRenderDrawBlendMode]]\r\n .[[SDL_GetSurfaceBlendMode]]\r\n .[[SDL_GetTextureBlendMode]]\r\n .[[SDL_RenderCopy]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetSurfaceBlendMode]]\r\n .[[SDL_SetTextureBlendMode]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n\r\n##Actually from the SDL_blendmode.h header which does not have it's own category in this wiki.\r\n"
    },
    {
      "Name": "SDL_BlendOperation",
      "Uri": "https://wiki.libsdl.org/SDL_BlendOperation",
      "Categories": [
        "CategoryEnum",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:00:42.0321559-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_BlendOperation =\r\nAn enumeration of blend operations used when creating a custom blend mode with [[SDL_ComposeCustomBlendMode]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_BLENDOPERATION_ADD||additive operation||\r\n|| ||dst + src||\r\n||SDL_BLENDOPERATION_SUBTRACT||subtractive operation||\r\n|| ||dst - src||\r\n||SDL_BLENDOPERATION_REV_SUBTRACT||reversed subtractive operation||\r\n|| ||src - dst||\r\n||SDL_BLENDOPERATION_MINIMUM||minimum operation||\r\n|| ||min(dst, src)||\r\n||SDL_BLENDOPERATION_MAXIMUM||maximum operation||\r\n|| ||max(dst, src)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThe blend operation takes place when the calculated pixels from a drawing operation (src) and the pixels from the render target (dst) get combined. Each component (red, green, blue, and alpha) is calculated separately. The result is then stored in the render target.\r\n\r\nSome renderers may not support all operations. See [[SDL_ComposeCustomBlendMode]]() for a list of what the current renderers support.\r\n\r\n== Version ==\r\n\r\nThis enumeration is available since SDL 2.0.6.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_BlendFactor]]\r\n\r\n== Related Functions ==\r\n .[[SDL_ComposeCustomBlendMode]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetTextureBlendMode]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryRender]]\r\n\r\n##Actually from the SDL_blendmode.h header which does not have it's own category in this wiki.\r\n"
    },
    {
      "Name": "SDL_EventType",
      "Uri": "https://wiki.libsdl.org/SDL_EventType",
      "Categories": [
        "CategoryEnum",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:00:47.6589296-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_EventType =\r\nAn enumeration of the types of events that can be delivered.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||<style=\"color: #808080;\">SDL_FIRSTEVENT||<style=\"color: #808080;\">do not remove (unused)||\r\n||||<bgcolor=\"#EDEDED\">''Application events''||\r\n||SDL_QUIT||user-requested quit; see [[#Remarks|Remarks]] for details||\r\n||||<bgcolor=\"#EDEDED\">''Android, iOS and WinRT events; see [[#Android, iOS and WinRT Events|Remarks]] for details''||\r\n||SDL_APP_TERMINATING||OS is terminating the application||\r\n||SDL_APP_LOWMEMORY||OS is low on memory; free some||\r\n||SDL_APP_WILLENTERBACKGROUND||application is entering background||\r\n||SDL_APP_DIDENTERBACKGROUND||application entered background||\r\n||SDL_APP_WILLENTERFOREGROUND||application is entering foreground||\r\n||SDL_APP_DIDENTERFOREGROUND||application entered foreground||\r\n||||<bgcolor=\"#EDEDED\">''Window events''||\r\n||[[SDL_WindowEvent|SDL_WINDOWEVENT]]||window state change||\r\n||[[SDL_SysWMEvent|SDL_SYSWMEVENT]]||system specific event||\r\n||||<bgcolor=\"#EDEDED\">''Keyboard events''||\r\n||[[SDL_KeyboardEvent|SDL_KEYDOWN]]||key pressed||\r\n||[[SDL_KeyboardEvent|SDL_KEYUP]]||key released||\r\n||[[SDL_TextEditingEvent|SDL_TEXTEDITING]]||keyboard text editing (composition)||\r\n||[[SDL_TextInputEvent|SDL_TEXTINPUT]]||keyboard text input||\r\n||SDL_KEYMAPCHANGED||keymap changed due to a system event such as an input language or keyboard layout change (>= SDL 2.0.4)||\r\n||||<bgcolor=\"#EDEDED\">''Mouse events''||\r\n||[[SDL_MouseMotionEvent|SDL_MOUSEMOTION]]||mouse moved||\r\n||[[SDL_MouseButtonEvent|SDL_MOUSEBUTTONDOWN]]||mouse button pressed||\r\n||[[SDL_MouseButtonEvent|SDL_MOUSEBUTTONUP]]||mouse button released||\r\n||[[SDL_MouseWheelEvent|SDL_MOUSEWHEEL]]||mouse wheel motion||\r\n||||<bgcolor=\"#EDEDED\">''Joystick events''||\r\n||[[SDL_JoyAxisEvent|SDL_JOYAXISMOTION]]||joystick axis motion||\r\n||[[SDL_JoyBallEvent|SDL_JOYBALLMOTION]]||joystick trackball motion||\r\n||[[SDL_JoyHatEvent|SDL_JOYHATMOTION]]||joystick hat position change||\r\n||[[SDL_JoyButtonEvent|SDL_JOYBUTTONDOWN]]||joystick button pressed||\r\n||[[SDL_JoyButtonEvent|SDL_JOYBUTTONUP]]||joystick button released||\r\n||[[SDL_JoyDeviceEvent|SDL_JOYDEVICEADDED]]||joystick connected||\r\n||[[SDL_JoyDeviceEvent|SDL_JOYDEVICEREMOVED]]||joystick disconnected||\r\n||||<bgcolor=\"#EDEDED\">''Controller events''||\r\n||[[SDL_ControllerAxisEvent|SDL_CONTROLLERAXISMOTION]]||controller axis motion||\r\n||[[SDL_ControllerButtonEvent|SDL_CONTROLLERBUTTONDOWN]]||controller button pressed||\r\n||[[SDL_ControllerButtonEvent|SDL_CONTROLLERBUTTONUP]]||controller button released||\r\n||[[SDL_ControllerDeviceEvent|SDL_CONTROLLERDEVICEADDED]]||controller connected||\r\n||[[SDL_ControllerDeviceEvent|SDL_CONTROLLERDEVICEREMOVED]]||controller disconnected||\r\n||[[SDL_ControllerDeviceEvent|SDL_CONTROLLERDEVICEREMAPPED]]||controller mapping updated||\r\n||||<bgcolor=\"#EDEDED\">''Touch events''||\r\n||[[SDL_TouchFingerEvent|SDL_FINGERDOWN]]||user has touched input device||\r\n||[[SDL_TouchFingerEvent|SDL_FINGERUP]]||user stopped touching input device||\r\n||[[SDL_TouchFingerEvent|SDL_FINGERMOTION]]||user is dragging finger on input device||\r\n||||<bgcolor=\"#EDEDED\">''Gesture events''||\r\n||[[SDL_DollarGestureEvent|SDL_DOLLARGESTURE]]||||\r\n||[[SDL_DollarGestureEvent|SDL_DOLLARRECORD]]||||\r\n||[[SDL_MultiGestureEvent|SDL_MULTIGESTURE]]||||\r\n||||<bgcolor=\"#EDEDED\">''Clipboard events''||\r\n||SDL_CLIPBOARDUPDATE||the clipboard changed||\r\n||||<bgcolor=\"#EDEDED\">''Drag and drop events''||\r\n||[[SDL_DropEvent|SDL_DROPFILE]]||the system requests a file open||\r\n||[[SDL_DropEvent|SDL_DROPTEXT]]||text/plain drag-and-drop event||\r\n||[[SDL_DropEvent|SDL_DROPBEGIN]]||a new set of drops is beginning (>= SDL 2.0.5)||\r\n||[[SDL_DropEvent|SDL_DROPCOMPLETE]]||current set of drops is now complete (>= SDL 2.0.5)||\r\n||||<bgcolor=\"#EDEDED\">''Audio hotplug events''||\r\n||[[SDL_AudioDeviceEvent|SDL_AUDIODEVICEADDED]]||a new audio device is available (>= SDL 2.0.4)||\r\n||[[SDL_AudioDeviceEvent|SDL_AUDIODEVICEREMOVED]]||an audio device has been removed (>= SDL 2.0.4)||\r\n||||<bgcolor=\"#EDEDED\">''Render events''||\r\n||SDL_RENDER_TARGETS_RESET||the render targets have been reset and their contents need to be updated (>= SDL 2.0.2)||\r\n||SDL_RENDER_DEVICE_RESET||the device has been reset and all textures need to be recreated (>= SDL 2.0.4)||\r\n||||<bgcolor=\"#EDEDED\">''These are for your use, and should be allocated with [[SDL_RegisterEvents]]()''||\r\n||SDL_USEREVENT||a user-specified event||\r\n||SDL_LASTEVENT||only for bounding internal arrays||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Event e;\r\nwhile (SDL_PollEvent(&e)) {\r\n    if (e.type == SDL_KEYDOWN) {\r\n        SDL_Log(\"User just pressed down a key!\");\r\n    }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n=== SDL_QUIT ===\r\nSDL_QUIT events are generated for a variety of reasons. An application can choose to ignore the event, for example, if it wants to offer a prompt asking the user to save the current work.\r\n\r\nAn SDL_QUIT event is generated when the user clicks on the close button of the last existing window. This happens in addition to the SDL_WINDOWEVENT/SDL_WINDOWEVENT_CLOSE event, so the application can check whichever is appropriate, or both, or neither. If the application ignores this event and creates another window, SDL_QUIT will be sent again the next time the user clicks on the last remaining window's close button.\r\n\r\nSDL_QUIT is not limited to window closing. On Mac OS X, pressing Command-Q (the standard keyboard shortcut for \"Quit this application\") will cause SDL to generate an SDL_QUIT event, regardless of what windows exist at the time. The application is still responsible for terminating itself properly, however. Applications that completely ignore Command-Q will fail Mac App Store certification.\r\n\r\nOn POSIX systems, [[SDL_Init]]() installs [[http://en.wikipedia.org/wiki/Unix_signal|signal handlers]] for `SIGINT` (keyboard interrupt) and `SIGTERM` (system termination request), if handlers do not already exist, that generate SDL_QUIT events as well.  There is no way to determine the cause of an SDL_QUIT event, but setting a signal handler in your application will override the default generation of quit events for that signal.\r\n\r\n=== Android, iOS and WinRT Events ===\r\nWhat we currently label as \"Android, iOS and WinRT events\" are specific to mobile and embedded devices that have different requirements than your usual desktop application. These events ''must'' be handled in an event filter, since often the OS needs an immediate response and will terminate your process shortly after sending the event, and if it sits in the SDL event queue, it'll be too late. You can handle everything else through a normal [[SDL_PollEvent]]() loop, but you should set up a callback with [[SDL_SetEventFilter]]() for these specific events.\r\n\r\nThis is how these events currently map to the underlying OS:\r\n\r\n||SDL event||What||iOS||Android|| WinRT||\r\n||SDL_APP_TERMINATING||The application is being terminated by the OS.||`applicationWillTerminate()`||`onDestroy()`|| `Exiting()`||\r\n||SDL_APP_LOWMEMORY||The application is low on memory, free memory if possible.||`applicationDidReceiveMemoryWarning()`||`onLowMemory()`|| --||\r\n||SDL_APP_WILLENTERBACKGROUND||The application is about to enter the background.||`applicationWillResignActive()`||`onPause()`|| `Suspending()`||\r\n||SDL_APP_DIDENTERBACKGROUND||The application did enter the background and may not get CPU for some time.||`applicationDidEnterBackground()`||`onPause()`|| `Suspending()`||\r\n||SDL_APP_WILLENTERFOREGROUND||The application is about to enter the foreground.||`applicationWillEnterForeground()`||`onResume()`|| `Resuming()`||\r\n||SDL_APP_DIDENTERFOREGROUND||The application is now interactive.||`applicationDidBecomeActive()`||`onResume()`|| `Resuming()`||\r\n\r\n== Related Structures ==\r\n . [[SDL_JoyAxisEvent]]\r\n . [[SDL_JoyBallEvent]]\r\n . [[SDL_JoyButtonEvent]]\r\n . [[SDL_JoyHatEvent]]\r\n . [[SDL_JoyDeviceEvent]]\r\n . [[SDL_ControllerAxisEvent]]\r\n . [[SDL_ControllerButtonEvent]]\r\n . [[SDL_ControllerDeviceEvent]]\r\n . [[SDL_KeyboardEvent]]\r\n . [[SDL_MouseButtonEvent]]\r\n . [[SDL_MouseMotionEvent]]\r\n . [[SDL_MouseWheelEvent]]\r\n . [[SDL_QuitEvent]]\r\n . [[SDL_SysWMEvent]]\r\n . [[SDL_TextEditingEvent]]\r\n . [[SDL_TextInputEvent]]\r\n . [[SDL_UserEvent]]\r\n . [[SDL_WindowEvent]]\r\n . [[SDL_DropEvent]]\r\n . [[SDL_AudioDeviceEvent]]\r\n . [[SDL_TouchFingerEvent]]\r\n . [[SDL_DollarGestureEvent]]\r\n . [[SDL_MultiGestureEvent]]\r\n\r\n\r\n== Related Functions ==\r\n . [[SDL_PollEvent]]\r\n . [[SDL_SetEventFilter]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_GLattr",
      "Uri": "https://wiki.libsdl.org/SDL_GLattr",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:00:48.3405899-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GLattr =\r\nAn enumeration of OpenGL configuration attributes.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_GL_RED_SIZE||the minimum number of bits for the red channel of the color buffer; defaults to 3||\r\n||SDL_GL_GREEN_SIZE||the minimum number of bits for the green channel of the color buffer; defaults to 3||\r\n||SDL_GL_BLUE_SIZE||the minimum number of bits for the blue channel of the color buffer; defaults to 2||\r\n||SDL_GL_ALPHA_SIZE||the minimum number of bits for the alpha channel of the color buffer; defaults to 0||\r\n||SDL_GL_BUFFER_SIZE||the minimum number of bits for frame buffer size; defaults to 0||\r\n||SDL_GL_DOUBLEBUFFER||whether the output is single or double buffered; defaults to double buffering on||\r\n||SDL_GL_DEPTH_SIZE||the minimum number of bits in the depth buffer; defaults to 16||\r\n||SDL_GL_STENCIL_SIZE||the minimum number of bits in the stencil buffer; defaults to 0||\r\n||SDL_GL_ACCUM_RED_SIZE||the minimum number of bits for the red channel of the accumulation buffer; defaults to 0||\r\n||SDL_GL_ACCUM_GREEN_SIZE||the minimum number of bits for the green channel of the accumulation buffer; defaults to 0||\r\n||SDL_GL_ACCUM_BLUE_SIZE||the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0||\r\n||SDL_GL_ACCUM_ALPHA_SIZE||the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0||\r\n||SDL_GL_STEREO||whether the output is stereo 3D; defaults to off||\r\n||SDL_GL_MULTISAMPLEBUFFERS||the number of buffers used for multisample anti-aliasing; defaults to 0; see [[#multisample|Remarks]] for details||\r\n||SDL_GL_MULTISAMPLESAMPLES||the number of samples used around the current pixel used for multisample anti-aliasing; defaults to 0; see [[#multisample|Remarks]] for details||\r\n||SDL_GL_ACCELERATED_VISUAL||set to 1 to require hardware acceleration, set to 0 to force software rendering; defaults to allow either||\r\n||<rowstyle=\"color: #808080;\">SDL_GL_RETAINED_BACKING||not used (deprecated)||\r\n||SDL_GL_CONTEXT_MAJOR_VERSION||OpenGL context major version; see [[#OpenGL|Remarks]] for details||\r\n||SDL_GL_CONTEXT_MINOR_VERSION||OpenGL context minor version; see [[#OpenGL|Remarks]] for details||\r\n||SDL_GL_CONTEXT_FLAGS||some combination of 0 or more of elements of the [[SDL_GLcontextFlag]] enumeration; defaults to 0||\r\n||SDL_GL_CONTEXT_PROFILE_MASK||type of GL context (Core, Compatibility, ES). See [[SDL_GLprofile]]; default value depends on platform||\r\n||SDL_GL_SHARE_WITH_CURRENT_CONTEXT||OpenGL context sharing; defaults to 0||\r\n||SDL_GL_FRAMEBUFFER_SRGB_CAPABLE||requests sRGB capable visual; defaults to 0 (>= SDL 2.0.1)||\r\n||SDL_GL_CONTEXT_RELEASE_BEHAVIOR||sets context the release behavior; defaults to 1 (>= SDL 2.0.4)||\r\n||<rowstyle=\"color: #808080;\">SDL_GL_CONTEXT_EGL||not used (deprecated)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);\r\nSDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);\r\nSDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);\r\nSDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);\r\nSDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);\r\nSDL_GL_CreateContext(window);\r\n}}}\r\n\r\n== Remarks ==\r\nWhile you can set most OpenGL attributes normally, the attributes listed above must be known before SDL creates the window that will be used with the OpenGL context. These attributes are set and read with [[SDL_GL_SetAttribute]]() and [[SDL_GL_GetAttribute]]().\r\n\r\nIn some cases, these attributes are minimum requests; the GL does not promise to give you exactly what you asked for. It's possible to ask for a 16-bit depth buffer and get a 24-bit one instead, for example, or to ask for no stencil buffer and still have one available. Context creation should fail if the GL can't provide your requested attributes at a minimum, but you should check to see exactly what you got.\r\n\r\n<<Anchor(multisample)>> [[http://en.wikipedia.org/wiki/Multisample_anti-aliasing|Multisample anti-aliasing]] is a type of full screen anti-aliasing.  Multipsampling defaults to off but can be turned on by setting SDL_GL_MULTISAMPLEBUFFERS to 1 and SDL_GL_MULTISAMPLESAMPLES to a value greater than 0.  Typical values are 2 and 4.\r\n\r\n<<Anchor(OpenGL)>> SDL_GL_CONTEXT_PROFILE_MASK determines the type of context created, while both SDL_GL_CONTEXT_MAJOR_VERSION and SDL_GL_CONTEXT_MINOR_VERSION determine which version. All three attributes must be set prior to creating the first window, and in general you can't change the value of SDL_GL_CONTEXT_PROFILE_MASK without first destroying all windows created with the previous setting.\r\n\r\nSDL_GL_CONTEXT_RELEASE_BEHAVIOR can be set to SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE or SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH.\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_CreateContext]]\r\n .[[SDL_GL_GetAttribute]]\r\n .[[SDL_GL_SetAttribute]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GLcontextFlag",
      "Uri": "https://wiki.libsdl.org/SDL_GLcontextFlag",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:00:49.084289-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n\r\n= SDL_GLcontextFlag =\r\nAn enumeration of OpenGL context configuration flags.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||SDL_GL_CONTEXT_DEBUG_FLAG||see [[#SDL_GL_CONTEXT_DEBUG_FLAG|Remarks]]||\r\n||SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG||see [[#SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG|Remarks]]||\r\n||SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG||see [[#SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG|Remarks]]||\r\n||SDL_GL_CONTEXT_RESET_ISOLATION_FLAG||see [[#SDL_GL_CONTEXT_RESET_ISOLATION_FLAG|Remarks]]||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, SDL_GL_CONTEXT_DEBUG_FLAG);\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThis enumeration is used in conjunction with [[SDL_GL_SetAttribute]] and [[SDL_GLattr|SDL_GL_CONTEXT_FLAGS]].  Multiple flags can be OR'd together.\r\n\r\nIf you don't know what these values do, you should assume the defaults are already fine and shouldn't use these flags. Not only are they not available on all platforms and GPU drivers, they can also have dramatic consequences for OpenGL functionality and performance, so please research them heavily before putting these flags to use.\r\n\r\n=== SDL_GL_CONTEXT_DEBUG_FLAG ===\r\n\r\nThis flag maps to GLX_CONTEXT_DEBUG_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/glx_create_context.txt|GLX_ARB_create_context]] extension for X11 and WGL_CONTEXT_DEBUG_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/wgl_create_context.txt|WGL_ARB_create_context]] extension for Windows. This flag is currently ignored on other targets that don't support equivalent functionality. This flag is intended to put the GL into a \"debug\" mode which might offer better developer insights, possibly at a loss of performance (although a given GL implementation may or may not do anything differently in the presence of this flag).\r\n\r\n=== SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG ===\r\n\r\nThis flag maps to GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/glx_create_context.txt|GLX_ARB_create_context]] extension for X11 and WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/wgl_create_context.txt|WGL_ARB_create_context]] extension for Windows. This flag is currently ignored on other targets that don't support equivalent functionality. This flag is intended to put the GL into a \"forward compatible\" mode, which means that no deprecated functionality will be supported, possibly at a gain in performance, and only applies to GL 3.0 and later contexts.\r\n\r\n=== SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG ===\r\n\r\nThis flag maps to GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/glx_create_context_robustness.txt|GLX_ARB_create_context_robustness]] extension for X11 and WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/wgl_create_context_robustness.txt|WGL_ARB_create_context_robustness]] extension for Windows. This flag is currently ignored on other targets that don't support equivalent functionality. This flag is intended to require a GL context that supports the GL_ARB_robustness extension--a mode that offers a few APIs that are safer than the usual defaults (think snprintf() vs sprintf()).\r\n\r\n=== SDL_GL_CONTEXT_RESET_ISOLATION_FLAG ===\r\n\r\nThis flag maps to GLX_CONTEXT_RESET_ISOLATION_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/glx_robustness_isolation.txt|GLX_ARB_robustness_isolation]] extension for X11 and WGL_CONTEXT_RESET_ISOLATION_BIT_ARB in the [[http://www.opengl.org/registry/specs/ARB/wgl_robustness_isolation.txt|WGL_ARB_robustness_isolation]] extension for Windows. This flag is currently ignored on other targets that don't support equivalent functionality. This flag is intended to require the GL to make promises about what to do in the face of driver or hardware failure.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_GLattr]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_GetAttribute]]\r\n .[[SDL_GL_SetAttribute]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GLprofile",
      "Uri": "https://wiki.libsdl.org/SDL_GLprofile",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:00:49.7897728-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GLprofile =\r\nAn enumeration of OpenGL profiles.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||SDL_GL_CONTEXT_PROFILE_CORE||OpenGL core profile - deprecated functions are disabled||\r\n||SDL_GL_CONTEXT_PROFILE_COMPATIBILITY||OpenGL compatibility profile - deprecated functions are allowed||\r\n||SDL_GL_CONTEXT_PROFILE_ES||OpenGL ES profile - only a subset of the base OpenGL functionality is available||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThis enumeration is used in conjunction with [[SDL_GL_SetAttribute]]() and [[SDL_GLattr|SDL_GL_CONTEXT_PROFILE_MASK]].  Although the name [[SDL_GLattr|SDL_GL_CONTEXT_PROFILE_MASK]] implies that multiple flags can be OR'd together, the profiles are mutually exclusive, and [[SDL_GL_SetAttribute]]() accepts at most one of them.  Setting the [[SDL_GLattr|SDL_GL_CONTEXT_PROFILE_MASK]] attribute to 0 leaves the choice of profile up to SDL.  Should be used in conjunction with the [[SDL_GLattr|SDL_GL_CONTEXT_MAJOR_VERSION]] and [[SDL_GLattr|SDL_GL_CONTEXT_MINOR_VERSION]] attributes, since OpenGL profiles are defined relative to a particular version of OpenGL.  There is no way to distinguish between the common and common lite profiles of OpenGL ES versions 1.0 and 1.1.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_GLattr]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_GetAttribute]]\r\n .[[SDL_GL_SetAttribute]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GameControllerAxis",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerAxis",
      "Categories": [
        "CategoryEnum",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:01:31.3039303-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerAxis =\r\nAn enumeration of axes available from a controller.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||SDL_CONTROLLER_AXIS_INVALID      || ||\r\n||SDL_CONTROLLER_AXIS_LEFTX        || ||\r\n||SDL_CONTROLLER_AXIS_LEFTY        || ||\r\n||SDL_CONTROLLER_AXIS_RIGHTX       || ||\r\n||SDL_CONTROLLER_AXIS_RIGHTY       || ||\r\n||SDL_CONTROLLER_AXIS_TRIGGERLEFT  || ||\r\n||SDL_CONTROLLER_AXIS_TRIGGERRIGHT || ||\r\n||SDL_CONTROLLER_AXIS_MAX          || ||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetAxis]]\r\n .[[SDL_GameControllerGetAxisFromString]]\r\n .[[SDL_GameControllerGetBindForAxis]]\r\n .[[SDL_GameControllerGetStringForAxis]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerButton",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerButton",
      "Categories": [
        "CategoryEnum",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:01:31.9276777-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerButton =\r\nAn enumeration of buttons available from a controller.\r\n\r\n##Replace SDL_Enumeration with the name of the enum and ****** with a brief description of the enum according to the Style Guide, then delete this comment.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n|| SDL_CONTROLLER_BUTTON_INVALID       || ||\r\n|| SDL_CONTROLLER_BUTTON_A             || ||\r\n|| SDL_CONTROLLER_BUTTON_B             || ||\r\n|| SDL_CONTROLLER_BUTTON_X             || ||\r\n|| SDL_CONTROLLER_BUTTON_Y             || ||\r\n|| SDL_CONTROLLER_BUTTON_BACK          || ||\r\n|| SDL_CONTROLLER_BUTTON_GUIDE         || ||\r\n|| SDL_CONTROLLER_BUTTON_START         || ||\r\n|| SDL_CONTROLLER_BUTTON_LEFTSTICK     || ||\r\n|| SDL_CONTROLLER_BUTTON_RIGHTSTICK    || ||\r\n|| SDL_CONTROLLER_BUTTON_LEFTSHOULDER  || ||\r\n|| SDL_CONTROLLER_BUTTON_RIGHTSHOULDER || ||\r\n|| SDL_CONTROLLER_BUTTON_DPAD_UP       || ||\r\n|| SDL_CONTROLLER_BUTTON_DPAD_DOWN     || ||\r\n|| SDL_CONTROLLER_BUTTON_DPAD_LEFT     || ||\r\n|| SDL_CONTROLLER_BUTTON_DPAD_RIGHT    || ||\r\n|| SDL_CONTROLLER_BUTTON_MAX           || ||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetBindForButton]]\r\n .[[SDL_GameControllerGetButton]]\r\n .[[SDL_GameControllerGetButtonFromString]]\r\n .[[SDL_GameControllerGetStringForButton]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HintPriority",
      "Uri": "https://wiki.libsdl.org/SDL_HintPriority",
      "Categories": [
        "CategoryEnum",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:01:37.7101405-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HintPriority =\r\nAn enumeration of hint priorities.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_HINT_DEFAULT||low priority, used for default values||\r\n||SDL_HINT_NORMAL||medium priority||\r\n||SDL_HINT_OVERRIDE||high priority||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetHintWithPriority]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_HitTestResult",
      "Uri": "https://wiki.libsdl.org/SDL_HitTestResult",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:01:38.4523732-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HitTestResult =\r\nAn enumeration of possible return values from the [[SDL_SetWindowHitTest|SDL_HitTest]]() callback.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n\r\n||SDL_HITTEST_NORMAL||region is normal and has no special properties||\r\n||SDL_HITTEST_DRAGGABLE||region can drag entire window||\r\n||SDL_HITTEST_RESIZE_TOPLEFT||region can resize top left window||\r\n||SDL_HITTEST_RESIZE_TOP||region can resize top window||\r\n||SDL_HITTEST_RESIZE_TOPRIGHT||region can resize top right window||\r\n||SDL_HITTEST_RESIZE_RIGHT||region can resize right window||\r\n||SDL_HITTEST_RESIZE_BOTTOMRIGHT||region can resize bottom right window||\r\n||SDL_HITTEST_RESIZE_BOTTOM||region can resize bottom window||\r\n||SDL_HITTEST_RESIZE_BOTTOMLEFT||region can resize bottom left window||\r\n||SDL_HITTEST_RESIZE_LEFT||region can resize left window||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis enumeration is available since SDL 2.0.4.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowHitTest]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_JoystickPowerLevel",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickPowerLevel",
      "Categories": [
        "CategoryEnum",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:01:39.1493183-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_JoystickPowerLevel =\r\nAn enumeration of battery levels of a joystick.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||SDL_JOYSTICK_POWER_UNKNOWN|| ||\r\n||SDL_JOYSTICK_POWER_EMPTY|| ||\r\n||SDL_JOYSTICK_POWER_LOW|| ||\r\n||SDL_JOYSTICK_POWER_MEDIUM|| ||\r\n||SDL_JOYSTICK_POWER_FULL|| ||\r\n||SDL_JOYSTICK_POWER_WIRED|| ||\r\n||SDL_JOYSTICK_POWER_MAX|| ||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickCurrentPowerLevel]]\r\n##Remove this section if empty\r\n\r\n\r\n== Version ==\r\nThis enumeration is available since SDL 2.0.4.\r\n\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryJoystick]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_Keycode",
      "Uri": "https://wiki.libsdl.org/SDL_Keycode",
      "Categories": [
        "CategoryEnum",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:01:39.9046685-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_Keycode =\r\nThe SDL virtual key representation.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n<<Include(SDL_ScancodeAndKeycode, , , from=\"##Start include here.\", to=\"##End include here.\")>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n  //checks if a key is being remapped and prints what the remapping is\r\n  if(event->key.keysym.scancode != SDL_GetScancodeFromKey(event->key.keysym.sym))\r\n    printf(\"Physical %s key acting as %s key\",\r\n      SDL_GetScancodeName(event->key.keysym.scancode),\r\n      SDL_GetKeyName(event->key.keysym.sym));\r\n}}}\r\n\r\n== Remarks ==\r\nValues of this type (also known as keycodes or keysyms) are mapped to the current layout of the keyboard and correlate to an [[SDL_Scancode]].  The scancode identifies the location of a key press and the corresponding [[SDL_Keycode]] gives that key press meaning in the context of the current keyboard layout.\r\n\r\nValues of this type are used to represent keyboard keys using the current layout of the keyboard.  These values include Unicode values representing the unmodified character that would be generated by pressing the key, or other constants for those keys that do not generate characters.\r\n\r\n/* Does SDL use a default layout for SDL_Keycode?  Is it platform-specific?  Are other layouts available or do they have to be created by the user/programmer?  Are they automatically detected or manually set?)>> <<Color2(col=blue,text=\"These are defined in include/SDL_keysym.h and are generally set to the ASCII value associated with the key or whatever SDL_SCANCODE_TO_KEYCODE returns for that key which is the SDL_Scancode with the 30th bit set.\">> */\r\n\r\nTo look up a scancode or keycode by decimal or hexadecimal value you can use the following tables:\r\n .[[SDLScancodeLookup|SDL Scancode Lookup Table]]\r\n .[[SDLKeycodeLookup|SDL Keycode Lookup Table]]\r\n\r\n== Related Enumerations ==\r\n .[[SDL_Scancode]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyFromScancode]]\r\n .[[SDL_GetKeyName]]\r\n .[[SDL_GetScancodeFromKey]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_Keymod",
      "Uri": "https://wiki.libsdl.org/SDL_Keymod",
      "Categories": [
        "CategoryEnum",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:01:40.6403025-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_Keymod =\r\nAn enumeration of key modifier masks.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||KMOD_NONE||0 (no modifier is applicable)||\r\n||KMOD_LSHIFT||the left Shift key is down||\r\n||KMOD_RSHIFT||the right Shift key is down||\r\n||KMOD_LCTRL||the left Ctrl (Control) key is down||\r\n||KMOD_RCTRL||the right Ctrl (Control) key is down||\r\n||KMOD_LALT||the left Alt key is down||\r\n||KMOD_RALT||the right Alt key is down||\r\n||KMOD_LGUI||the left GUI key (often the Windows key) is down||\r\n||KMOD_RGUI||the right GUI key (often the Windows key) is down||\r\n||KMOD_NUM||the Num Lock key (may be located on an extended keypad) is down||\r\n||KMOD_CAPS||the Caps Lock key is down||\r\n||KMOD_MODE||the !AltGr key is down||\r\n||KMOD_CTRL||(KMOD_LCTRL|KMOD_RCTRL)||\r\n||KMOD_SHIFT||(KMOD_LSHIFT|KMOD_RSHIFT)||\r\n||KMOD_ALT||(KMOD_LALT|KMOD_RALT)||\r\n||KMOD_GUI||(KMOD_LGUI|KMOD_RGUI)||\r\n||<style=\"color: #808080;\">KMOD_RESERVED||<style=\"color: #808080;\">reserved for future use||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThese may be OR'd together.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetModState]]\r\n .[[SDL_SetModState]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_LOG_CATEGORY",
      "Uri": "https://wiki.libsdl.org/SDL_LOG_CATEGORY",
      "Categories": [
        "CategoryEnum",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:01:43.0475551-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LOG_CATEGORY =\r\nAn enumeration of the predefined log categories.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_LOG_CATEGORY_APPLICATION||application log||\r\n||SDL_LOG_CATEGORY_ERROR||error log||\r\n||SDL_LOG_CATEGORY_ASSERT||assert log||\r\n||SDL_LOG_CATEGORY_SYSTEM||system log||\r\n||SDL_LOG_CATEGORY_AUDIO||audio log||\r\n||SDL_LOG_CATEGORY_VIDEO||video log||\r\n||SDL_LOG_CATEGORY_RENDER||render log||\r\n||SDL_LOG_CATEGORY_INPUT||input log||\r\n||SDL_LOG_CATEGORY_TEST||test log||\r\n||<rowstyle=\"color: #808080;\">SDL_LOG_CATEGORY_RESERVED#||# = 1-10; reserved for future SDL library use||\r\n||SDL_LOG_CATEGORY_CUSTOM||reserved for application use; see [[#Remarks|Remarks]] for details||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nBy default the APPLICATION category is enabled at the SDL_LOG_PRIORITY_INFO level and all other categories are enabled at the SDL_LOG_PRIORITY_CRITICAL level.  See [[SDL_LogPriority]] for details.\r\n\r\nSDL_LOG_CATEGORY_CUSTOM is reserved for application use; for example:\r\n {{{#!highlight cpp\r\nenum {\r\n      MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,\r\n      MYAPP_CATEGORY_AWESOME2,\r\n      MYAPP_CATEGORY_AWESOME3,\r\n      ...\r\n};\r\n}}}\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogPriority",
      "Uri": "https://wiki.libsdl.org/SDL_LogPriority",
      "Categories": [
        "CategoryEnum",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:01:48.6937656-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogPriority =\r\nAn enumeration of the predefined log priorities.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n##The following content is included on `SDL_LogSetAllPriority, SDL_LogSetPriority, SDL_LogMessage, SDL_LogMessageV`.  Any changes between these comments will be reflected there as well.  Please use caution when editing.  Start Include here.\r\n||SDL_LOG_PRIORITY_VERBOSE||||\r\n||SDL_LOG_PRIORITY_DEBUG||||\r\n||SDL_LOG_PRIORITY_INFO||||\r\n||SDL_LOG_PRIORITY_WARN||||\r\n||SDL_LOG_PRIORITY_ERROR||||\r\n||SDL_LOG_PRIORITY_CRITICAL||||\r\n||<rowstyle=\"color: #808080;\">SDL_NUM_LOG_PRIORITIES||(internal use)||\r\n##End Include here.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n## Start Include Default Priority\r\nThe default log priorities are as follows:\r\n||`SDL_LOG_CATEGORY_APPLICATION`||`SDL_LOG_PRIORITY_INFO`||\r\n||`SDL_LOG_CATEGORY_ASSERT`||`SDL_LOG_PRIORITY_WARN`||\r\n||`SDL_LOG_CATEGORY_TEST`||`SDL_LOG_PRIORITY_VERBOSE`||\r\n||everything else||`SDL_LOG_PRIORITY_CRITICAL`||\r\n## End Include Default Priority\r\n\r\nIf you're debugging SDL you might want to call:\r\n {{{SDL_LogSetAllPriority(SDL_LOG_PRIORITY_WARN);}}}\r\n\r\n== Related Functions ==\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogSetAllPriority]]\r\n .[[SDL_LogSetPriority]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_MessageBoxButtonFlags",
      "Uri": "https://wiki.libsdl.org/SDL_MessageBoxButtonFlags",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:01:49.486037-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MessageBoxButtonFlags =\r\nAn enumeration of flags for [[SDL_MessageBoxButtonData]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT||marks the default button when return is hit||\r\n||SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT||marks the default button when escape is hit||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_MessageBoxButtonData]] \r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_MessageBoxColorType",
      "Uri": "https://wiki.libsdl.org/SDL_MessageBoxColorType",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:01:50.1300748-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MessageBoxColorType =\r\nAn enumeration of positions inside the colors array of [[SDL_MessageBoxColorScheme]].\r\n\r\n##Replace SDL_Enumeration with the name of the enum and ****** with a brief description of the enum according to the Style Guide, then delete this comment.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||SDL_MESSAGEBOX_COLOR_BACKGROUND|| ||\r\n||SDL_MESSAGEBOX_COLOR_TEXT|| ||\r\n||SDL_MESSAGEBOX_COLOR_BUTTON_BORDER|| ||\r\n||SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND|| ||\r\n||SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED|| ||\r\n||SDL_MESSAGEBOX_COLOR_MAX|| ||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_MessageBoxColorScheme]] \r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_MessageBoxFlags",
      "Uri": "https://wiki.libsdl.org/SDL_MessageBoxFlags",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:01:50.8452901-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MessageBoxFlags =\r\nAn enumeration of message box flags (e.g. if supported message box will display warning icon).\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n|| SDL_MESSAGEBOX_ERROR       || error dialog ||\r\n|| SDL_MESSAGEBOX_WARNING     || warning dialog ||\r\n|| SDL_MESSAGEBOX_INFORMATION || informational dialog ||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_MessageBoxData]]\r\n##Remove this section if empty\r\n\r\n== Related Functions ==\r\n .[[SDL_ShowSimpleMessageBox]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_PixelFormatEnum",
      "Uri": "https://wiki.libsdl.org/SDL_PixelFormatEnum",
      "Categories": [
        "CategoryEnum",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:01:51.4948031-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_PixelFormatEnum =\r\nAn enumeration of pixel formats.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n=== Pixel Format Macros ===\r\n||SDL_PIXELTYPE(format)||the type of the pixel format; see [[#type|Remarks]] for details||\r\n||SDL_PIXELORDER(format)||the ordering of channels or bits in the pixel format; see [[#order|Remarks]] for details||\r\n||SDL_PIXELLAYOUT(format)||the channel bit pattern of the pixel format; see [[#layout|Remarks]] for details||\r\n||SDL_BITSPERPIXEL(format)||the number of bits of color information in the pixel format||\r\n||SDL_BYTESPERPIXEL(format)||the number of bytes used to represent a pixel||\r\n||SDL_ISPIXELFORMAT_INDEXED(format)||true for pixel formats that have a palette||\r\n||SDL_ISPIXELFORMAT_ALPHA(format)||true for pixel formats that have an alpha channel||\r\n||SDL_ISPIXELFORMAT_FOURCC(format)||true for pixel formats representing unique formats, for example YUV formats||\r\n\r\n=== Pixel Format Values ===\r\n##The following content is included on to SDL_RendererInfo, SDL_CreateTexture, SDL_RenderWritePixels, SDL_RenderReadPixels, SDL_QueryTexture, SDL_CreateTextureFromSurface, SDL_AllocFormat.  Any changes between these comments will be reflected there as well.  Please use caution when editing.  Start Include here.\r\n||SDL_PIXELFORMAT_UNKNOWN||||\r\n||SDL_PIXELFORMAT_INDEX1LSB||||\r\n||SDL_PIXELFORMAT_INDEX1MSB||||\r\n||SDL_PIXELFORMAT_INDEX4LSB||||\r\n||SDL_PIXELFORMAT_INDEX4MSB||||\r\n||SDL_PIXELFORMAT_INDEX8||||\r\n||SDL_PIXELFORMAT_RGB332||||\r\n||SDL_PIXELFORMAT_RGB444||||\r\n||SDL_PIXELFORMAT_RGB555||||\r\n||SDL_PIXELFORMAT_BGR555||||\r\n||SDL_PIXELFORMAT_ARGB4444||||\r\n||SDL_PIXELFORMAT_RGBA4444||||\r\n||SDL_PIXELFORMAT_ABGR4444||||\r\n||SDL_PIXELFORMAT_BGRA4444||||\r\n||SDL_PIXELFORMAT_ARGB1555||||\r\n||SDL_PIXELFORMAT_RGBA5551||||\r\n||SDL_PIXELFORMAT_ABGR1555||||\r\n||SDL_PIXELFORMAT_BGRA5551||||\r\n||SDL_PIXELFORMAT_RGB565||||\r\n||SDL_PIXELFORMAT_BGR565||||\r\n||SDL_PIXELFORMAT_RGB24||||\r\n||SDL_PIXELFORMAT_BGR24||||\r\n||SDL_PIXELFORMAT_RGB888||||\r\n||SDL_PIXELFORMAT_RGBX8888||||\r\n||SDL_PIXELFORMAT_BGR888||||\r\n||SDL_PIXELFORMAT_BGRX8888||||\r\n||SDL_PIXELFORMAT_ARGB8888||||\r\n||SDL_PIXELFORMAT_RGBA8888||||\r\n||SDL_PIXELFORMAT_ABGR8888||||\r\n||SDL_PIXELFORMAT_BGRA8888||||\r\n||SDL_PIXELFORMAT_ARGB2101010||||\r\n||SDL_PIXELFORMAT_RGBA32||alias for RGBA byte array of color data, for the current platform (>= SDL 2.0.5)||\r\n||SDL_PIXELFORMAT_ARGB32||alias for ARGB byte array of color data, for the current platform (>= SDL 2.0.5)||\r\n||SDL_PIXELFORMAT_BGRA32||alias for BGRA byte array of color data, for the current platform (>= SDL 2.0.5)||\r\n||SDL_PIXELFORMAT_ABGR32||alias for ABGR byte array of color data, for the current platform (>= SDL 2.0.5)||\r\n||SDL_PIXELFORMAT_YV12||planar mode: Y + V + U (3 planes)||\r\n||SDL_PIXELFORMAT_IYUV||planar mode: Y + U + V (3 planes)||\r\n||SDL_PIXELFORMAT_YUY2||packed mode: Y0+U0+Y1+V0 (1 plane)||\r\n||SDL_PIXELFORMAT_UYVY||packed mode: U0+Y0+V0+Y1 (1 plane)||\r\n||SDL_PIXELFORMAT_YVYU||packed mode: Y0+V0+Y1+U0 (1 plane)||\r\n||SDL_PIXELFORMAT_NV12||planar mode: Y + U/V interleaved (2 planes) (>= SDL 2.0.4)||\r\n||SDL_PIXELFORMAT_NV21||planar mode: Y + V/U interleaved (2 planes) (>= SDL 2.0.4)||\r\n##End Include here.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(type)>> The pixel type is one of the following values:\r\n||SDL_PIXELTYPE_UNKNOWN||\r\n||SDL_PIXELTYPE_INDEX1||\r\n||SDL_PIXELTYPE_INDEX4||\r\n||SDL_PIXELTYPE_INDEX8||\r\n||SDL_PIXELTYPE_PACKED8||\r\n||SDL_PIXELTYPE_PACKED16||\r\n||SDL_PIXELTYPE_PACKED32||\r\n||SDL_PIXELTYPE_ARRAYU8||\r\n||SDL_PIXELTYPE_ARRAYU16||\r\n||SDL_PIXELTYPE_ARRAYU32||\r\n||SDL_PIXELTYPE_ARRAYF16||\r\n||SDL_PIXELTYPE_ARRAYF32||\r\n\r\n<<Anchor(order)>> Depending on the pixel type there are three different types of orderings - bitmapped, packed, or array.\r\n||'''Bitmap pixel order''' (high bit -> low bit)||\r\n||SDL_BITMAPORDER_NONE||\r\n||SDL_BITMAPORDER_4321||\r\n||SDL_BITMAPORDER_1234||\r\n||'''Packed component order''' (high bit -> low bit)||\r\n||SDL_PACKEDORDER_NONE||\r\n||SDL_PACKEDORDER_XRGB||\r\n||SDL_PACKEDORDER_RGBX||\r\n||SDL_PACKEDORDER_ARGB||\r\n||SDL_PACKEDORDER_RGBA||\r\n||SDL_PACKEDORDER_XBGR||\r\n||SDL_PACKEDORDER_BGRX||\r\n||SDL_PACKEDORDER_ABGR||\r\n||SDL_PACKEDORDER_BGRA||\r\n||'''Array component order''' (low byte -> high byte)||\r\n||SDL_ARRAYORDER_NONE||\r\n||SDL_ARRAYORDER_RGB||\r\n||SDL_ARRAYORDER_RGBA||\r\n||SDL_ARRAYORDER_ARGB||\r\n||SDL_ARRAYORDER_BGR||\r\n||SDL_ARRAYORDER_BGRA||\r\n||SDL_ARRAYORDER_ABGR||\r\n\r\n<<Anchor(layout)>> Packed pixel formats have one of the following channel layouts:\r\n||SDL_PACKEDLAYOUT_NONE||\r\n||SDL_PACKEDLAYOUT_332||\r\n||SDL_PACKEDLAYOUT_4444||\r\n||SDL_PACKEDLAYOUT_1555||\r\n||SDL_PACKEDLAYOUT_5551||\r\n||SDL_PACKEDLAYOUT_565||\r\n||SDL_PACKEDLAYOUT_8888||\r\n||SDL_PACKEDLAYOUT_2101010||\r\n||SDL_PACKEDLAYOUT_1010102||\r\n\r\n=== SDL_PIXELFORMAT_*32 aliases ===\r\nSDL_PIXELFORMAT_RGBA32 is an alias for SDL_PIXELFORMAT_RGBA8888 on big endian machines and for SDL_PIXELFORMAT_ABGR8888 on little endian machines, so you can use it to specify that your pixels are represented as RGBA byte arrays, like SDL_PIXELFORMAT_RGB24 is for RGB byte arrays. <<BR>>\r\nHowever, being just an alias, it has the exact same value of the aliased type so [[SDL_GetPixelFormatName]](SDL_PIXELFORMAT_RGBA32) will return the name of the aliased type (e.g. \"SDL_PIXELFORMAT_ABGR8888\"), depending on your platform.<<BR>>\r\nThe same applies to SDL_PIXELFORMAT_ARGB32, SDL_PIXELFORMAT_BGRA32 and SDL_PIXELFORMAT_ABGR32 (with the only difference that they alias other pixel formats, of course). The SDL_PIXELFORMAT_*32 aliases are available since SDL 2.0.5.\r\n\r\n== Related Structures ==\r\n .[[SDL_DisplayMode]]\r\n .[[SDL_RendererInfo]]\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTexture]]\r\n .[[SDL_CreateTextureFromSurface]]\r\n .[[SDL_GetPixelFormatName]]\r\n .[[SDL_MasksToPixelFormatEnum]]\r\n .[[SDL_PixelFormatEnumToMasks]]\r\n .[[SDL_QueryTexture]]\r\n .[[SDL_RenderReadPixels]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_PowerState",
      "Uri": "https://wiki.libsdl.org/SDL_PowerState",
      "Categories": [
        "CategoryEnum",
        "CategoryPower"
      ],
      "LastUpdate": "2021-01-16T14:01:52.2237679-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_PowerState =\r\nAn enumeration of the basic state of the system's power supply.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_POWERSTATE_UNKNOWN||cannot determine power status||\r\n||SDL_POWERSTATE_ON_BATTERY||not plugged in, running on the battery||\r\n||SDL_POWERSTATE_NO_BATTERY||plugged in, no battery available||\r\n||SDL_POWERSTATE_CHARGING||plugged in, charging battery||\r\n||SDL_POWERSTATE_CHARGED||plugged in, battery charged||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nif (SDL_GetPowerInfo(NULL, NULL) == SDL_POWERSTATE_ON_BATTERY) {\r\n    printf(\"You should plug in your laptop before running this update.\\n\");\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nNot all machines can have batteries at all, and not all platforms can report battery status. Those that do can still having minor moments of confusion about the state of the battery. As such, you should always be prepared to get an otherwise-unexpected SDL_POWERSTATE_UNKNOWN from [[SDL_GetPowerInfo]](). Also, batteries are fickle hardware: reported status can flicker between two states for no obvious reason on occasion.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetPowerInfo]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryPower]]\r\n"
    },
    {
      "Name": "SDL_RendererFlags",
      "Uri": "https://wiki.libsdl.org/SDL_RendererFlags",
      "Categories": [
        "CategoryEnum",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:01:57.9174581-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RendererFlags =\r\nAn enumeration of flags used when creating a rendering context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_RENDERER_SOFTWARE||the renderer is a software fallback||\r\n||SDL_RENDERER_ACCELERATED||the renderer uses hardware acceleration||\r\n||SDL_RENDERER_PRESENTVSYNC||present is synchronized with the refresh rate||\r\n||SDL_RENDERER_TARGETTEXTURE||the renderer supports rendering to texture||\r\n\r\nNote that providing no flags gives priority to available SDL_RENDERER_ACCELERATED renderers.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Structures ==\r\n .[[SDL_RendererInfo]]\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RendererFlip",
      "Uri": "https://wiki.libsdl.org/SDL_RendererFlip",
      "Categories": [
        "CategoryEnum",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:01:58.6467215-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RendererFlip =\r\nAn enumeration of flags that can be used in the flip parameter for [[SDL_RenderCopyEx]].\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_FLIP_NONE||do not flip||\r\n||SDL_FLIP_HORIZONTAL||flip horizontally||\r\n||SDL_FLIP_VERTICAL||flip vertically||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* casts may be necessary for some compiler settings or languages (e.g. C++) */\r\nSDL_RendererFlip flip = SDL_FLIP_HORIZONTAL | SDL_FLIP_VERTICAL;\r\n\r\nSDL_RenderCopyEx(renderer, texture, &srcrect, &dstrect, angle, &center, flip);\r\n}}}\r\n\r\n== Remarks ==\r\nIf you want to do a diagonal flip (both horizontal and vertical), use bitwise or ('|' operator).\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderCopyEx]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_SYSWM_TYPE",
      "Uri": "https://wiki.libsdl.org/SDL_SYSWM_TYPE",
      "Categories": [
        "CategoryEnum",
        "CategorySWM"
      ],
      "LastUpdate": "2021-01-16T14:01:59.4344247-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SYSWM_TYPE =\r\nAn enumeration of the various supported windowing subsystems.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_SYSWM_UNKNOWN||||\r\n||SDL_SYSWM_WINDOWS||Microsoft Windows||\r\n||SDL_SYSWM_X11||X Window System||\r\n||SDL_SYSWM_DIRECTFB||[[https://en.wikipedia.org/wiki/DirectFB|DirectFB]]||\r\n||SDL_SYSWM_COCOA||Apple Mac OS X||\r\n||SDL_SYSWM_UIKIT||Apple iOS||\r\n||SDL_SYSWM_WAYLAND||Wayland (>= SDL 2.0.2)||\r\n||SDL_SYSWM_MIR||Mir (>= SDL 2.0.2)||\r\n||SDL_SYSWM_WINRT||WinRT (>= SDL 2.0.3)||\r\n||SDL_SYSWM_ANDROID||Android (>= SDL 2.0.4)||\r\n||SDL_SYSWM_VIVANTE||Vivante (>= SDL 2.0.5)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Structures ==\r\n .[[SDL_SysWMinfo]]\r\n .[[SDL_SysWMmsg]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowWMInfo]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategorySWM]]\r\n"
    },
    {
      "Name": "SDL_Scancode",
      "Uri": "https://wiki.libsdl.org/SDL_Scancode",
      "Categories": [
        "CategoryEnum",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:02:40.8055952-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_Scancode =\r\nAn enumeration of the SDL keyboard scancode representation.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n<<Include(SDL_ScancodeAndKeycode, , , from=\"##Start include here.\", to=\"##End include here.\")>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n  /* checks if a key is being remapped and prints what the remapping is */\r\n  if (event->key.keysym.scancode != SDL_GetScancodeFromKey(event->key.keysym.sym)) {\r\n    SDL_Log(\"Physical %s key acting as %s key\",\r\n      SDL_GetScancodeName(event->key.keysym.scancode),\r\n      SDL_GetKeyName(event->key.keysym.sym));\r\n  }\r\n}}}\r\n\r\n== Remarks ==\r\nValues of this type are used to represent the physical location of a keyboard key on the keyboard.  This is correlated to the [[SDL_Keycode]] associated with that location to give a key press meaning.\r\n\r\n/* These are used in many places, including */ Values of this type are used to represent keyboard keys, among other places in the `SDL_keysym::scancode` `key.keysym.scancode` field of the [[SDL_Event]] structure.\r\n\r\nThe values in this enumeration are based on the USB usage page standard:\r\n [[http://www.usb.org/developers/docs/]]\r\n\r\nTo look up a scancode or keycode by decimal or hexadecimal value you can use the following tables:\r\n .[[SDLScancodeLookup|SDL Scancode Lookup Table]]\r\n .[[SDLKeycodeLookup|SDL Keycode Lookup Table]]\r\n\r\n== Related Enumerations ==\r\n .[[SDL_Keycode]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyboardState]]\r\n .[[SDL_GetKeyFromScancode]]\r\n .[[SDL_GetKeyName]]\r\n .[[SDL_GetScancodeFromKey]]\r\n .[[SDL_GetScancodeName]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_TextureAccess",
      "Uri": "https://wiki.libsdl.org/SDL_TextureAccess",
      "Categories": [
        "CategoryEnum",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:02:41.4840726-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_TextureAccess =\r\nAn enumeration of texture access patterns.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_TEXTUREACCESS_STATIC||changes rarely, not lockable||\r\n||SDL_TEXTUREACCESS_STREAMING||changes frequently, lockable||\r\n||SDL_TEXTUREACCESS_TARGET||can be used as a render target||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTexture]]\r\n .[[SDL_LockTexture]]\r\n .[[SDL_QueryTexture]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_TextureModulate",
      "Uri": "https://wiki.libsdl.org/SDL_TextureModulate",
      "Categories": [
        "CategoryEnum",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:02:42.2396183-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_TextureModulate =\r\nAn enumeration of the texture channel modulation used in [[SDL_RenderCopy]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_TEXTUREMODULATE_NONE||no modulation||\r\n||SDL_TEXTUREMODULATE_COLOR||srcC = srcC * color||\r\n||SDL_TEXTUREMODULATE_ALPHA||srcA = srcA * alpha||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Structures ==\r\n .[[SDL_RendererInfo]]\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderCopy]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_ThreadPriority",
      "Uri": "https://wiki.libsdl.org/SDL_ThreadPriority",
      "Categories": [
        "CategoryEnum",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T14:02:47.9910202-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ThreadPriority =\r\nAn enumeration of the available thread priorities.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n##The following content is included on `SDL_SetThreadPriority`.  Any changes between these comments will be reflected there as well.  Please use caution when editing.  Start Include here.\r\n||SDL_THREAD_PRIORITY_LOW||for non-urgent, background processing||\r\n||SDL_THREAD_PRIORITY_NORMAL||for general purpose processing (default)||\r\n||SDL_THREAD_PRIORITY_HIGH||for timing-critical processing||\r\n##End Include here.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetThreadPriority]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_WinRT_Path",
      "Uri": "https://wiki.libsdl.org/SDL_WinRT_Path",
      "Categories": [
        "CategoryEnum",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:02:48.7454764-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGEnumerations for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_WinRT_Path =\r\nAn enumeration of WinRT / Windows Phone path types.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Values ==\r\n||SDL_WINRT_PATH_INSTALLED_LOCATION||the installed app's root directory; files here are likely to be read-only||\r\n||SDL_WINRT_PATH_LOCAL_FOLDER||the app's local data store; files may be written here||\r\n||SDL_WINRT_PATH_ROAMING_FOLDER||the app's roaming data store (unsupported on Windows Phone); files written here may be copied to other machines via a network connection||\r\n||SDL_WINRT_PATH_TEMP_FOLDER||the app's temporary data store (unsupported on Windows Phone); files written here may be deleted at any time||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis enumeration is available since SDL 2.0.3.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_WinRTGetFSPathUNICODE]]\r\n .[[SDL_WinRTGetFSPathUTF8]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryEnum]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_WindowEventID",
      "Uri": "https://wiki.libsdl.org/SDL_WindowEventID",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:02:49.5532361-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WindowEventID =\r\nAn enumeration of window events.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||<style=\"color: #808080;\">SDL_WINDOWEVENT_NONE||<style=\"color: #808080;\">(never used)||\r\n||SDL_WINDOWEVENT_SHOWN||window has been shown||\r\n||SDL_WINDOWEVENT_HIDDEN||window has been hidden||\r\n||SDL_WINDOWEVENT_EXPOSED||window has been exposed and should be redrawn||\r\n||SDL_WINDOWEVENT_MOVED||window has been moved to data1, data2||\r\n||SDL_WINDOWEVENT_RESIZED||window has been resized to data1xdata2; this event is always preceded by SDL_WINDOWEVENT_SIZE_CHANGED||\r\n||SDL_WINDOWEVENT_SIZE_CHANGED||window size has changed, either as a result of an API call or through the system or user changing the window size; this event is followed by SDL_WINDOWEVENT_RESIZED if the size was changed by an external event, i.e. the user or the window manager||\r\n||SDL_WINDOWEVENT_MINIMIZED||window has been minimized||\r\n||SDL_WINDOWEVENT_MAXIMIZED||window has been maximized||\r\n||SDL_WINDOWEVENT_RESTORED||window has been restored to normal size and position||\r\n||SDL_WINDOWEVENT_ENTER||window has gained mouse focus||\r\n||SDL_WINDOWEVENT_LEAVE||window has lost mouse focus||\r\n||SDL_WINDOWEVENT_FOCUS_GAINED||window has gained keyboard focus||\r\n||SDL_WINDOWEVENT_FOCUS_LOST||window has lost keyboard focus||\r\n||SDL_WINDOWEVENT_CLOSE||the window manager requests that the window be closed||\r\n||SDL_WINDOWEVENT_TAKE_FOCUS||window is being offered a focus (should [[SDL_SetWindowInputFocus]]() on itself or a subwindow, or ignore) (>= SDL 2.0.5)||\r\n||SDL_WINDOWEVENT_HIT_TEST||window had a hit test that wasn't SDL_HITTEST_NORMAL (>= SDL 2.0.5)||\r\n\r\n== Code Examples ==\r\n<<Include(<SDL_WindowEvent>, , , from=\"##Example1 Start\", to=\"##End\")>>\r\n\r\n{{{#!highlight cpp\r\n#include <stdlib.h>\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char *argv[])  {\r\n  int width = 640;\r\n  int height = 480;\r\n\r\n  if (SDL_Init(SDL_INIT_VIDEO) != 0)  {\r\n    return 1;\r\n  }\r\n  atexit(SDL_Quit);\r\n\r\n  SDL_Window* window = SDL_CreateWindow(\r\n    \"Example\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,\r\n    width, height, SDL_WINDOW_RESIZABLE\r\n  );\r\n  Uint32 windowID = SDL_GetWindowID(window);\r\n\r\n  while (1)  {\r\n    SDL_Event event;\r\n    while (SDL_PollEvent(&event))  {\r\n      switch (event.type)  {\r\n\r\n        case SDL_WINDOWEVENT:  {\r\n          if (event.window.windowID == windowID)  {\r\n            switch (event.window.event)  {\r\n\r\n              case SDL_WINDOWEVENT_SIZE_CHANGED:  {\r\n                width = event.window.data1;\r\n                height = event.window.data2;\r\n                break;\r\n              }\r\n\r\n              case SDL_WINDOWEVENT_CLOSE:  {\r\n                event.type = SDL_QUIT;\r\n                SDL_PushEvent(&event);\r\n                break;\r\n              }\r\n\r\n            }\r\n          }\r\n          break;\r\n        }\r\n\r\n        case SDL_QUIT:  {\r\n          return 0;\r\n        }\r\n\r\n        /* ... */\r\n\r\n      }\r\n    }\r\n\r\n    /* ... */\r\n\r\n    SDL_Delay(1);\r\n  }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Structures ==\r\n .[[SDL_WindowEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowFromID]]\r\n .[[SDL_GetWindowID]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_WindowFlags",
      "Uri": "https://wiki.libsdl.org/SDL_WindowFlags",
      "Categories": [
        "CategoryEnum",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:02:50.2309565-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_WindowFlags =\r\nAn enumeration of window states.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_WINDOW_FULLSCREEN||fullscreen window||\r\n||SDL_WINDOW_FULLSCREEN_DESKTOP||fullscreen window at the current desktop resolution||\r\n||SDL_WINDOW_OPENGL||window usable with OpenGL context||\r\n||SDL_WINDOW_VULKAN||window usable with a Vulkan instance||\r\n||SDL_WINDOW_SHOWN||window is visible||\r\n||SDL_WINDOW_HIDDEN||window is not visible||\r\n||SDL_WINDOW_BORDERLESS||no window decoration||\r\n||SDL_WINDOW_RESIZABLE||window can be resized||\r\n||SDL_WINDOW_MINIMIZED||window is minimized||\r\n||SDL_WINDOW_MAXIMIZED||window is maximized||\r\n||SDL_WINDOW_INPUT_GRABBED||window has grabbed input focus||\r\n||SDL_WINDOW_INPUT_FOCUS||window has input focus||\r\n||SDL_WINDOW_MOUSE_FOCUS||window has mouse focus||\r\n||SDL_WINDOW_FOREIGN||window not created by SDL||\r\n||SDL_WINDOW_ALLOW_HIGHDPI||window should be created in high-DPI mode if supported (>= SDL 2.0.1)||\r\n||SDL_WINDOW_MOUSE_CAPTURE||window has mouse captured (unrelated to INPUT_GRABBED, >= SDL 2.0.4)||\r\n||SDL_WINDOW_ALWAYS_ON_TOP|| window should always be above others (X11 only, >= SDL 2.0.5)||\r\n||SDL_WINDOW_SKIP_TASKBAR||window should not be added to the taskbar (X11 only, >= SDL 2.0.5)||\r\n||SDL_WINDOW_UTILITY||window should be treated as a utility window (X11 only, >= SDL 2.0.5)||\r\n||SDL_WINDOW_TOOLTIP||window should be treated as a tooltip (X11 only, >= SDL 2.0.5)||\r\n||SDL_WINDOW_POPUP_MENU||window should be treated as a popup menu (X11 only, >= SDL 2.0.5)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nUint32 flags = SDL_WINDOW_OPENGL | SDL_WINDOW_FULLSCREEN;\r\nSDL_Window * window = SDL_CreateWindow(\r\n    /* ... */\r\n    flags\r\n);\r\n}}}\r\n\r\n== Remarks ==\r\nThe SDL_WINDOW_OPENGL flag prepares your window for use with OpenGL, but you will still need to create an OpenGL context using [[SDL_GL_CreateContext]]() after window creation, before calling any OpenGL functions.\r\n\r\nOn Apple's OS X you '''must''' set the NSHighResolutionCapable Info.plist property to YES, otherwise you will not receive a High DPI OpenGL canvas.\r\n\r\n== Version ==\r\nThis enumeration is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateWindow]]\r\n .[[SDL_GetWindowFlags]]\r\n .[[SDL_HideWindow]]\r\n .[[SDL_MaximizeWindow]]\r\n .[[SDL_MinimizeWindow]]\r\n .[[SDL_SetWindowFullscreen]]\r\n .[[SDL_SetWindowGrab]]\r\n .[[SDL_ShowWindow]]\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_bool",
      "Uri": "https://wiki.libsdl.org/SDL_bool",
      "Categories": [
        "CategoryEnum",
        "CategoryStandard"
      ],
      "LastUpdate": "2021-01-16T14:02:50.8994355-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_bool =\r\nAn enumeration of boolean values.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Values ==\r\n||SDL_FALSE||value which is equal to 0 or ''false''||\r\n||SDL_TRUE||value which is equal to 1 or ''true''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nEvery function, structure, class etc. will work with SDL_bool.\r\n\r\n----\r\n[[CategoryEnum]], [[CategoryStandard]]\r\n"
    },
    {
      "Name": "SDL_AudioCVT",
      "Uri": "https://wiki.libsdl.org/SDL_AudioCVT",
      "Categories": [
        "CategoryStruct",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:02:51.6601955-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AudioCVT =\r\nA structure that contains audio data conversion information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||int||'''needed'''||set to 1 if conversion possible||\r\n||[[SDL_AudioFormat]]||'''src_format'''||source audio format||\r\n||[[SDL_AudioFormat]]||'''dst_format'''||target audio format||\r\n||double||'''rate_incr'''||rate conversion increment||\r\n||Uint8*||'''buf'''||the buffer to hold entire audio data; see [[#buf|Remarks]] for details||\r\n||int||'''len'''||length of original audio buffer; see [[#len|Remarks]] for details||\r\n||int||'''len_cvt'''||length of converted audio buffer||\r\n||int||'''len_mult'''||'''buf''' must be len*len_mult big; see [[#len_mult|Remarks]] for details||\r\n||double||'''len_ratio'''||given '''len''', final size is len*len_ratio; see [[#len_ratio|Remarks]] for details||\r\n||<rowstyle=\"color: #808080;\">SDL_Audio``Filter[10]||'''filters'''||filter list (internal use)||\r\n||<rowstyle=\"color: #808080;\">int||'''filter_index'''||current audio conversion function (internal use)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Change 1024 stereo sample frames at 48000Hz from float32 to int16.\r\nSDL_AudioCVT cvt;\r\nSDL_BuildAudioCVT(&cvt, AUDIO_F32, 2, 48000, AUDIO_S16, 2, 48000);\r\nSDL_assert(cvt.needed); // obviously, this one is always needed.\r\ncvt.len = 1024 * 2 * 4;  // 1024 stereo float32 sample frames.\r\ncvt.buf = (Uint8 *) SDL_malloc(cvt.len * cvt.len_mult);\r\n// read your float32 data into cvt.buf here.\r\nSDL_ConvertAudio(&cvt);\r\n// cvt.buf has cvt.len_cvt bytes of converted data now.\r\n}}}\r\n\r\n== Remarks ==\r\nThe [[SDL_AudioCVT]] structure is used to convert audio data between different formats. An [[SDL_AudioCVT]] structure is initialized with the [[SDL_BuildAudioCVT]]() function, while the actual conversion is done by the [[SDL_ConvertAudio]]() function, once the application has set up appropriately-sized buffers between these two function calls.\r\n\r\n<<Anchor(buf)>>'''buf''' points to the audio data that will be used in the conversion. It is both the source and the destination, which means the converted audio data overwrites the original data. It also means that the converted data may be larger than the original data (if you were converting from 8-bit to 16-bit, for instance), so you must ensure '''buf''' is large enough for any stage of the conversion, regardless of the final converted data's size. See '''len_mult''' below for more info.\r\n\r\n<<Anchor(len)>>'''len''' is the length of the original audio data in bytes.\r\n\r\n<<Anchor(len_mult)>>'''len_mult''' is the length multiplier for determining the size of the converted data. The audio buffer may need to be larger than either the original data or the converted data.. The allocated size of '''buf''' should be '''len'''*'''len_mult'''.\r\n\r\n<<Anchor(len_ratio)>>'''len_ratio''' is the length ratio of the converted data to the original data. When you have finished converting your audio data, you need to know how much of your audio buffer is valid. '''len'''*'''len_ratio''' is the size of the converted audio data in bytes. This is very similar to '''len_mult''', however when the converted audio data is shorter than the original, '''len_mult''' would be 1. '''len_ratio''', on the other hand, would be a fractional number between 0 and 1.\r\n\r\n== Related Functions ==\r\n .[[SDL_BuildAudioCVT]]\r\n .[[SDL_ConvertAudio]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_AudioDeviceEvent",
      "Uri": "https://wiki.libsdl.org/SDL_AudioDeviceEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:02:57.3077041-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_AudioDeviceEvent =\r\nA structure that contains Audio device event information.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_AUDIODEVICEADDED, or SDL_AUDIODEVICEREMOVED||\r\n||Uint32||'''timestamp'''||the timestamp of the event||\r\n||Uint32||'''which'''||the audio device index for the SDL_AUDIODEVICEADDED event (valid until next [[SDL_GetNumAudioDevices]]() call), SDL_AudioDeviceID for the SDL_AUDIODEVICEREMOVED event||\r\n||Uint8||'''iscapture'''||zero if an audio output device, non-zero if an audio capture device||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis structure is available since SDL 2.0.4.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n##Remove this section if empty\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n##Remove this section if empty\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumAudioDevices]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_AudioSpec",
      "Uri": "https://wiki.libsdl.org/SDL_AudioSpec",
      "Categories": [
        "CategoryStruct",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:02:58.0046723-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AudioSpec =\r\nA structure that contains the audio output format. It also contains a callback that is called when the audio device needs more data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||int||'''freq'''||DSP frequency (samples per second); see [[#Remarks|Remarks]] for details||\r\n||[[SDL_AudioFormat]]||'''format'''||audio data format; see [[#Remarks|Remarks]] for details||\r\n||Uint8||'''channels'''||number of separate sound channels: see [[#Remarks|Remarks]] for details||\r\n||Uint8||'''silence'''||audio buffer silence value (calculated)||\r\n||Uint16||'''samples'''||audio buffer size in samples (power of 2); see [[#Remarks|Remarks]] for details||\r\n||Uint32||'''size'''||audio buffer size in bytes (calculated)||\r\n||SDL_!AudioCallback||'''callback'''||the function to call when the audio device needs more data; see [[#callback|Remarks]] for details||\r\n||void*||'''userdata'''||a pointer that is passed to '''callback''' (otherwise ignored by SDL)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_AudioSpec want, have;\r\nSDL_AudioDeviceID dev;\r\n\r\nSDL_memset(&want, 0, sizeof(want)); /* or SDL_zero(want) */\r\nwant.freq = 48000;\r\nwant.format = AUDIO_F32;\r\nwant.channels = 2;\r\nwant.samples = 4096;\r\nwant.callback = MyAudioCallback;  // you wrote this function elsewhere.\r\ndev = SDL_OpenAudioDevice(NULL, 0, &want, &have, SDL_AUDIO_ALLOW_FORMAT_CHANGE);\r\n}}}\r\n\r\n== Remarks ==\r\nThis structure is used by [[SDL_OpenAudioDevice]]() and [[SDL_LoadWAV]](). While all fields are used by [[SDL_OpenAudioDevice]](), only '''freq''', '''format''', '''channels''', and '''samples''' are used by [[SDL_LoadWAV]]().\r\n\r\n'''freq''' specifies the number of sample frames sent to the sound device per second. The Nyquist Theorem states that the audio sampling frequency must be exactly twice the highest frequency represented in the audio. Humans can hear up to slightly under 20kHz, declining to 16kHz or lower as we age. Standard CD quality audio uses 44100. DVDs and the [[https://opus-codec.org/|Opus audio codec]] use 48000. Values higher than 48000 generally should not be used for playback purposes because they use more memory, use more CPU, and can cause other problems as explained in [[https://people.xiph.org/~xiphmont/demo/neil-young.html|this blog post by Chris Montgomery of Xiph]].\r\n\r\n'''format''' specifies the size and type of each sample element and may be one of the following:\r\n<<Include(SDL_AudioFormat, , , from=\"=== Audio Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\nSee [[SDL_AudioFormat]] for more info.\r\n\r\n'''channels''' specifies the number of output channels. As of SDL 2.0, supported values are 1 (mono), 2 (stereo), 4 (quad), and 6 (5.1).\r\n\r\n'''samples''' specifies a unit of audio data.  When used with [[SDL_OpenAudioDevice]]() this refers to the size of the audio buffer in sample frames. A sample frame is a chunk of audio data of the size specified in '''format''' multiplied by the number of channels. When the [[SDL_AudioSpec]] is used with [[SDL_LoadWAV]]() '''samples''' is set to 4096. This field's value must be a power of two.\r\n\r\nThe values '''silence''' and '''size''' are calculated by [[SDL_OpenAudioDevice]]().\r\n\r\nChannel data is interleaved. Stereo samples are stored in left/right ordering. Quad is stored in front-left/front-right/rear-left/rear-right order. 5.1 is stored in front-left/front-right/center/low-freq/rear-left/rear-right ordering (\"low-freq\" is the \".1\" speaker).\r\n\r\n<<Anchor(callback)>>\r\nThe function prototype for '''callback''' is:\r\n{{{#!highlight cpp\r\nvoid SDL_AudioCallback(void*  userdata,\r\n                       Uint8* stream,\r\n                       int    len)\r\n}}}\r\n . where its parameters are:\r\n ||`userdata`||an application-specific parameter saved in the [[SDL_AudioSpec]] structure's '''userdata''' field||\r\n ||`stream`||a pointer to the audio data buffer filled in by SDL_!AudioCallback()||\r\n ||`len`||the length of that buffer in bytes||\r\n\r\nOnce the callback returns, the buffer will no longer be valid.\r\nStereo samples are stored in a LRLRLR ordering.\r\n\r\nThe callback ''must'' completely initialize the buffer; as of SDL 2.0, this buffer is not initialized before the callback is called. If there is nothing to play, the callback should fill the buffer with silence.\r\n\r\nWith SDL >= 2.0.4 you can choose to avoid callbacks and use [[SDL_QueueAudio]]() instead, if you like. Just open your audio device with a NULL callback.\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadWAV]]\r\n .[[SDL_LoadWAV_RW]]\r\n .[[SDL_OpenAudioDevice]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_AudioStream",
      "Uri": "https://wiki.libsdl.org/SDL_AudioStream",
      "Categories": [
        "CategoryStruct",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:02:58.8501519-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AudioStream =\r\nAn opaque structure that buffers, converts, resamples, and generally streams audio data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Remarks ==\r\nThe [[SDL_AudioStream]] structure is used to convert audio data between different formats in arbitrarily-sized blocks. It is meant to be a replacement for the [[SDL_AudioCVT]]-related interfaces.\r\n\r\nA tutorial on using audio stream is at [[Tutorials/AudioStream]].\r\n\r\n(this page should be fleshed out more, too.)\r\n\r\n== Related Functions ==\r\n .[[SDL_NewAudioStream]]\r\n .[[SDL_AudioStreamPut]]\r\n .[[SDL_AudioStreamAvailable]]\r\n .[[SDL_AudioStreamGet]]\r\n .[[SDL_AudioStreamFlush]]\r\n .[[SDL_AudioStreamClear]]\r\n .[[SDL_FreeAudioStream]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_Color",
      "Uri": "https://wiki.libsdl.org/SDL_Color",
      "Categories": [
        "CategoryStruct",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:02:59.6593195-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Color =\r\nA structure that represents a color.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint8||'''r'''||the red component in the range 0-255||\r\n||Uint8||'''g'''||the green component in the range 0-255||\r\n||Uint8||'''b'''||the blue component in the range 0-255||\r\n||Uint8||'''a'''||the alpha component in the range 0-255||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_Color]] and SDL_Colour are interchangeable.\r\n\r\nIf you have RGB color values you would use decimal values in this struct.\r\n ''Example'': orange = 255,165,0 so set r=255, g=165, b=0, a=255.\r\nIf you have HTML color codes you would use hexidecimal values in this struct.\r\n ''Example'': orange = #FFA500 so set r=0xFF, g=0xA5, b=0x00, a=0xFF.\r\n\r\n[[SDL_Color]] describes a color in a format independent way. You can convert an [[SDL_Color]] to a pixel value for a certain pixel format using [[SDL_MapRGB]]().\r\n\r\n== Related Structures ==\r\n .[[SDL_Palette]]\r\n\r\n== Related Functions ==\r\n .[[SDL_SetPaletteColors]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_ControllerAxisEvent",
      "Uri": "https://wiki.libsdl.org/SDL_ControllerAxisEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:03:00.2993791-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_ControllerAxisEvent =\r\nA structure that contains game controller axis motion event information.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_ CONTROLLERAXISMOTION||\r\n||Uint32||'''timestamp'''||the timestamp of the event||\r\n||SDL_JoystickID||'''which'''||the joystick instance id||\r\n||Uint8||'''axis'''||the controller axis ([[SDL_GameControllerAxis]])||\r\n||Sint16||'''value'''||the axis value (range: -32768 to 32767)||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe directions \"down\" and \"right\" have positive values here.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerEventState]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_ControllerButtonEvent",
      "Uri": "https://wiki.libsdl.org/SDL_ControllerButtonEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:03:00.9716243-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_ControllerButtonEvent =\r\nA structure that contains game controller button event information.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_CONTROLLERBUTTONDOWN or SDL_CONTROLLERBUTTONUP||\r\n||Uint32||'''timestamp'''||the timestamp of the event||\r\n||SDL_JoystickID||'''which'''||the joystick instance id||\r\n||Uint8||'''button'''||the controller button ([[SDL_GameControllerButton]])||\r\n||Uint8||'''state'''||SDL_PRESSED or SDL_RELEASED||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerEventState]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_ControllerDeviceEvent",
      "Uri": "https://wiki.libsdl.org/SDL_ControllerDeviceEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:03:07.0646516-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_ControllerDeviceEvent =\r\nA structure that contains controller device event information.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_CONTROLLERDEVICEADDED, SDL_CONTROLLERDEVICEREMOVED or SDL_CONTROLLERDEVICEREMAPPED||\r\n||Uint32||'''timestamp'''||the timestamp of the event||\r\n||Sint32||'''which'''||the joystick device index for the SDL_CONTROLLERDEVICEADDED event or instance id for the SDL_CONTROLLERDEVICEREMOVED or SDL_CONTROLLERDEVICEREMAPPED event||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerEventState]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_DisplayMode",
      "Uri": "https://wiki.libsdl.org/SDL_DisplayMode",
      "Categories": [
        "CategoryStruct",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:03:48.394218-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_DisplayMode =\r\nA structure that contains the description of a display mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''format'''||one of the [[SDL_PixelFormatEnum]] values; see [[#Remarks|Remarks]] for details||\r\n||int||'''w'''||width, in screen coordinates||\r\n||int||'''h'''||height, in screen coordinates||\r\n||int||'''refresh_rate'''||refresh rate (in Hz), or 0 for unspecified ||\r\n||void*||'''driverdata'''||driver-specific data, initialize to 0||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n    static int display_in_use = 0; /* Only using first display */\r\n\r\n    int i, display_mode_count;\r\n    SDL_DisplayMode mode;\r\n    Uint32 f;\r\n\r\n    SDL_Log(\"SDL_GetNumVideoDisplays(): %i\", SDL_GetNumVideoDisplays());\r\n\r\n    display_mode_count = SDL_GetNumDisplayModes(display_in_use);\r\n    if (display_mode_count < 1) {\r\n        SDL_Log(\"SDL_GetNumDisplayModes failed: %s\", SDL_GetError());\r\n        return 1;\r\n    }\r\n    SDL_Log(\"SDL_GetNumDisplayModes: %i\", display_mode_count);\r\n\r\n    for (i = 0; i < display_mode_count; ++i) {\r\n        if (SDL_GetDisplayMode(display_in_use, i, &mode) != 0) {\r\n            SDL_Log(\"SDL_GetDisplayMode failed: %s\", SDL_GetError());\r\n            return 1;\r\n        }\r\n        f = mode.format;\r\n\r\n        SDL_Log(\"Mode %i\\tbpp %i\\t%s\\t%i x %i\", i,\r\n        SDL_BITSPERPIXEL(f), SDL_GetPixelFormatName(f), mode.w, mode.h);\r\n    }\r\n\r\n}}}\r\n\r\n== Remarks ==\r\n'''format''' may be one of the following:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"=== Pixel Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_GetClosestDisplayMode]]\r\n .[[SDL_GetCurrentDisplayMode]]\r\n .[[SDL_GetDesktopDisplayMode]]\r\n .[[SDL_GetDisplayMode]]\r\n .[[SDL_GetNumDisplayModes]]\r\n .[[SDL_GetWindowDisplayMode]]\r\n .[[SDL_SetWindowDisplayMode]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_DollarGestureEvent",
      "Uri": "https://wiki.libsdl.org/SDL_DollarGestureEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:03:49.1464504-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_DollarGestureEvent =\r\nA structure that contains complex gesture event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_DOLLARGESTURE or SDL_DOLLARRECORD||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||SDL_TouchID||'''touchId'''||the touch device id||\r\n||SDL_GestureID||'''gestureId'''||the unique id of the closest gesture to the performed stroke||\r\n||Uint32||'''numFingers'''||the number of fingers used to draw the stroke||\r\n||float||'''error'''||the difference between the gesture template and the actual performed gesture (lower error is a better match)||\r\n||float||'''x'''||the normalized center of gesture||\r\n||float||'''y'''||the normalized center of gesture||\r\n\r\n/* <<Color2(col=green,text=\"Worth changing touchId and gestureId to touchID and gestureID for consistency?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_DollarGestureEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_DOLLARGESTURE is reported.  You would access it through the event's `dgesture` field.\r\n\r\n'''x''' and '''y''' are in range 0 to 1.\r\n\r\nFor SDL_DOLLARRECORD only '''touchId''' and '''gestureId''' are valid.\r\n\r\nFor more information see: [[http://hg.libsdl.org/SDL/file/default/docs/README-gesture.md|README-gesture.md]]\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_MultiGestureEvent]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_DropEvent",
      "Uri": "https://wiki.libsdl.org/SDL_DropEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:03:49.8127434-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_DropEvent =\r\nA structure that contains an event used to request a file open by the system.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||the event type; SDL_DROPFILE, SDL_DROPTEXT, SDL_DROPBEGIN, or SDL_DROPCOMPLETE||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||char*||'''file'''||the file name, which should be freed with SDL_free(), is NULL on BEGIN/COMPLETE||\r\n||Uint32||'''windowID'''||the window that was dropped on, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Example program:\r\n// SDL_DropEvent usage\r\n\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char *argv[]) {\r\n    SDL_bool done;\r\n    SDL_Window *window;\r\n    SDL_Event event;                        // Declare event handle\r\n    char* dropped_filedir;                  // Pointer for directory of dropped file\r\n\r\n    SDL_Init(SDL_INIT_VIDEO);               // SDL2 initialization\r\n\r\n    window = SDL_CreateWindow(  // Create a window\r\n        \"SDL_DropEvent usage, please drop the file on window\",\r\n        SDL_WINDOWPOS_CENTERED,\r\n        SDL_WINDOWPOS_CENTERED,\r\n        640,\r\n        480,\r\n        SDL_WINDOW_OPENGL\r\n    );\r\n\r\n    // Check that the window was successfully made\r\n    if (window == NULL) {\r\n        // In the event that the window could not be made...\r\n        SDL_Log(\"Could not create window: %s\", SDL_GetError());\r\n        SDL_Quit();\r\n        return 1;\r\n    }\r\n\r\n    SDL_EventState(SDL_DROPFILE, SDL_ENABLE);\r\n\r\n    done = SDL_FALSE;\r\n    while (!done) {                         // Program loop\r\n        while (!done && SDL_PollEvent(&event)) {\r\n            switch (event.type) {\r\n                case (SDL_QUIT): {          // In case of exit\r\n                    done = SDL_TRUE;\r\n                    break;\r\n                }\r\n\r\n                case (SDL_DROPFILE): {      // In case if dropped file\r\n                    dropped_filedir = event.drop.file;\r\n                    // Shows directory of dropped file\r\n                    SDL_ShowSimpleMessageBox(\r\n                        SDL_MESSAGEBOX_INFORMATION,\r\n                        \"File dropped on window\",\r\n                        dropped_filedir,\r\n                        window\r\n                    );\r\n                    SDL_free(dropped_filedir);    // Free dropped_filedir memory\r\n                    break;\r\n               }\r\n            }\r\n        }\r\n        SDL_Delay(0);\r\n    }\r\n\r\n    SDL_DestroyWindow(window);        // Close and destroy the window\r\n\r\n    SDL_Quit();                       // Clean up\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_DropEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_DROPFILE, SDL_DROPTEXT, SDL_DROPBEGIN, or SDL_DROPCOMPLETE is reported.  You would access it through the event's `drop` field.\r\n\r\nThese events are enabled by default.  You can disable it with [[SDL_EventState]]().\r\n\r\nIf these events are enabled you must free the filename in the events using SDL_free().\r\n\r\nSDL_DROPTEXT, SDL_DROPBEGIN, and SDL_DROPCOMPLETE are available since SDL 2.0.5.\r\n\r\n=== Mac OS X ===\r\nTo enable drag&drop on your SDL app, you must ''also'' edit your info.plist file. Add/Modify '''Document Types.''' For example, to enable all document types, add the \"public.data\" mime type as a document type.\r\n\r\n\r\n== Version ==\r\nThis structure is available since SDL 2.0.0.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n== Related Functions ==\r\n .[[SDL_EventState]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_Event",
      "Uri": "https://wiki.libsdl.org/SDL_Event",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:03:50.5264493-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_Event =\r\nA union that contains structures for the different event types.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||event type, shared with all events||\r\n||<rowstyle=\"color: #808080;\">SDL_!CommonEvent||'''common'''||common event data||\r\n||[[SDL_WindowEvent]]||'''window'''||window event data||\r\n||[[SDL_KeyboardEvent]]||'''key'''||keyboard event data||\r\n||[[SDL_TextEditingEvent]]||'''edit'''||text editing event data||\r\n||[[SDL_TextInputEvent]]||'''text'''||text input event data||\r\n||[[SDL_MouseMotionEvent]]||'''motion'''||mouse motion event data||\r\n||[[SDL_MouseButtonEvent]]||'''button'''||mouse button event data||\r\n||[[SDL_MouseWheelEvent]]||'''wheel'''||mouse wheel event data||\r\n||[[SDL_JoyAxisEvent]]||'''jaxis'''||joystick axis event data||\r\n||[[SDL_JoyBallEvent]]||'''jball'''||joystick ball event data||\r\n||[[SDL_JoyHatEvent]]||'''jhat'''||joystick hat event data||\r\n||[[SDL_JoyButtonEvent]]||'''jbutton'''||joystick button event data||\r\n||[[SDL_JoyDeviceEvent]]||'''jdevice'''||joystick device event data||\r\n||[[SDL_ControllerAxisEvent]]||'''caxis'''||game controller axis event data||\r\n||[[SDL_ControllerButtonEvent]]||'''cbutton'''||game controller button event data||\r\n||[[SDL_ControllerDeviceEvent]]||'''cdevice'''||game controller device event data||\r\n||[[SDL_AudioDeviceEvent]]||'''adevice'''||audio device event data (>= SDL 2.0.4)||\r\n||[[SDL_QuitEvent]]||'''quit'''||quit request event data||\r\n||[[SDL_UserEvent]]||'''user'''||custom event data||\r\n||[[SDL_SysWMEvent]]||'''syswm'''||system dependent window event data||\r\n||[[SDL_TouchFingerEvent]]||'''tfinger'''||touch finger event data||\r\n||[[SDL_MultiGestureEvent]]||'''mgesture'''||multi finger gesture data||\r\n||[[SDL_DollarGestureEvent]]||'''dgesture'''||multi finger gesture data||\r\n||[[SDL_DropEvent]]||'''drop'''||drag and drop event data||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe [[SDL_Event]] structure is the core of all event handling in SDL. [[SDL_Event]] is a union of all event structures used in SDL.  Using it is a simple matter of knowing which event type corresponds to which union member. The [[#table|table]] below lists these relationships.\r\n\r\nThe [[SDL_Event]] structure has two uses:\r\n * [[#reading|Reading events from the event queue]]\r\n * [[#push|Placing events on the event queue]]\r\n\r\n<<Anchor(reading)>>\r\n~+'''Reading events from the event queue'''+~\r\n\r\nReading events from the event queue is done with either [[SDL_PollEvent]]() or [[SDL_PeepEvents]](). We'll use [[SDL_PollEvent]]() and step through an example.\r\n\r\nFirst off, we create an empty [[SDL_Event]] structure.\r\n{{{#!highlight cpp\r\nSDL_Event test_event;\r\n}}}\r\n[[SDL_PollEvent]]() removes the next event from the event queue.  If there are no events on the queue it returns 0, otherwise it returns 1. We use a {{{while}}} loop to process each event in turn.\r\n{{{#!highlight cpp\r\nwhile (SDL_PollEvent(&test_event)) {\r\n}}}\r\nThe [[SDL_PollEvent]]() function takes a pointer to an [[SDL_Event]] structure that is to be filled with event information. We know that if [[SDL_PollEvent]]() removes an event from the queue then the event information will be placed in our test_event structure, but we also know that the type of event will be placed in the '''type''' member of test_event. So to handle each event type separately we use a {{{switch}}} statement.\r\n{{{#!highlight cpp\r\n  switch (test_event.type) {\r\n}}}\r\nWe need to know what kind of events we're looking for and the event types of those events. So let's assume we want to detect where the user is moving the mouse pointer within our application. We look through our event types and notice that SDL_MOUSEMOTION is, more than likely, the event we're looking for. Looking at the [[#table|table]] below tells us that SDL_MOUSEMOTION events are handled within the [[SDL_MouseMotionEvent]] structure which is the '''motion''' member of [[SDL_Event]]. We can check for the SDL_MOUSEMOTION event '''type''' within our {{{switch}}} statement like so:\r\n{{{#!highlight cpp\r\n    case SDL_MOUSEMOTION:\r\n}}}\r\nAll we need to do now is read the information out of the '''motion''' member of test_event.\r\n{{{#!highlight cpp\r\n      printf(\"We got a motion event.\\n\");\r\n      printf(\"Current mouse position is: (%d, %d)\\n\", test_event.motion.x, test_event.motion.y);\r\n      break;\r\n    default:\r\n      printf(\"Unhandled Event!\\n\");\r\n      break;\r\n  }\r\n}\r\nprintf(\"Event queue empty.\\n\");\r\n}}}\r\n\r\n\r\n<<Anchor(push)>>\r\n~+'''Placing events on the event queue'''+~\r\n\r\nIt is also possible to push events onto the event queue and so use it as a two-way communication path. Both [[SDL_PushEvent]]() and [[SDL_PeepEvents]]() allow you to place events onto the event queue. This is usually used to place a SDL_USEREVENT on the event queue, however you could use it to post fake input events if you wished. Creating your own events is a simple matter of choosing the event type you want, setting the '''type''' member and filling the appropriate member structure with information.\r\n{{{#!highlight cpp\r\nSDL_Event user_event;\r\n\r\nuser_event.type = SDL_USEREVENT;\r\nuser_event.user.code = 2;\r\nuser_event.user.data1 = NULL;\r\nuser_event.user.data2 = NULL;\r\nSDL_PushEvent(&user_event);\r\n}}}\r\n\r\n<<Anchor(table)>>\r\n~+'''Relationships between event types and union members'''+~\r\n||<bgcolor=\"#EDEDED\">''Event Type''||<bgcolor=\"#EDEDED\">''Event Structure''||<bgcolor=\"#EDEDED\">''SDL_Event Field''||\r\n||SDL_AUDIODEVICEADDED<<BR>>SDL_AUDIODEVICEREMOVED||[[SDL_AudioDeviceEvent]]||'''adevice'''||\r\n||SDL_CONTROLLERAXISMOTION||[[SDL_ControllerAxisEvent]]||'''caxis'''||\r\n||SDL_CONTROLLERBUTTONDOWN<<BR>>SDL_CONTROLLERBUTTONUP||[[SDL_ControllerButtonEvent]]||'''cbutton'''||\r\n||SDL_CONTROLLERDEVICEADDED<<BR>>SDL_CONTROLLERDEVICEREMOVED<<BR>>SDL_CONTROLLERDEVICEREMAPPED||[[SDL_ControllerDeviceEvent]]||'''cdevice'''||\r\n||SDL_DOLLARGESTURE<<BR>>SDL_DOLLARRECORD||[[SDL_DollarGestureEvent]]||'''dgesture'''||\r\n||SDL_DROPFILE<<BR>>SDL_DROPTEXT<<BR>>SDL_DROPBEGIN<<BR>>SDL_DROPCOMPLETE||[[SDL_DropEvent]]||'''drop'''||\r\n||SDL_FINGERMOTION<<BR>>SDL_FINGERDOWN<<BR>>SDL_FINGERUP||[[SDL_TouchFingerEvent]]||'''tfinger'''||\r\n||SDL_KEYDOWN<<BR>>SDL_KEYUP||[[SDL_KeyboardEvent]]||'''key'''||\r\n||SDL_JOYAXISMOTION||[[SDL_JoyAxisEvent]]||'''jaxis'''||\r\n||SDL_JOYBALLMOTION||[[SDL_JoyBallEvent]]||'''jball'''||\r\n||SDL_JOYHATMOTION||[[SDL_JoyHatEvent]]||'''jhat'''||\r\n||SDL_JOYBUTTONDOWN<<BR>>SDL_JOYBUTTONUP||[[SDL_JoyButtonEvent]]||'''jbutton'''||\r\n||SDL_JOYDEVICEADDED<<BR>>SDL_JOYDEVICEREMOVED||[[SDL_JoyDeviceEvent]]||'''jdevice'''||\r\n||SDL_MOUSEMOTION||[[SDL_MouseMotionEvent]]||'''motion'''||\r\n||SDL_MOUSEBUTTONDOWN<<BR>>SDL_MOUSEBUTTONUP||[[SDL_MouseButtonEvent]]||'''button'''||\r\n||SDL_MOUSEWHEEL||[[SDL_MouseWheelEvent]]||'''wheel'''||\r\n||SDL_MULTIGESTURE||[[SDL_MultiGestureEvent]]||'''mgesture'''||\r\n||SDL_QUIT||[[SDL_QuitEvent]]||'''quit'''||\r\n||SDL_SYSWMEVENT||[[SDL_SysWMEvent]]||'''syswm'''||\r\n||SDL_TEXTEDITING||[[SDL_TextEditingEvent]]||'''edit'''||\r\n||SDL_TEXTINPUT||[[SDL_TextInputEvent]]||'''text'''||\r\n||SDL_USEREVENT||[[SDL_UserEvent]]||'''user'''||\r\n||SDL_WINDOWEVENT||[[SDL_WindowEvent]]||'''window'''||\r\n||Other events||SDL_!CommonEvent||none, use [[SDL_EventType|.type]]||\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_AudioDeviceEvent]]\r\n .[[SDL_ControllerAxisEvent]]\r\n .[[SDL_ControllerButtonEvent]]\r\n .[[SDL_ControllerDeviceEvent]]\r\n .[[SDL_DollarGestureEvent]]\r\n .[[SDL_DropEvent]]\r\n .[[SDL_JoyAxisEvent]]\r\n .[[SDL_JoyBallEvent]]\r\n .[[SDL_JoyButtonEvent]]\r\n .[[SDL_JoyDeviceEvent]]\r\n .[[SDL_JoyHatEvent]]\r\n .[[SDL_KeyboardEvent]]\r\n .[[SDL_MouseButtonEvent]]\r\n .[[SDL_MouseMotionEvent]]\r\n .[[SDL_MouseWheelEvent]]\r\n .[[SDL_MultiGestureEvent]]\r\n .[[SDL_QuitEvent]]\r\n .[[SDL_SysWMEvent]]\r\n .[[SDL_TextEditingEvent]]\r\n .[[SDL_TextInputEvent]]\r\n .[[SDL_TouchFingerEvent]]\r\n .[[SDL_UserEvent]]\r\n .[[SDL_WindowEvent]]\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_PeepEvents]]\r\n .[[SDL_PollEvent]]\r\n .[[SDL_PushEvent]]\r\n .[[SDL_WaitEvent]]\r\n .[[SDL_WaitEventTimeout]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_Finger",
      "Uri": "https://wiki.libsdl.org/SDL_Finger",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:03:51.3818587-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_Finger =\r\nA structure that contains touch information.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||SDL_FingerID||'''id'''||the finger id||\r\n||float||'''x'''||the x-axis location of the touch event, normalized (0...1)||\r\n||float||'''y'''||the y-axis location of the touch event, normalized (0...1)||\r\n||float||'''pressure'''||the quantity of pressure applied, normalized (0...1)||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis structure is available since SDL 2.0.0.\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_TouchFingerEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumTouchFingers]]\r\n .[[SDL_GetTouchFinger]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HapticCondition",
      "Uri": "https://wiki.libsdl.org/SDL_HapticCondition",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:03:57.0011398-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticCondition =\r\nA structure that contains a template for a condition effect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''Header''||\r\n||Uint16||'''type'''||one of the effects handled by this structure; see [[#type|Remarks]] for details||\r\n||<style=\"color: #808080;\">[[SDL_HapticDirection]]||<style=\"color: #808080;\">'''direction'''||<style=\"color: #808080;\">direction of the effect - not used at the moment; see [[#direction|Remarks]] for details||\r\n||||||<bgcolor=\"#EDEDED\">''Replay''||\r\n||Uint32||'''length'''||duration of the effect||\r\n||Uint16||'''delay'''||delay before starting the effect||\r\n||||||<bgcolor=\"#EDEDED\">''Trigger''||\r\n||Uint16||'''button'''||button that triggers the effect||\r\n||Uint16||'''interval'''||how soon it can be triggered again after button||\r\n||||||<bgcolor=\"#EDEDED\">''Condition''||\r\n||Uint16||'''right_sat'''||level when joystick is to the positive side; max 0xFFFF||\r\n||Uint16||'''left_sat'''||level when joystick is to the negative side; max 0xFFFF||\r\n||Sint16||'''right_coeff'''||how fast to increase the force towards the positive side||\r\n||Sint16||'''left_coeff'''||how fast to increase the force towards the negative side||\r\n||Uint16||'''deadband'''||size of the dead zone; max 0xFFFF: whole axis-range when 0-centered /* (units)? */ ||\r\n||Sint16||'''center'''||position of the dead zone||\r\n/* <<Color2(col=green,text=\"All of the Condition fields had a [3] that was left out. Should it be in?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(type)>>'''type''' may be one of the following:\r\n||SDL_HAPTIC_SPRING||effect based on axis position /* axes positions? */ ||\r\n||SDL_HAPTIC_DAMPER||effect based on axis velocity /* axes velocities? */ ||\r\n||SDL_HAPTIC_INERTIA||effect based on axis acceleration /* axes acceleration? */ ||\r\n||SDL_HAPTIC_FRICTION||effect based on axis movement /* axes movement/movements? */ ||\r\n\r\n<<Anchor(direction)>> '''direction''' is (currently) handled by condition internals instead of a direction member.  The condition effect specific members have three parameters. The first refers to the X axis, the second refers to the Y axis and the third refers to the Z axis. The right terms refer to the positive side of the axis and the left terms refer to the negative side of the axis. Please refer to the [[SDL_HapticDirection]] diagram for which side is positive and which is negative.\r\n\r\n== Related Structures ==\r\n .[[SDL_HapticDirection]]\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticConstant",
      "Uri": "https://wiki.libsdl.org/SDL_HapticConstant",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:03:57.7003913-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticConstant =\r\nA structure that contains a template for a constant effect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''Header''||\r\n||Uint16||'''type'''||SDL_HAPTIC_CONSTANT||\r\n||[[SDL_HapticDirection]]||'''direction'''||direction of the effect||\r\n||||||<bgcolor=\"#EDEDED\">''Replay''||\r\n||Uint32||'''length'''||duration of the effect||\r\n||Uint16||'''delay'''||delay before starting the effect||\r\n||||||<bgcolor=\"#EDEDED\">''Trigger''||\r\n||Uint16||'''button'''||button that triggers the effect||\r\n||Uint16||'''interval'''||how soon it can be triggered again after button||\r\n||||||<bgcolor=\"#EDEDED\">''Constant''||\r\n||Sint16||'''level'''||strength of the constant effect||\r\n||||||<bgcolor=\"#EDEDED\">''Envelope''||\r\n||Uint16||'''attack_length'''||duration of the attack||\r\n||Uint16||'''attack_level'''||level at the start of the attack||\r\n||Uint16||'''fade_length'''||duration of the fade||\r\n||Uint16||'''fade_level'''||level at the end of the fade||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis struct is exclusively for the SDL_HAPTIC_CONSTANT effect.\r\n\r\nA constant effect applies a constant force to the joystick in the specified direction.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticCustom",
      "Uri": "https://wiki.libsdl.org/SDL_HapticCustom",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:03:58.3941139-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticCustom =\r\nA structure that contains a template for the SDL_HAPTIC_CUSTOM (a custom) effect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''Header''||\r\n||Uint16||'''type'''||SDL_HAPTIC_CUSTOM||\r\n||[[SDL_HapticDirection]]||'''direction'''||direction of the effect (relative to the user)||\r\n||||||<bgcolor=\"#EDEDED\">''Replay''||\r\n||Uint32||'''length'''||duration of the effect||\r\n||Uint16||'''delay'''||delay before starting the effect||\r\n||||||<bgcolor=\"#EDEDED\">''Trigger''||\r\n||Uint16||'''button'''||button that triggers the effect||\r\n||Uint16||'''interval'''||how soon it can be triggered again after '''button'''||\r\n||||||<bgcolor=\"#EDEDED\">''Custom''||\r\n||Uint8||'''channels'''||axes to use, minimum of 1; see [[#Remarks|Remarks]] for details||\r\n||Uint16||'''period'''||sample periods||\r\n||Uint16||'''samples'''|| amount (number) of samples||\r\n||Uint16*||'''data'''||should contain '''channels'''*'''samples''' items; see [[#Remarks|Remarks]] for details||\r\n||||||<bgcolor=\"#EDEDED\">''Envelope''||\r\n||Uint16||'''attack_length'''||duration of the attack||\r\n||Uint16||'''attack_level'''||level at the start of the attack||\r\n||Uint16||'''fade_length'''||duration of the fade||\r\n||Uint16||'''fade_level'''||level at the end of the fade||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis struct is exclusively for the SDL_HAPTIC_CUSTOM effect.\r\n\r\nA custom force feedback effect is much like a periodic effect, where the application can define ''its'' exact shape. You will have to allocate the data yourself.\r\n/* <<Color2(col=green,text=\"I think this should be a new paragraph or moved down to connect to the next one.\")>> */ '''data''' should consist of '''channels''' * '''samples''' Uint16 samples. /* <<Color2(col=green,text=\"This is basically repeated above. Is there a better way to say this and still be correct and readable to programmers but also to people who speak English?\")>> */\r\n\r\nIf '''channels''' is 1, the effect is rotated using the defined direction. Otherwise it uses the samples in '''data''' for the different axes.\r\n\r\n== Related Structures ==\r\n .[[SDL_HapticDirection]]\r\n .[[SDL_HapticEffect]]\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticDirection",
      "Uri": "https://wiki.libsdl.org/SDL_HapticDirection",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:03:58.9896134-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticDirection =\r\nA structure that contains a haptic direction. /* <<Color2(col=green,text=\"Does this structure define individual directions or a set of directions used by a particular device?  Seems like you'd have to create an awful lot of these structures to make anything with any complexity.  Am I understanding this correctly?\")>> */\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint8||'''type'''||the type of encoding; see [[#type|Remarks]] for details||\r\n||Sint32||'''dir'''||the encoded direction; see [[#type|Remarks]] for details||\r\n/* <<Color2(col=green,text=\"There was a [3] attached to '''dir''' but I thought I remembered that we aren't including those details here.  Is that right or should I put it back in because it's important?\")>> */\r\n\r\n== Code Examples ==\r\nExample of force coming from the south with all encodings (force coming from the south means the user will have to pull the stick to counteract):\r\n{{{#!highlight cpp\r\nSDL_HapticDirection direction;\r\n\r\n// Cartesian directions\r\ndirection.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.\r\ndirection.dir[0] = 0; // X position\r\ndirection.dir[1] = 1; // Y position\r\n// Assuming the device has 2 axes, we don't need to specify third parameter.\r\n\r\n// Polar directions\r\ndirection.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.\r\ndirection.dir[0] = 18000; // Polar only uses first parameter\r\n\r\n// Spherical coordinates\r\ndirection.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding\r\ndirection.dir[0] = 9000; // Since we only have two axes we don't need more parameters.\r\n}}}\r\n\r\n== Remarks ==\r\nThis is the direction where the force comes from, instead of the direction in which the force is exerted.\r\n\r\nCardinal directions of the haptic device are relative to the positioning of the device. North is considered to be away from the user. South is toward the user, east is right, and west is left of the user.\r\n\r\nThe following diagram represents the cardinal directions:\r\n{{{\r\n               .--.\r\n               |__| .-------.\r\n               |=.| |.-----.|\r\n               |--| ||     ||\r\n               |  | |'-----'|\r\n               |__|~')_____('\r\n                [ COMPUTER ]\r\n\r\n\r\n                 North (0,-1)\r\n                      ^\r\n                      |\r\n                      |\r\n(-1,0) West <----[ HAPTIC ]----> East (1,0)\r\n                      |\r\n                      |\r\n                      v\r\n                 South (0,1)\r\n\r\n\r\n                 [ USER ]\r\n                   \\|||/\r\n                   (o o)\r\n             ---ooO-(_)-Ooo---\r\n}}}\r\n\r\n<<Anchor(type)>> /* <<Color2(col=green,text=\"The following paragraph was at the beginning in the header. Seemed to logically fit better here.\")>> */ <<BR>>\r\nDirections can be specified by:\r\n||SDL_HAPTIC_POLAR||Specified by polar coordinates||\r\n||SDL_HAPTIC_CARTESIAN||Specified by cartesian coordinates||\r\n||SDL_HAPTIC_SPHERICAL||Specified by spherical coordinates||\r\n\r\nIf '''type''' is SDL_HAPTIC_POLAR, direction is encoded by hundredths of a degree starting north and turning clockwise. SDL_HAPTIC_POLAR only uses the first '''dir''' parameter. The cardinal directions would be:\r\n||North|| 0 (0 degrees)||\r\n||East|| 9000 (90 degrees)||\r\n||South|| 18000 (180 degrees)||\r\n||West|| 27000 (270 degrees)||\r\n\r\nIf '''type''' is SDL_HAPTIC_CARTESIAN, direction is encoded by three positions (X axis, Y axis and Z axis (with 3 axes)). SDL_HAPTIC_CARTESIAN uses the first three '''dir''' parameters. The cardinal directions would be:\r\n||North|| 0,-1, 0 ||\r\n||East|| 1, 0, 0 ||\r\n||South|| 0, 1, 0 ||\r\n||West|| -1, 0, 0 ||\r\n The Z axis represents the height of the effect if supported, otherwise it's unused. In cartesian encoding (1, 2) would be the same as (2, 4), you can use any multiple you want, only the direction matters.\r\n\r\nIf '''type''' is SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations. The first two '''dir''' parameters are used. The '''dir''' parameters are as follows (all values are in hundredths of degrees):\r\n||Degrees from (1, 0) rotated towards (0, 1)||\r\n||Degrees towards (0, 0, 1) (device needs at least 3 axes)||\r\n\r\n== Related Structures ==\r\n .[[SDL_HapticPeriodic]]\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNumAxes]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticEffect",
      "Uri": "https://wiki.libsdl.org/SDL_HapticEffect",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:03:59.7288188-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticEffect =\r\nA union that contains the generic template for any haptic effect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint16||'''type'''||effect type; see [[SDL_HapticPeriodic]] for details||\r\n||[[SDL_HapticConstant]]||'''constant'''||constant effect; see [[#Remarks|Remarks]] for details||\r\n||[[SDL_HapticPeriodic]]||'''periodic'''||periodic effect; see [[#Remarks|Remarks]] for details||\r\n||[[SDL_HapticCondition]]||'''condition'''||condition effect; see [[#Remarks|Remarks]] for details||\r\n||[[SDL_HapticRamp]]||'''ramp'''||ramp effect; see [[#Remarks|Remarks]] for details||\r\n||[[SDL_HapticLeftRight]]||'''leftright'''||left/right effect; see [[#Remarks|Remarks]] for details||\r\n||[[SDL_HapticCustom]]||'''custom'''||custom effect; see [[#Remarks|Remarks]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nAll structures in this union contain the following common parts:\r\n\r\n||||||<bgcolor=\"#EDEDED\">''Replay (all effects except left-right have this)''||\r\n||Uint32||'''length'''||duration of effect (ms)||\r\n||Uint16||'''delay'''||delay before starting effect||\r\n||||||<bgcolor=\"#EDEDED\">''Trigger (all effects except left-right have this)''||\r\n||Uint16||'''button'''||button that triggers effect||\r\n||Uint16||'''interval'''||how soon before effect can be triggered again||\r\n||||||<bgcolor=\"#EDEDED\">''Envelope (all effects except condition effects and left-right have this)''||\r\n||Uint16||'''attack_length'''||duration of the attack (ms)||\r\n||Uint16||'''attack_level'''||level at the start of the attack||\r\n||Uint16||'''fade_length'''||duration of the fade out (ms)||\r\n||Uint16||'''fade_level'''||level at the end of the fade||\r\n\r\nAll values max at 32767 (0x7FFF).  Signed values can be negative.  Time values, unless specified otherwise, are in milliseconds.\r\n\r\nYou can pass SDL_HAPTIC_INFINITY to '''length''' instead of a 0-32767 value.  Neither '''delay''', '''interval''', '''attack_length''', nor '''fade_length''' support SDL_HAPTIC_INFINITY.\r\nThe SDL_HAPTIC_RAMP effect does not support a duration of SDL_HAPTIC_INFINITY.\r\nFade will also not be used since effect never ends.\r\n\r\n/* Ramp sentence combined into this paragraph, separate in header.  The last sentence about Fade (from line 698 version f3c34d321289 SDL_haptic.h) is awkward and potentially confusing.  How could it be revised to make it more clear? */\r\n\r\nButton triggers may not be supported on all devices.  It is advised not to use them if possible.  Buttons start at index 1 instead of index 0 like the joystick.\r\n/* Does this mean that the joystick itself is index 0 and the buttons are index >=1? */\r\n\r\nIf both '''attack_length''' and '''fade_level''' are 0 the '''envelope''' is not used, otherwise both values are used.\r\n\r\nHere is an example of a constant effect evolution in time:\r\n{{{\r\nStrength\r\n^\r\n|\r\n|    effect level -->  _________________\r\n|                     /                 \\\r\n|                    /                   \\\r\n|                   /                     \\\r\n|                  /                       \\\r\n| attack_level --> |                        \\\r\n|                  |                        |  <---  fade_level\r\n|\r\n+--------------------------------------------------> Time\r\n\r\n                   [--]                 [---]\r\n               attack_length          fade_length\r\n\r\n[------------------][-----------------------]\r\n       delay                 length\r\n}}}\r\n\r\nNote that either the '''attack_level''' or the '''fade_level''' may be above the actual effect level.\r\n\r\n/* Note that some minor edits to the verbatim text in the header have been made and not noted above. */\r\n\r\n== Related Structures ==\r\n .[[SDL_HapticCondition]]\r\n .[[SDL_HapticConstant]]\r\n .[[SDL_HapticCustom]]\r\n .[[SDL_HapticLeftRight]]\r\n .[[SDL_HapticPeriodic]]\r\n .[[SDL_HapticRamp]]\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticEffectSupported]]\r\n .[[SDL_HapticNewEffect]]\r\n .[[SDL_HapticUpdateEffect]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticLeftRight",
      "Uri": "https://wiki.libsdl.org/SDL_HapticLeftRight",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:04:00.3902926-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HapticLeftRight =\r\nA structure that contains a template for a left/right effect.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''Header''||\r\n||Uint16||'''type'''||SDL_HAPTIC_LEFTRIGHT||\r\n||||||<bgcolor=\"#EDEDED\">''Replay''||\r\n||Uint32||'''length'''||duration of the effect||\r\n||||||<bgcolor=\"#EDEDED\">''Rumble''||\r\n||Uint16||'''large_magnitude'''||control of the large controller motor||\r\n||Uint16||'''small_magnitude'''||control of the small controller motor||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis struct is exclusively for the SDL_HAPTIC_LEFTRIGHT effect.\r\n\r\nThe left/right effect is used to explicitly control the large and small motors, commonly found in modern game controllers. One motor is high frequency, the other is low frequency.\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_HapticEffect]]\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HapticPeriodic",
      "Uri": "https://wiki.libsdl.org/SDL_HapticPeriodic",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:04:06.1440286-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticPeriodic =\r\nA structure that contains a template for a periodic effect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''Header''||\r\n||Uint16||'''type'''||the shape of the waves; /* one of the effects handled by this structure */ see [[#type|Remarks]] for details||\r\n||[[SDL_HapticDirection]]||'''direction'''||direction of the effect (relative to the user)||\r\n||||||<bgcolor=\"#EDEDED\">''Replay''||\r\n||Uint32||'''length'''||duration of the effect /* (is this the same as # of cycles? always in ms?) */ ||\r\n||Uint16||'''delay'''||delay before starting the effect /* (ms?) */ ||\r\n||||||<bgcolor=\"#EDEDED\">''Trigger''||\r\n||Uint16||'''button'''||button that triggers the effect||\r\n||Uint16||'''interval'''||how soon it can be triggered again after '''button''' /* (ms?) (delay between individual waves or before the effect can be used again?) */ ||\r\n||||||<bgcolor=\"#EDEDED\">''Periodic''||\r\n||Uint16||'''period'''||period of the wave /* (ms?) (like frequency, duration from start to start?) */ ||\r\n||Sint16||'''magnitude'''||peak value; if negative, equivalent to 180 degrees extra phase shift /* (units?) (like amplitude?) */ ||\r\n||Sint16||'''offset'''||mean value of the wave /* (what aspect of the wave is being offset from what other marker? Is this the distance between waves?) */ ||\r\n||Uint16||'''phase'''||positive phase shift given by hundredth of a degree; see [[#phase|Remarks]] for details /* (Is this what creates the flat tops? What is the definition of a cycle, 1 sec?) */ ||\r\n||||||<bgcolor=\"#EDEDED\">''Envelope''||\r\n||Uint16||'''attack_length'''||duration of the attack /* (ms?) */ ||\r\n||Uint16||'''attack_level'''||level at the start of the attack /* (units?) */ ||\r\n||Uint16||'''fade_length'''||duration of the fade /* (ms?) */ ||\r\n||Uint16||'''fade_level'''||level at the end of the fade /* (units?) */ ||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n/* There are several typing and grammatical errors in this section of the header. May not require fixing but probably should at least be looked at. Changes from header have been made below. */\r\n\r\n<<Anchor(type)>>\r\nA periodic effect consists of a wave-shaped effect that repeats itself over time. The type determines the shape of the wave and the other parameters determine the dimensions of the wave.\r\n{{{\r\nbutton         period\r\npress          |     |\r\n  ||      __    __    __    __    __    _\r\n  ||     |  |  |  |  |  |  |  |  |  |   magnitude\r\n  \\/     |  |__|  |__|  |__|  |__|  |   _\r\n    -----\r\n      |            offset?\r\n    delay          phase?\r\n\r\n-------------------------------------\r\n              length\r\n===================================================\r\n                      interval\r\n}}}\r\n/* Does this structure warrant a simple .bmp diagram? Something that can use colors and such? */\r\n\r\n'''type''' may be one of the following:\r\n||SDL_HAPTIC_SINE||`  __      __      __      __`<<BR>>` /  \\    /  \\    /  \\    /`<<BR>>`/    \\__/    \\__/    \\__/`||\r\n||SDL_HAPTIC_TRIANGLE||`  /\\    /\\    /\\    /\\    /\\`<<BR>>` /  \\  /  \\  /  \\  /  \\  /`<<BR>>`/    \\/    \\/    \\/    \\/`||\r\n||SDL_HAPTIC_SAWTOOTHUP||`  /|  /|  /|  /|  /|  /|  /|`<<BR>>` / | / | / | / | / | / | / |`<<BR>>`/  |/  |/  |/  |/  |/  |/  |`||\r\n||SDL_HAPTIC_SAWTOOTHDOWN||`\\  |\\  |\\  |\\  |\\  |\\  |\\  |`<<BR>>` \\ | \\ | \\ | \\ | \\ | \\ | \\ |`<<BR>>`  \\|  \\|  \\|  \\|  \\|  \\|  \\| `||\r\n\r\n/* ||SDL_HAPTIC_SQUARE||` __    __    __    __    __`<<BR>>`|  |  |  |  |  |  |  |  |  |`<<BR>>`|  |__|  |__|  |__|  |__|  |`|| */\r\n\r\n<<Anchor(phase)>>'''phase''' is given by hundredths of a degree, meaning that giving the phase a value of 9000 will displace it 25% of its period. Here are sample values:\r\n||0||No phase displacement||\r\n||9000||Displaced 25% of its period||\r\n||18000||Displaced 50% of its period||\r\n||27000||Displaced 75% of its period||\r\n||36000||Displaced 100% of its period, same as 0, but 0 is preferred||\r\n/* This is not at all clear unless it is a common thing that a programmer would know.  Is phase describing the duration of an individual wave from start to finish or the duration from the start of one wave to the start of the next? */\r\n\r\n== Related Structures ==\r\n .[[SDL_HapticDirection]]\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticRamp",
      "Uri": "https://wiki.libsdl.org/SDL_HapticRamp",
      "Categories": [
        "CategoryStruct",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:04:06.863299-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticRamp =\r\nA structure that contains a template for a ramp effect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''Header''||\r\n||Uint16||'''type'''||SDL_HAPTIC_RAMP||\r\n||[[SDL_HapticDirection]]||'''direction'''||direction of the effect||\r\n||||||<bgcolor=\"#EDEDED\">''Replay''||\r\n||Uint32||'''length'''||duration of the effect||\r\n||Uint16||'''delay'''||delay before starting the effect||\r\n||||||<bgcolor=\"#EDEDED\">''Trigger''||\r\n||Uint16||'''button'''||button that triggers the effect||\r\n||Uint16||'''interval'''||how soon it can be triggered again after '''button'''||\r\n||||||<bgcolor=\"#EDEDED\">''Ramp''||\r\n||Sint16||'''start'''||beginning strength level||\r\n||Sint16||'''end'''||ending strength level||\r\n||||||<bgcolor=\"#EDEDED\">''Envelope''||\r\n||Uint16||'''attack_length'''||duration of the attack||\r\n||Uint16||'''attack_level'''||level at the start of the attack||\r\n||Uint16||'''fade_length'''||duration of the fade||\r\n||Uint16||'''fade_level'''||level at the end of the fade||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis struct is exclusively for the SDL_HAPTIC_RAMP effect.\r\n\r\nThe ramp effect starts at '''start''' strength and ends at '''end''' strength. It augments in linear fashion. If you use attack and fade with a ramp ''the'' effects get added to the ramp effect making the effect become quadratic instead of linear.\r\n\r\n== Related Structures ==\r\n .[[SDL_HapticDirection]]\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_JoyAxisEvent",
      "Uri": "https://wiki.libsdl.org/SDL_JoyAxisEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:04:07.5840221-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_JoyAxisEvent =\r\nA structure that contains joystick axis motion event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_JOYAXISMOTION||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||SDL_JoystickID||'''which'''||the instance id of the joystick that reported the event||\r\n||Uint8||'''axis'''||the index of the axis that changed||\r\n||Sint16||'''value'''||the current position of the axis (range: -32768 to 32767)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_JoyAxisEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_JOYAXISMOTION is reported.  You would access it through the event's `jaxis` field.\r\n\r\nAn SDL_JOYAXISMOTION event occurs whenever a user moves an axis on the joystick.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_JoyBallEvent]]\r\n .[[SDL_JoyButtonEvent]]\r\n .[[SDL_JoyHatEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickEventState]]\r\n .[[SDL_JoystickGetAxis]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_JoyBallEvent",
      "Uri": "https://wiki.libsdl.org/SDL_JoyBallEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:04:08.2317402-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_JoyBallEvent =\r\nA structure that contains joystick trackball motion event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_JOYBALLMOTION||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||SDL_JoystickID||'''which'''||the instance id of the joystick that reported the event||\r\n||Uint8||'''ball'''||the index of the trackball that changed||\r\n||Sint16||'''xrel'''||the relative motion in the X direction||\r\n||Sint16||'''yrel'''||the relative motion in the Y direction||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_JoyBallEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_JOYBALLMOTION is reported.  You would access it through the event's `jball` field.\r\n\r\nAn SDL_JOYBALLMOTION event occurs when a user moves a trackball on the joystick.\r\n\r\nTrackballs only return relative motion. This is the change in position of the ball since it was last polled (last cycle of the event loop).\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_JoyAxisEvent]]\r\n .[[SDL_JoyButtonEvent]]\r\n .[[SDL_JoyHatEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickEventState]]\r\n .[[SDL_JoystickGetBall]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_JoyButtonEvent",
      "Uri": "https://wiki.libsdl.org/SDL_JoyButtonEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:04:49.7298706-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_JoyButtonEvent =\r\nA structure that contains joystick button event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||the event type; SDL_JOYBUTTONDOWN or SDL_JOYBUTTONUP||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||SDL_JoystickID||'''which'''||the instance id of the joystick that reported the event||\r\n||Uint8||'''button'''||the index of the button that changed||\r\n||Uint8||'''state'''||the state of the button; SDL_PRESSED or SDL_RELEASED||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_JoyButtonEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_JOYBUTTONDOWN or SDL_JOYBUTTONUP is reported.  You would access it through the event's `jbutton` field.\r\n\r\nAn SDL_JOYBUTTONDOWN or SDL_JOYBUTTONUP event occurs whenever a user presses or releases a button on a joystick.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_JoyAxisEvent]]\r\n .[[SDL_JoyBallEvent]]\r\n .[[SDL_JoyHatEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickEventState]]\r\n .[[SDL_JoystickGetButton]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_JoyDeviceEvent",
      "Uri": "https://wiki.libsdl.org/SDL_JoyDeviceEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:04:50.4913819-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_JoyDeviceEvent =\r\nA structure that contains joystick device event information. \r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_JOYDEVICEADDED or SDL_JOYDEVICEREMOVED||\r\n||Uint32||'''timestamp'''||the timestamp of the event||\r\n||Sint32||'''which'''||the joystick device index for the SDL_JOYDEVICEADDED event or the instance id for the SDL_JOYDEVICEREMOVED event||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_JoyHatEvent",
      "Uri": "https://wiki.libsdl.org/SDL_JoyHatEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:04:56.1743559-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_JoyHatEvent =\r\nA structure that contains joystick hat position change event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_JOYHATMOTION||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||SDL_JoystickID||'''which'''||the instance id of the joystick that reported the event||\r\n||Uint8||'''hat'''||the index of the hat that changed||\r\n||Uint8||'''value'''||the new position of the hat; see [[#Remarks|Remarks]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_JoyHatEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_JOYHATMOTION is reported.  You would access it through the event's `jhat` field.\r\n\r\nAn SDL_JOYHATMOTION event occurs whenever a user moves a hat on the joystick.\r\n\r\n'''value''' may be one of the following:\r\n||SDL_HAT_LEFTUP||||SDL_HAT_UP||||SDL_HAT_RIGHTUP||\r\n||SDL_HAT_LEFT||||SDL_HAT_CENTERED||||SDL_HAT_RIGHT||\r\n||SDL_HAT_LEFTDOWN||||SDL_HAT_DOWN||||SDL_HAT_RIGHTDOWN||\r\nNote that zero means the POV is centered. \r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_JoyAxisEvent]]\r\n .[[SDL_JoyBallEvent]]\r\n .[[SDL_JoyButtonEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickEventState]]\r\n .[[SDL_JoystickGetHat]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_KeyboardEvent",
      "Uri": "https://wiki.libsdl.org/SDL_KeyboardEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:04:56.9374887-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_KeyboardEvent =\r\nA structure that contains keyboard button event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||the event type; SDL_KEYDOWN or SDL_KEYUP||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32||'''windowID'''||the window with keyboard focus, if any||\r\n||Uint8||'''state'''||the state of the key; SDL_PRESSED or SDL_RELEASED||\r\n||Uint8||'''repeat'''||non-zero if this is a key repeat||\r\n||[[SDL_Keysym]]||'''keysym'''||the [[SDL_Keysym]] representing the key that was pressed or released||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_KeyboardEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_KEYDOWN or SDL_KEYUP is reported.  You would access it through the event's `key` field. \r\n\r\nAn SDL_KEYDOWN or SDL_KEYUP event occurs whenever a user presses or releases a button on a keyboard. The information on what key was pressed or released is in the '''keysym''' member.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyboardState]]\r\n .[[SDL_GetModState]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_Keysym",
      "Uri": "https://wiki.libsdl.org/SDL_Keysym",
      "Categories": [
        "CategoryStruct",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:04:57.6698459-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_Keysym =\r\nA structure that contains key information used in key events.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||[[SDL_Scancode]]||'''scancode'''||SDL physical key code; see [[SDL_Scancode]] for details||\r\n||[[SDL_Keycode]]||'''sym'''||SDL virtual key code; see [[SDL_Keycode]] for details||\r\n||Uint16||'''mod'''||current key modifiers; see [[SDL_Keymod]] for details||\r\n||<style=\"color: #808080;\">Uint32||<style=\"color: #808080;\">'''unused'''||<style=\"color: #808080;\">||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Enumerations ==\r\n .[[SDL_Keycode]]\r\n .[[SDL_Keymod]]\r\n .[[SDL_Scancode]]\r\n\r\n== Related Structures ==\r\n .[[SDL_KeyboardEvent]]\r\n .[[SDL_TextInputEvent]]\r\n\r\n== Related Functions ==\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_MessageBoxButtonData",
      "Uri": "https://wiki.libsdl.org/SDL_MessageBoxButtonData",
      "Categories": [
        "CategoryStruct",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:04:58.4142705-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MessageBoxButtonData =\r\nA structure that contains individual button data for a message box.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n|| Uint32      ||'''flags'''    || one of the values from [[SDL_MessageBoxButtonFlags]] ||\r\n|| int         ||'''buttonid''' || user defined button id (value returned via [[SDL_ShowMessageBox]]()) ||\r\n|| const char* ||'''text'''     || the UTF-8 button text ||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_MessageBoxButtonFlags]]\r\n##Remove this section if empty\r\n\r\n== Related Structures ==\r\n .[[SDL_MessageBoxData]]\r\n##Remove this section if empty\r\n\r\n== Related Functions ==\r\n .[[SDL_ShowMessageBox]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_MessageBoxColor",
      "Uri": "https://wiki.libsdl.org/SDL_MessageBoxColor",
      "Categories": [
        "CategoryStruct",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:04:59.0512368-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MessageBoxColor =\r\nA structure that contains RGB value used in an [[SDL_MessageBoxColorScheme]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||Uint8||'''r'''||the red component in the range 0-255||\r\n||Uint8||'''g'''||the green component in the range 0-255||\r\n||Uint8||'''b'''||the blue component in the range 0-255||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_MessageBoxColorScheme]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_MessageBoxColorScheme",
      "Uri": "https://wiki.libsdl.org/SDL_MessageBoxColorScheme",
      "Categories": [
        "CategoryStruct",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:04:59.7889785-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MessageBoxColorScheme =\r\nA structure that contains a set of colors to use for message box dialogs.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n||[[SDL_MessageBoxColor]][5]||'''colors'''|| ||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_MessageBoxColorType]]\r\n##Remove this section if empty\r\n\r\n== Related Structures ==\r\n .[[SDL_MessageBoxColor]]\r\n .[[SDL_MessageBoxData]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_MessageBoxData",
      "Uri": "https://wiki.libsdl.org/SDL_MessageBoxData",
      "Categories": [
        "CategoryStruct",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:05:05.431229-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MessageBoxData =\r\nA structure that contains title, text, window and other data for a message box.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Data Fields ==\r\n|| Uint32                               || '''flags'''       || an [[SDL_MessageBoxFlags]] ||\r\n|| SDL_Window*                          || '''window'''      || an parent window, can be NULL ||\r\n|| const char*                          || '''title'''       || an UTF-8 title ||\r\n|| const char*                          || '''message'''     || an UTF-8 message text ||\r\n|| int                                  || '''numbuttons'''  || the number of buttons ||\r\n|| const [[SDL_MessageBoxButtonData]]*  || '''buttons'''     || an array of [[SDL_MessageBoxButtonData]] with length of '''numbuttons''' ||\r\n|| const [[SDL_MessageBoxColorScheme]]* || '''colorScheme''' || an [[SDL_MessageBoxColorScheme]], can be NULL to use system settings ||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nSee [[SDL_ShowMessageBox]]() for a complete code example.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_MessageBoxFlags]]\r\n##Remove this section if empty\r\n\r\n== Related Structures ==\r\n .[[SDL_MessageBoxButtonData]]\r\n .[[SDL_MessageBoxColorScheme]]\r\n##Remove this section if empty\r\n\r\n== Related Functions ==\r\n .[[SDL_ShowMessageBox]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_MouseButtonEvent",
      "Uri": "https://wiki.libsdl.org/SDL_MouseButtonEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:05:06.0981938-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_MouseButtonEvent =\r\nA structure that contains mouse button event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||the event type; SDL_MOUSEBUTTONDOWN or SDL_MOUSEBUTTONUP||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32||'''windowID'''||the window with mouse focus, if any||\r\n||Uint32||'''which'''||the mouse instance id, or SDL_TOUCH_MOUSEID; see [[#Remarks|Remarks]] for details||\r\n||Uint8||'''button'''||the button that changed; see [[#Remarks|Remarks]] for details||\r\n||Uint8||'''state'''||the state of the button; SDL_PRESSED or SDL_RELEASED||\r\n||Uint8||'''clicks'''||1 for single-click, 2 for double-click, etc. (>= SDL 2.0.2)||\r\n||Sint32||'''x'''||X coordinate, relative to window||\r\n||Sint32||'''y'''||Y coordinate, relative to window||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_MouseButtonEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_MOUSEBUTTONDOWN or SDL_MOUSEBUTTONUP is reported.  You would access it through the event's `button` field.\r\n\r\nAn SDL_MOUSEBUTTONDOWN or SDL_MOUSEBUTTONUP event occurs whenever a user presses or releases a button on a mouse.\r\n\r\n'''button''' may be one of:\r\n||SDL_BUTTON_LEFT||\r\n||SDL_BUTTON_MIDDLE||\r\n||SDL_BUTTON_RIGHT||\r\n||SDL_BUTTON_X1||\r\n||SDL_BUTTON_X2||\r\n\r\n'''which''' may be SDL_TOUCH_MOUSEID, for events that were generated by a touch input device, and not a real mouse. You might want to ignore such events, if your application already handles [[SDL_TouchFingerEvent]].\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_MouseMotionEvent]]\r\n .[[SDL_MouseWheelEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetMouseState]]\r\n .[[SDL_GetRelativeMouseState]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_MouseMotionEvent",
      "Uri": "https://wiki.libsdl.org/SDL_MouseMotionEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:05:06.7742335-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_MouseMotionEvent =\r\nA structure that contains mouse motion event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||the event type; SDL_MOUSEMOTION||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32||'''windowID'''||the window with mouse focus, if any||\r\n||Uint32||'''which'''||the mouse instance id, or SDL_TOUCH_MOUSEID; see [[#Remarks|Remarks]] for details||\r\n||Uint32||'''state'''||the state of the button; see [[#Remarks|Remarks]] for details||\r\n||Sint32||'''x'''||X coordinate, relative to window||\r\n||Sint32||'''y'''||Y coordinate, relative to window||\r\n||Sint32||'''xrel'''||relative motion in the X direction||\r\n||Sint32||'''yrel'''||relative motion in the Y direction||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_MouseMotionEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_MOUSEMOTION is reported.  You would access it through the event's `motion` field.\r\n\r\nAn SDL_MOUSEMOTION event occurs whenever a user moves the mouse within the application window or when [[SDL_WarpMouseInWindow]]() is called. \r\n\r\n'''state''' is a 32-bit button bitmask of the current button state and is the same as that returned by [[SDL_GetMouseState]]().  You can test different buttons by using the following masks:\r\n||SDL_BUTTON_LMASK||\r\n||SDL_BUTTON_MMASK||\r\n||SDL_BUTTON_RMASK||\r\n||SDL_BUTTON_X1MASK||\r\n||SDL_BUTTON_X2MASK||\r\n\r\n'''which''' may be SDL_TOUCH_MOUSEID, for events that were generated by a touch input device, and not a real mouse. You might want to ignore such events, if your application already handles [[SDL_TouchFingerEvent]].\r\n\r\nRelative motion is stored in '''xrel''' and '''yrel''' and is relative to the last motion event.  If relative mouse mode is enabled with [[SDL_SetRelativeMouseMode]](), then the mouse will give relative motion events even when the cursor reaches the edge of the screen.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_MouseButtonEvent]]\r\n .[[SDL_MouseWheelEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetMouseState]]\r\n .[[SDL_GetRelativeMouseState]]\r\n .[[SDL_SetRelativeMouseMode]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_MouseWheelEvent",
      "Uri": "https://wiki.libsdl.org/SDL_MouseWheelEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:05:07.4842295-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_MouseWheelEvent =\r\nA structure that contains mouse wheel event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_MOUSEWHEEL||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32||'''windowID'''||the window with mouse focus, if any||\r\n||Uint32||'''which'''||the mouse instance id, or SDL_TOUCH_MOUSEID; see [[#Remarks|Remarks]] for details||\r\n||Sint32||'''x'''||the amount scrolled horizontally, positive to the right and negative to the left||\r\n||Sint32||'''y'''||the amount scrolled vertically, positive away from the user and negative towards the user||\r\n||Uint32||'''direction'''||SDL_MOUSEWHEEL_NORMAL or SDL_MOUSEWHEEL_FLIPPED; see [[#Remarks|Remarks]] for details (>= SDL 2.0.4)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\nSDL_Event event;\r\nwhile( SDL_PollEvent( &event ) )\r\n{\r\n    if(event.type == SDL_MOUSEWHEEL)\r\n    {\r\n        if(event.wheel.y > 0) // scroll up\r\n        {\r\n             // Put code for handling \"scroll up\" here!\r\n        }\r\n        else if(event.wheel.y < 0) // scroll down\r\n        {\r\n             // Put code for handling \"scroll down\" here!\r\n        }\r\n\r\n        if(event.wheel.x > 0) // scroll right\r\n        {\r\n             // ...\r\n        }\r\n        else if(event.wheel.x < 0) // scroll left\r\n        {\r\n             // ...\r\n        }\r\n    }\r\n    else if(event.type == SDL_MOUSEBUTTONDOWN)\r\n    {\r\n        // ... handle mouse clicks ...\r\n    }\r\n\r\n    // ... handle other kinds of events ...\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_MouseWheelEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_MOUSEWHEEL is reported.  You would access it through the event's `wheel` field.\r\n\r\nAn SDL_MOUSEWHEEL event occurs whenever a user moves the mouse wheel.\r\n\r\nMovements to the left generate negative '''x''' values and to the right generate positive '''x''' values.  Movements down (scroll backward) generate negative '''y''' values and up (scroll forward) generate positive '''y''' values.\r\n\r\n'''which''' may be SDL_TOUCH_MOUSEID, for events that were generated by a touch input device, and not a real mouse. You might want to ignore such events, if your application already handles [[SDL_TouchFingerEvent]].\r\n\r\nSDL does not abstract the mouse wheel scroll directions to be consistent across all platforms (SDL_MOUSEWHEEL_NORMAL). If '''direction''' is SDL_MOUSEWHEEL_FLIPPED the values in '''x''' and '''y''' will be opposite. Multiply by -1 to change them back.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_MouseButtonEvent]]\r\n .[[SDL_MouseMotionEvent]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_MultiGestureEvent",
      "Uri": "https://wiki.libsdl.org/SDL_MultiGestureEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:05:08.2549193-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_MultiGestureEvent =\r\nA structure that contains multiple finger gesture event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_MULTIGESTURE||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||SDL_TouchID||'''touchId'''||the touch device id||\r\n||float||'''dTheta'''||the amount that the fingers rotated during this motion||\r\n||float||'''dDist'''||the amount that the fingers pinched during this motion||\r\n||float||'''x'''||the normalized center of gesture||\r\n||float||'''y'''||the normalized center of gesture||\r\n||Uint16||'''numFingers'''||the number of fingers used in the gesture||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_MultiGestureEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_MULTIGESTURE is reported. You would access it through the event's `mgesture` field.\r\n\r\nFor more information see: [[http://hg.libsdl.org/SDL/file/default/docs/README-gesture.md|README-gesture.md]]\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_DollarGestureEvent]]\r\n .[[SDL_Event]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_Palette",
      "Uri": "https://wiki.libsdl.org/SDL_Palette",
      "Categories": [
        "CategoryStruct",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:05:09.0373469-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Palette =\r\nA structure that contains palette information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||int||'''ncolors'''||the number of colors in the palette||\r\n||[[SDL_Color]]*||'''colors'''||an array of [[SDL_Color]] structures representing the palette||\r\n||<style=\"color: #808080;\">Uint32||<style=\"color: #808080;\">'''version'''||<style=\"color: #808080;\">incrementally tracks changes to the palette (internal use)||\r\n||<style=\"color: #808080;\">int||<style=\"color: #808080;\">'''refcount'''||<style=\"color: #808080;\">reference count (internal use)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nEach pixel in an 8-bit surface is an index into the '''colors''' field of the [[SDL_Palette]] structure stored in [[SDL_PixelFormat]]. An [[SDL_Palette]] should never need to be created manually. It is automatically created when SDL allocates an [[SDL_PixelFormat]] for a surface. The '''colors''' values of an [[SDL_Surface]]'s palette can be set with [[SDL_SetPaletteColors]]().\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_PixelFormat]]\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocPalette]]\r\n .[[SDL_FreePalette]]\r\n .[[SDL_SetPaletteColors]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_PixelFormat",
      "Uri": "https://wiki.libsdl.org/SDL_PixelFormat",
      "Categories": [
        "CategoryStruct",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:05:55.3578196-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_PixelFormat =\r\nA structure that contains pixel format information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''format'''||one of the [[SDL_PixelFormatEnum]] values||\r\n||[[SDL_Palette]]*||'''palette'''||an [[SDL_Palette]] structure associated with this pixel format, or NULL if the format doesn't have a palette||\r\n||Uint8||'''!BitsPerPixel'''||the number of significant bits in a pixel value, eg: 8, 15, 16, 24, 32||\r\n||Uint8||'''!BytesPerPixel'''||the number of bytes required to hold a pixel value, eg: 1, 2, 3, 4; see [[#bytesperpixel|Remarks]] for related data type||\r\n||Uint32||'''Rmask'''||a mask representing the location of the red component of the pixel||\r\n||Uint32||'''Gmask'''||a mask representing the location of the green component of the pixel||\r\n||Uint32||'''Bmask'''||a mask representing the location of the blue component of the pixel||\r\n||Uint32||'''Amask'''||a mask representing the location of the alpha component of the pixel or 0 if the pixel format doesn't have any alpha information||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Rloss'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Gloss'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Bloss'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Aloss'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Rshift'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Gshift'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Bshift'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">Uint8||'''Ashift'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">int||'''refcount'''||(internal use)||\r\n||<rowstyle=\"color: #808080;\">[[SDL_PixelFormat]]*||'''next'''||(internal use)||\r\n\r\n== Code Examples ==\r\n8-bit pixel formats are the easiest to understand. Since it is an 8-bit format, we have 8 '''!BitsPerPixel''' and 1 '''!BytesPerPixel'''. Since '''!BytesPerPixel''' is 1, all pixels are represented by a Uint8 which contains an index into `palette->colors`. So, to determine the color of a pixel in an 8-bit surface: we read the color index from `surface->pixels` and we use that index to read the [[SDL_Color]] structure from `surface->format->palette->colors`. Like so:\r\n{{{#!highlight cpp\r\nSDL_Surface *surface;\r\nSDL_PixelFormat *fmt;\r\nSDL_Color *color;\r\nUint8 index;\r\n\r\n.\r\n.\r\n\r\n/* Create surface */\r\n.\r\n.\r\nfmt=surface->format;\r\n\r\n/* Check the bitdepth of the surface */\r\nif(fmt->BitsPerPixel!=8){\r\n  fprintf(stderr, \"Not an 8-bit surface.\\n\");\r\n  return(-1);\r\n}\r\n\r\n/* Lock the surface */\r\nSDL_LockSurface(surface);\r\n\r\n/* Get the topleft pixel */\r\nindex=*(Uint8 *)surface->pixels;\r\ncolor=&fmt->palette->colors[index];\r\n\r\n/* Unlock the surface */\r\nSDL_UnlockSurface(surface);\r\nprintf(\"Pixel Color-> Red: %d, Green: %d, Blue: %d. Index: %d\\n\",\r\n          color->r, color->g, color->b, index);\r\n.\r\n.\r\n}}}\r\nPixel formats above 8-bit are an entirely different experience. They are considered to be \"!TrueColor\" formats and the color information is stored in the pixels themselves, not in a palette. The '''mask''', '''shift''' and '''loss''' fields tell us how the color information is encoded. The '''mask''' fields allow us to isolate each color component, the '''shift''' fields tell us the number of bits to the right of each component in the pixel value and the '''loss''' fields tell us the number of bits lost from each component when packing 8-bit color component in a pixel.\r\n{{{#!highlight cpp\r\n/* Extracting color components from a 32-bit color value */\r\nSDL_PixelFormat *fmt;\r\nSDL_Surface *surface;\r\nUint32 temp, pixel;\r\nUint8 red, green, blue, alpha;\r\n.\r\n.\r\n.\r\nfmt = surface->format;\r\nSDL_LockSurface(surface);\r\npixel = *((Uint32*)surface->pixels);\r\nSDL_UnlockSurface(surface);\r\n\r\n/* Get Red component */\r\ntemp = pixel & fmt->Rmask;  /* Isolate red component */\r\ntemp = temp >> fmt->Rshift; /* Shift it down to 8-bit */\r\ntemp = temp << fmt->Rloss;  /* Expand to a full 8-bit number */\r\nred = (Uint8)temp;\r\n\r\n/* Get Green component */\r\ntemp = pixel & fmt->Gmask;  /* Isolate green component */\r\ntemp = temp >> fmt->Gshift; /* Shift it down to 8-bit */\r\ntemp = temp << fmt->Gloss;  /* Expand to a full 8-bit number */\r\ngreen = (Uint8)temp;\r\n\r\n/* Get Blue component */\r\ntemp = pixel & fmt->Bmask;  /* Isolate blue component */\r\ntemp = temp >> fmt->Bshift; /* Shift it down to 8-bit */\r\ntemp = temp << fmt->Bloss;  /* Expand to a full 8-bit number */\r\nblue = (Uint8)temp;\r\n\r\n/* Get Alpha component */\r\ntemp = pixel & fmt->Amask;  /* Isolate alpha component */\r\ntemp = temp >> fmt->Ashift; /* Shift it down to 8-bit */\r\ntemp = temp << fmt->Aloss;  /* Expand to a full 8-bit number */\r\nalpha = (Uint8)temp;\r\n\r\nprintf(\"Pixel Color -> R: %d,  G: %d,  B: %d,  A: %d\\n\", red, green, blue, alpha);\r\n.\r\n.\r\n.\r\n}}}\r\n\r\n== Remarks ==\r\nEverything in the pixel format structure is read-only.\r\n\r\nA pixel format has either a palette or masks.  If a palette is used '''Rmask''', '''Gmask''', '''Bmask''', and '''Amask''' will be 0.\r\n\r\n<<Anchor(bytesperpixel)>> The data types used to represent pixels are as follows:\r\n||__Bytes Per Pixel__||__Related Data Types__||\r\n||1||Uint8||\r\n||2||Uint16||\r\n||3||tuple of Uint8 RGB values||\r\n||4||Uint32||\r\n\r\nAn [[SDL_PixelFormat]] describes the format of the pixel data stored at the `pixels` field of an [[SDL_Surface]]. Every surface stores an [[SDL_PixelFormat]] in the `format` field.\r\n\r\nIf you wish to do pixel level modifications on a surface, then understanding how SDL stores its color information is essential.  See [[#Code Examples|Code Examples]] above for more information.\r\n\r\nFor information on modern pixel color spaces, see the following Wikipedia article:\r\nhttp://en.wikipedia.org/wiki/RGBA_color_space\r\n\r\n\r\n== Related Structures ==\r\n .[[SDL_Surface]]\r\n\r\n== Related Functions ==\r\n .[[SDL_ConvertSurface]]\r\n .[[SDL_GetRGB]]\r\n .[[SDL_GetRGBA]]\r\n .[[SDL_MapRGB]]\r\n .[[SDL_MapRGBA]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_Point",
      "Uri": "https://wiki.libsdl.org/SDL_Point",
      "Categories": [
        "CategoryStruct",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:05:56.1377248-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Point =\r\nA structure that defines a two dimensional point.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||int||'''x'''||the x coordinate of the point||\r\n||int||'''y'''||the y coordinate of the point||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Example program:\r\n// Using SDL_Point in some places of your code\r\n\r\n#include \"SDL.h\"\r\n#include <stdio.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n\r\n    SDL_Window *window;\r\n\r\n    SDL_Point window_position = {         //    Position of window\r\n        SDL_WINDOWPOS_CENTERED,\r\n        SDL_WINDOWPOS_CENTERED\r\n    };\r\n    SDL_Point window_size = {640, 480};   //    Size of window\r\n\r\n    SDL_Point mouse_position;             //    Mouse position coords\r\n\r\n    SDL_Init(SDL_INIT_VIDEO);             //    Initialize SDL2\r\n\r\n    // Create an application window with the following settings:\r\n    window = SDL_CreateWindow( \r\n        \"SDL_Point usage\",                //    window title\r\n        window_position.x,                //    initial x position\r\n        window_position.y,                //    initial y position\r\n        window_size.x,                    //    width, in pixels\r\n        window_size.y,                    //    height, in pixels\r\n        SDL_WINDOW_OPENGL                 //    flags - see below\r\n    );\r\n\r\n    // Check that the window was successfully made\r\n    if (window == NULL) {\r\n        SDL_Log(\"Could not create window: %s\", SDL_GetError());\r\n        return 1;\r\n    }\r\n\r\n    SDL_GetMouseState(                    //    Sets mouse_position to...\r\n        &mouse_position.x,                // ...mouse arrow coords on window\r\n        &mouse_position.y\r\n    );\r\n\r\n    SDL_Log(\"Mouse position: x=%i y=%i\",  //    Print mouse position\r\n         mouse_position.x, mouse_position.y\r\n    );\r\n\r\n    // Close and destroy the window\r\n    SDL_DestroyWindow(window); \r\n\r\n    // Clean up\r\n    SDL_Quit();\r\n    return 0; \r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nAn [[SDL_Point]] defines single two dimensional point. It can be used not only for points, but also for size.\r\n[[SDL_Point]] is used by [[SDL_EnclosePoints]]() to check if array of points is inside rectangle ([[SDL_Rect]]).\r\nYou can also make your own functions using [[SDL_Point]] to simplify your code, it's very helpful.\r\n\r\n== Related Structures ==\r\n .[[SDL_Rect]]\r\n\r\n== Related Functions ==\r\n .[[SDL_EnclosePoints]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_QuitEvent",
      "Uri": "https://wiki.libsdl.org/SDL_QuitEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:05:56.9000513-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_QuitEvent =\r\nA structure that contains the \"quit requested\" event.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_QUIT||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Event e;\r\nfor (;;) {\r\n    SDL_PollEvent(&e);\r\n    if (e.type == SDL_QUIT) {\r\n        SDL_Log(\"Program quit after %i ticks\", e.quit.timestamp);\r\n        break;\r\n    }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_QuitEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_QUIT is reported.  You would access it through the event's `quit` field.\r\n\r\nPlease refer to [[SDL_EventType#SDL_QUIT|the discussion of SDL_QUIT]] for more details.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_RWops",
      "Uri": "https://wiki.libsdl.org/SDL_RWops",
      "Categories": [
        "CategoryStruct",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:05:57.6299861-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RWops =\r\nA structure that provides an abstract interface to stream I/O. Applications can generally ignore the specifics of this structure's internals and treat them as opaque pointers. The details are important to lower-level code that might need to implement one of these, however.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Sint64 (*)(SDL_RWops *)||'''size'''||callback that reports stream size; see [[#Size Function|Remarks]]||\r\n||Sint64 (*)(SDL_RWops *, Sint64, int)||'''seek'''||callback that seeks in stream; see [[#Seek Function|Remarks]]||\r\n||size_t (*)(SDL_RWops *, void *, size_t, size_t)||'''read'''||callback that reads from the stream; see [[#Read Function|Remarks]]||\r\n||size_t (*)(SDL_RWops *, const void *, size_t, size_t)||'''write'''||callback that writes to the stream; see [[#Write Function|Remarks]]||\r\n||int (*)(SDL_RWops *)||'''close'''||callback that closes the stream; see [[#Close Function|Remarks]]||\r\n||Uint32||'''type'''||type of stream; see [[#Stream Type|Remarks]]||\r\n||union||'''hidden'''||type-specific data; see [[#Hidden Union|Remarks]]||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_RWops *io = SDL_RWFromFile(\"username.txt\", \"rb\");\r\nif (io != NULL) {\r\n    char name[256];\r\n    if (io->read(io, name, sizeof (name), 1) > 0) {\r\n        printf(\"Hello, %s!\\n\", name);\r\n    }\r\n    io->close(io);\r\n}\r\n}}}\r\n\r\nThe following is functionally identical to the above example, but uses the recommended macro interface.\r\n\r\n{{{#!highlight cpp\r\nSDL_RWops *io = SDL_RWFromFile(\"username.txt\", \"rb\");\r\nif (io != NULL) {\r\n    char name[256];\r\n    if (SDL_RWread(io, name, sizeof (name), 1) > 0) {\r\n        printf(\"Hello, %s!\\n\", name);\r\n    }\r\n    SDL_RWclose(io);\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nSDL_RWops is an abstraction over I/O. It provides interfaces to read, write and seek data in a stream, without the caller needing to know where the data is coming from.\r\n\r\nFor example, a RWops might be fed by a memory buffer, or a file on disk, or a connection to a web server, without any changes to how the caller consumes the data.\r\n\r\nSDL provides some internal methods for reading from common stream types, like files and memory buffers, but this structure can be used by the application or third party libraries to implement whatever type of stream it pleases.\r\n\r\nMost of the fields of this structure are function pointers that are used as callbacks to implement the stream interface. All of them use SDLCALL calling convention.\r\n\r\nPlease note that many of these function pointers used ints in SDL 1.2; to give them a better range, they have become Sint64 in SDL 2.0.\r\n\r\nApplications shouldn't have to care about the internals of this structure. They can treat it as an opaque data pointer and use the [[SDL_RWread]](), [[SDL_RWwrite]](), [[SDL_RWseek]](), [[SDL_RWtell]]() and [[SDL_RWclose]]() functions on them. Applications almost never create or modify these structures either, instead favoring creation functions like [[SDL_RWFromFile]](), [[SDL_RWFromMem]](), etc.\r\n\r\nThird-party libraries and special, low-level code may need to know how to properly implement this struct, however.\r\n\r\n=== Size Function ===\r\n'''size''' is a function pointer that reports the stream's total size in bytes. If the stream size can't be determined (either because it doesn't make sense for the stream type, or there was an error), this function returns -1.\r\n\r\n=== Seek Function ===\r\n'''seek''' is a function pointer that positions the next read/write operation in the stream. This seeks in byte offsets. If the stream can not seek (either because it doesn't make sense for the stream type, or there was an error), this function returns -1, otherwise it returns the new position.\r\nSeeking zero bytes from RW_SEEK_CUR is a common way to determine the current stream position.\r\n\r\nThe final argument works like the standard fseek() \"whence\":\r\n||Identifier||Value||Explanation||\r\n||RW_SEEK_SET||0||Seek from the beginning of data||\r\n||RW_SEEK_CUR||1||Seek relative to current read point||\r\n||RW_SEEK_END||2||Seek relative to the end of data||\r\n\r\n=== Read Function ===\r\n'''read''' is a function pointer that reads from the stream. It reads up to num objects each of size bytes into the buffer pointer to by ptr. Returns the number of objects read, which may be less than requested. Returns 0 on error or EOF.\r\n\r\n=== Write Function ===\r\n'''write''' is a function pointer that writes to the stream. It writes exactly num objects each of size bytes from the buffer pointer to by ptr. Returns the number of objects written, which will be less than requested on error.\r\n\r\n=== Close Function ===\r\n'''close''' is a function pointer that cleans up the stream. It should release any resources used by the stream and free the SDL_RWops itself with [[SDL_FreeRW]](). This returns 0 on success, or -1 if the stream failed to flush to disk (or whereever). The SDL_RWops is no longer valid after this call, even if flushing the stream failed.\r\n\r\n=== Stream Type ===\r\n\r\nThe '''type''' field is currently one of these values. An application can usually ignore this information.\r\n\r\n||Identifier||Value||Description||\r\n||SDL_RWOPS_UNKNOWN||0||Unknown stream type or application-defined||\r\n||SDL_RWOPS_WINFILE||1||Win32 file handle||\r\n||SDL_RWOPS_STDFILE||2||stdio.h `FILE*`||\r\n||SDL_RWOPS_JNIFILE||3||Android asset||\r\n||SDL_RWOPS_MEMORY||4||Memory stream (read/write)||\r\n||SDL_RWOPS_MEMORY_RO||5||Memory stream (read-only)||\r\n\r\nApplications and libraries rolling their own RWops implementations should use SDL_RWOPS_UNKNOWN. All other values are currently reserved for SDL's internal use.\r\n\r\n=== Hidden Union ===\r\n\r\nApplications can ignore this union completely. All of the fields in this union are platform-specific and off-limits, used internally by SDL, with one exception. You may use the '''unknown''' struct to store your own RWops implementation's data, possibly cleaning it up during the '''close''' method. If your data doesn't fit in two pointers, use these pointers to hold an allocated structure that contains the real data.\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocRW]]\r\n .[[SDL_FreeRW]]\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWtell]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_Rect",
      "Uri": "https://wiki.libsdl.org/SDL_Rect",
      "Categories": [
        "CategoryStruct",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:05:58.4159823-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Rect =\r\nA structure that contains the definition of a rectangle, with the origin at the upper left.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||int||'''x'''||the x location of the rectangle's upper left corner||\r\n||int||'''y'''||the y location of the rectangle's upper left corner||\r\n||int||'''w'''||the width of the rectangle||\r\n||int||'''h'''||the height of the rectangle||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Rect srcrect;\r\nSDL_Rect dstrect;\r\n\r\nsrcrect.x = 0;\r\nsrcrect.y = 0;\r\nsrcrect.w = 32;\r\nsrcrect.h = 32;\r\ndstrect.x = 640/2;\r\ndstrect.y = 480/2;\r\ndstrect.w = 32;\r\ndstrect.h = 32;\r\n\r\nSDL_BlitSurface(src, &srcrect, dst, &dstrect);\r\n}}}\r\n\r\n== Remarks ==\r\nAn [[SDL_Rect]] defines a rectangular area of the screen.  It is used by [[SDL_BlitSurface]]() to define blitting regions and by several other video functions.\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]]\r\n .[[SDL_EnclosePoints]]\r\n .[[SDL_GetDisplayBounds]]\r\n .[[SDL_HasIntersection]]\r\n .[[SDL_IntersectRect]]\r\n .[[SDL_LockTexture]]\r\n .[[SDL_RenderCopy]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderReadPixels]]\r\n .[[SDL_UnionRect]]\r\n .[[SDL_UpdateTexture]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_Renderer",
      "Uri": "https://wiki.libsdl.org/SDL_Renderer",
      "Categories": [
        "CategoryStruct",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:05:59.2007326-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGStructures for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_Renderer =\r\nA structure that contains a rendering state.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n .[[SDL_CreateSoftwareRenderer]]\r\n .[[SDL_CreateTexture]]\r\n .[[SDL_CreateTextureFromSurface]]\r\n .[[SDL_CreateWindowAndRenderer]]\r\n .[[SDL_DestroyRenderer]]\r\n .[[SDL_GetRenderDrawBlendMode]]\r\n .[[SDL_GetRenderDrawColor]]\r\n .[[SDL_GetRendererInfo]]\r\n .[[SDL_GetRendererOutputSize]]\r\n .[[SDL_GetRenderTarget]]\r\n .[[SDL_RenderClear]]\r\n .[[SDL_RenderCopy]]\r\n .[[SDL_RenderCopyEx]]\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderGetClipRect]]\r\n .[[SDL_RenderGetIntegerScale]]\r\n .[[SDL_RenderGetLogicalSize]]\r\n .[[SDL_RenderGetScale]]\r\n .[[SDL_RenderGetViewport]]\r\n .[[SDL_RenderIsClipEnabled]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_RenderReadPixels]]\r\n .[[SDL_RenderSetClipRect]]\r\n .[[SDL_RenderSetIntegerScale]]\r\n .[[SDL_RenderSetLogicalSize]]\r\n .[[SDL_RenderSetScale]]\r\n .[[SDL_RenderSetViewport]]\r\n .[[SDL_RenderTargetSupported]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n .[[SDL_SetRenderTarget]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RendererInfo",
      "Uri": "https://wiki.libsdl.org/SDL_RendererInfo",
      "Categories": [
        "CategoryStruct",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:06:04.8799354-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RendererInfo =\r\nA structure that contains information on the capabilities of a render driver or the current render context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||const char*||'''name'''||the name of the renderer||\r\n||Uint32||'''flags'''||a mask of supported renderer flags; see [[#flags|Remarks]] for details||\r\n||Uint32||'''num_texture_formats'''||the number of available texture formats||\r\n||Uint32[16]||'''texture_formats'''||the available texture formats; see [[#texture_formats|Remarks]] for details||\r\n||int||'''max_texture_width'''||the maximum texture width||\r\n||int||'''max_texture_height'''||the maximum texture height||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(flags)>> '''flags''' may be 0 or a mask of any of the following [[SDL_RendererFlags]] values OR'd together:  <<Include(SDL_RendererFlags, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n<<Anchor(texture_formats)>> '''texture_formats''' is an array of [[SDL_PixelFormatEnum]] values representing the available texture formats for the renderer <<Include(SDL_PixelFormatEnum, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Enumerations ==\r\n .[[SDL_BlendMode]]\r\n .[[SDL_PixelFormatEnum]]\r\n .[[SDL_RendererFlags]]\r\n .[[SDL_TextureModulate]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRenderDriverInfo]]\r\n .[[SDL_GetRendererInfo]]\r\n .[[SDL_RenderCopy]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_Surface",
      "Uri": "https://wiki.libsdl.org/SDL_Surface",
      "Categories": [
        "CategoryStruct",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:06:05.6214082-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_Surface =\r\nA structure that contains a collection of pixels used in software blitting.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||<style=\"color: rgb(128, 128, 128);\">Uint32 ||<style=\"color: rgb(128, 128, 128);\">'''flags''' ||<style=\"color: rgb(128, 128, 128);\">(internal use)||\r\n||[[SDL_PixelFormat]]* ||'''format''' ||the format of the pixels stored in the surface; see [[SDL_PixelFormat]] for details (read-only) ||\r\n||int ||'''w, h''' ||the width and height in pixels (read-only) ||\r\n||int ||'''pitch''' ||the length of a row of pixels in bytes (read-only) ||\r\n||void* ||'''pixels''' ||the pointer to the actual pixel data; see [[#Remarks|Remarks]] for details (read-write) ||\r\n||void* ||'''userdata''' ||an arbitrary pointer you can set (read-write) ||\r\n||<style=\"color: rgb(128, 128, 128);\">int ||<style=\"color: rgb(128, 128, 128);\">'''locked''' ||<style=\"color: rgb(128, 128, 128);\">used for surfaces that require locking (internal use)||\r\n||<style=\"color: rgb(128, 128, 128);\">void* ||<style=\"color: rgb(128, 128, 128);\">'''lock_data''' ||<style=\"color: rgb(128, 128, 128);\">used for surfaces that require locking (internal use)||\r\n||[[SDL_Rect]] ||'''clip_rect''' ||an [[SDL_Rect]] structure used to clip blits to the surface which can be set by [[SDL_SetClipRect]]() (read-only) ||\r\n||<style=\"color: rgb(128, 128, 128);\">SDL_!BlitMap* ||<style=\"color: rgb(128, 128, 128);\">'''map''' ||<style=\"color: rgb(128, 128, 128);\">info for fast blit mapping to other surfaces (internal use)||\r\n||int ||'''refcount''' ||reference count that can be incremented by the application ||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* This is meant to show how to edit a surface's pixels on the CPU, but\r\n   normally you should use SDL_FillRect() to wipe a surface's contents. */\r\nvoid WipeSurface(SDL_Surface *surface)\r\n{\r\n    /* This is fast for surfaces that don't require locking. */\r\n    /* Once locked, surface->pixels is safe to access. */\r\n    SDL_LockSurface(surface);\r\n\r\n    /* This assumes that color value zero is black. Use\r\n       SDL_MapRGBA() for more robust surface color mapping! */\r\n    /* height times pitch is the size of the surface's whole buffer. */\r\n    SDL_memset(surface->pixels, 0, surface->h * surface->pitch);\r\n\r\n    SDL_UnlockSurface(surface);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nWith most surfaces you can access the pixels directly.  Surfaces that have been optimized with [[SDL_SetSurfaceRLE]]() should be locked with [[SDL_LockSurface]]() before accessing '''pixels'''.  When you are done you should call [[SDL_UnlockSurface]]() before blitting.\r\n\r\n== Related Functions ==\r\n . [[SDL_BlitSurface]]\r\n . [[SDL_ConvertSurface]]\r\n . [[SDL_CreateRGBSurface]]\r\n . [[SDL_CreateRGBSurfaceFrom]]\r\n . [[SDL_FillRect]]\r\n . [[SDL_FillRects]]\r\n . [[SDL_FreeSurface]]\r\n . [[SDL_GetClipRect]]\r\n . [[SDL_GetColorKey]]\r\n . [[SDL_GetSurfaceAlphaMod]]\r\n . [[SDL_GetSurfaceBlendMode]]\r\n . [[SDL_GetSurfaceColorMod]]\r\n . [[SDL_LoadBMP_RW]]\r\n . [[SDL_LockSurface]]\r\n . [[SDL_LowerBlit]]\r\n . [[SDL_MUSTLOCK]]\r\n . [[SDL_SaveBMP_RW]]\r\n . [[SDL_SetClipRect]]\r\n . [[SDL_SetColorKey]]\r\n . [[SDL_SetSurfaceAlphaMod]]\r\n . [[SDL_SetSurfaceBlendMode]]\r\n . [[SDL_SetSurfaceColorMod]]\r\n . [[SDL_SetSurfacePalette]]\r\n . [[SDL_SetSurfaceRLE]]\r\n . [[SDL_SoftStretch]]\r\n . [[SDL_UnlockSurface]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SysWMEvent",
      "Uri": "https://wiki.libsdl.org/SDL_SysWMEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:06:06.3028973-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SysWMEvent =\r\nA structure that contains a video driver dependent system event.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_SYSWMEVENT||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||[[SDL_SysWMmsg]]*||'''msg'''||driver dependent data, defined in SDL_syswm.h||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis event is disabled by default.  You can enable it with [[SDL_EventState]]().  You are encouraged to avoid this if you can find a less platform-specific way to accomplish your goals.\r\n\r\nIf you want to use this event you should include SDL_syswm.h and have access to the appropriate system headers.\r\n\r\n[[SDL_SysWMEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_SYSWMEVENT is reported. You would access it through the event's `syswm` field. \r\n\r\nIf you want to obtain system-specific information about the window manager you can fill in the `version` member of an [[SDL_SysWMinfo]] structure using the [[SDL_VERSION]]() macro found in SDL_version.h, and pass it to the function [[SDL_GetWindowWMInfo]]().\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_SysWMinfo]]\r\n .[[SDL_SysWMmsg]]\r\n\r\n== Related Functions ==\r\n .[[SDL_EventState]]\r\n .[[SDL_GetWindowWMInfo]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_SysWMinfo",
      "Uri": "https://wiki.libsdl.org/SDL_SysWMinfo",
      "Categories": [
        "CategoryStruct",
        "CategorySWM"
      ],
      "LastUpdate": "2021-01-16T14:06:06.919914-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SysWMinfo =\r\nA structure that contains system-dependent information about a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''All Subsystems''||\r\n||[[SDL_version]]||'''version'''||an [[SDL_version]] structure that contains the current SDL version||\r\n||[[SDL_SYSWM_TYPE]]||'''subsystem'''||the windowing system type; see [[#Remarks|Remarks]] for details||\r\n||<style=\"color: #808080;\">int||<style=\"color: #808080;\">'''dummy'''||<style=\"color: #808080;\">unused (to help compilers when no specific system is available)||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_WINDOWS''||\r\n||HWND||'''win.window'''||the window handle||\r\n||HDC ||'''win.hdc'''   ||the window device context (>= SDL 2.0.4)||\r\n||HINSTANCE ||'''win.hinstance'''   ||the window hinstance (>= SDL 2.0.6)||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_WINRT'' (>= SDL 2.0.3)||\r\n||IInspectable*||'''winrt.window'''||the WinRT !CoreWindow||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_X11''||\r\n||Display*||'''x11.display'''||the X11 display||\r\n||Window||'''x11.window'''||the X11 window||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_DIRECTFB''||\r\n||IDirectFB*||'''dfb.dfb'''||the DirectFB main interface||\r\n||IDirectFBWindow*||'''dfb.window'''||the DirectFB window handle||\r\n||IDirectFBSurface*||'''dfb.surface'''||the DirectFB client surface||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_COCOA''||\r\n||NSWindow*||'''cocoa.window'''||the Cocoa window||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_UIKIT''||\r\n||UIWindow*||'''uikit.window'''||the UIKit window||\r\n||GLuint   ||'''uikit.framebuffer''' ||the GL view's Framebuffer Object; it must be bound when rendering to the screen using GL (>= SDL 2.0.4)||\r\n||GLuint   ||'''uikit.colorbuffer''' ||the GL view's color Renderbuffer Object; it must be bound when [[SDL_GL_SwapWindow]]() is called (>= SDL 2.0.4)||\r\n||GLuint   ||'''uikit.resolveFramebuffer''' ||the Framebuffer Object which holds the resolve color Renderbuffer, when MSAA is used (>= SDL 2.0.4)||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_WAYLAND'' (>= SDL 2.0.2)||\r\n||wl_display*||'''wl.display'''||the Wayland display||\r\n||wl_surface*||'''wl.surface'''||the Wayland surface||\r\n||wl_shell_surface*||'''wl.shell_surface'''||the Wayland shell_surface (window manager handle)||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_MIR'' (>= SDL 2.0.2)||\r\n||!MirConnection*||'''mir.connection'''||the Mir display server connection||\r\n||!MirSurface*||'''mir.surface'''||the Mir surface||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_ANDROID'' (>= SDL 2.0.4)||\r\n||ANativeWindow*||'''android.window'''||the Android native window||\r\n||EGLSurface||'''android.surface'''||the Android EGL surface||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_VIVANTE'' (>= SDL 2.0.5)||\r\n||EGLNativeDisplayType||'''vivante.display'''||the Vivante EGL display type||\r\n||EGLNativeWindowType||'''vivante.window'''||the Vivante EGL window type||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis structure is filled in by [[SDL_GetWindowWMInfo]]().\r\n\r\nThis structure holds low level information about the window and '''subsystem''' is set to the windowing system in use, one of:\r\n<<Include(SDL_SYSWM_TYPE, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Enumerations ==\r\n .[[SDL_SYSWM_TYPE]]\r\n\r\n== Related Structures ==\r\n .[[SDL_version]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowWMInfo]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategorySWM]]\r\n"
    },
    {
      "Name": "SDL_SysWMmsg",
      "Uri": "https://wiki.libsdl.org/SDL_SysWMmsg",
      "Categories": [
        "CategoryStruct",
        "CategorySWM"
      ],
      "LastUpdate": "2021-01-16T14:06:07.7051554-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SysWMmsg =\r\nA structure that contains system-dependent window manager messages.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||||||<bgcolor=\"#EDEDED\">''All Subsystems''||\r\n||[[SDL_version]]||'''version'''||an [[SDL_version]] structure that contains the current SDL version||\r\n||[[SDL_SYSWM_TYPE]]||'''subsystem'''||the windowing system type; see [[#Remarks|Remarks]] for details||\r\n||<style=\"color: #808080;\">int||<style=\"color: #808080;\">'''dummy'''||<style=\"color: #808080;\">unused (to help compilers when no specific system is available)||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_WINDOWS''||\r\n||HWND||'''win.hwnd'''||the window for the message||\r\n||UINT||'''win.msg'''||the type of message||\r\n||WPARAM||'''win.wParam'''||WORD message parameter||\r\n||LPARAM||'''win.lParam'''||LONG message parameter||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_X11''||\r\n||XEvent||'''x11.event'''||the native x11 event structure||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_DIRECTFB''||\r\n||DFBEvent||'''dfb.event'''||the DirectFB event||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_COCOA''||\r\n||<style=\"color: #808080;\">int||<style=\"color: #808080;\">'''cocoa.dummy'''||<style=\"color: #808080;\">unused (>= SDL 2.0.4)||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_UIKIT''||\r\n||<style=\"color: #808080;\">int||<style=\"color: #808080;\">'''uikit.dummy'''||<style=\"color: #808080;\">unused (>= SDL 2.0.4)||\r\n||||||<bgcolor=\"#EDEDED\">''SDL_SYSWM_VIVANTE''||\r\n||<style=\"color: #808080;\">int||<style=\"color: #808080;\">'''vivante.dummy'''||<style=\"color: #808080;\">unused (>= SDL 2.0.5)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''subsystem''' may be one of the following:\r\n<<Include(SDL_SYSWM_TYPE, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\nThere are currently no Cocoa or UIKit window events.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_SYSWM_TYPE]]\r\n\r\n== Related Structures ==\r\n .[[SDL_version]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategorySWM]]\r\n"
    },
    {
      "Name": "SDL_TextEditingEvent",
      "Uri": "https://wiki.libsdl.org/SDL_TextEditingEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:06:08.4313658-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_TextEditingEvent =\r\nA structure that contains keyboard text editing event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_TEXTEDITING||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32||'''windowID'''||the window with keyboard focus, if any||\r\n||char[32]||'''text'''||the null-terminated editing text in UTF-8 encoding||\r\n||Sint32||'''start'''||the location to begin editing from||\r\n||Sint32||'''length'''||the number of characters to edit from the start point||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_TextEditingEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_TEXTEDITING is reported.  You would access it through the event's `edit` field.\r\n\r\nThere is a [[Tutorials/TextInput|tutorial]].\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n .[[SDL_TextInputEvent]]\r\n\r\n== Related Functions ==\r\n .[[SDL_StartTextInput]]\r\n .[[SDL_StopTextInput]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_TextInputEvent",
      "Uri": "https://wiki.libsdl.org/SDL_TextInputEvent",
      "Categories": [],
      "LastUpdate": "2021-01-16T14:06:14.1114059-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_TextInputEvent =\r\nA structure that contains keyboard text input event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32 ||'''type''' ||SDL_TEXTINPUT ||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32 ||'''windowID''' ||the window with keyboard focus, if any ||\r\n||char[32] ||'''text''' ||the null-terminated input text in UTF-8 encoding ||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_TextInputEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_TEXTINPUT is reported. You would access it through the event's `text` field.\r\n\r\nThere is a [[Tutorials/TextInput|tutorial]].\r\n\r\n'''Detailed explanation''' (from [[http://lists.libsdl.org/pipermail/sdl-libsdl.org/2013-August/090073.html|SDL mailing list]] by Jiang Jiang <gzjjgod at gmail.com>)\r\n\r\n{{{\r\nIn a typical GUI application, the OS will be responsible for telling\r\nyou the candidate text (via SDL_TEXTEDITING), you can choose how (and\r\nwhere) to show it in your UI.\r\nLet's say with an input method I typed \"abc\" and got unicode character\r\n\"X\", the SDL application will first receive three SDL_TEXTEDITING\r\nevents with 'a', 'ab' and 'abc', then finally receive SDL_TEXTINPUT\r\nevent with unicode character 'X'.\r\nDuring this text compositing process, user can press any arbitrary\r\nkeys such as Function, backspace, both the SDL application and OS\r\ninput method will receive it and decide whether to deal with these\r\nkeys or not. For instance when user press backspace, most input\r\nmethods will delete the last candidate character typed and SDL app\r\nwill receive a new SDL_TEXTEDITING event (let's say user typed a, b,\r\nbackspace, c, then the application will receive 4 events containing\r\n'a', 'ab', 'a', 'ac' each).\r\n\r\n[[SDL_SetTextInputRect]]() gives the OS a hint for where to show the\r\ncandidate text list, since the OS doesn't know where you want to draw\r\nthe text you received via SDL_TEXTEDITING event.\r\n}}}\r\n\r\n== Related Enumerations ==\r\n . [[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n . [[SDL_Event]]\r\n . [[SDL_TextEditingEvent]]\r\n\r\n== Related Functions ==\r\n . [[SDL_StartTextInput]]\r\n . [[SDL_StopTextInput]]\r\n\r\n----\r\nCategoryStruct, CategoryEvents\r\n"
    },
    {
      "Name": "SDL_Texture",
      "Uri": "https://wiki.libsdl.org/SDL_Texture",
      "Categories": [],
      "LastUpdate": "2021-01-16T14:06:56.7572608-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_Texture =\r\nA structure that contains an efficient, driver-specific representation of pixel data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTexture]]\r\n .[[SDL_CreateTextureFromSurface]]\r\n .[[SDL_DestroyTexture]]\r\n .[[SDL_GetTextureAlphaMod]]\r\n .[[SDL_GetTextureBlendMode]]\r\n .[[SDL_GetTextureColorMod]]\r\n .[[SDL_LockTexture]]\r\n .[[SDL_QueryTexture]]\r\n .[[SDL_RenderCopy]]\r\n .[[SDL_SetTextureAlphaMod]]\r\n .[[SDL_SetTextureBlendMode]]\r\n .[[SDL_SetTextureColorMod]]\r\n .[[SDL_UnlockTexture]]\r\n .[[SDL_UpdateTexture]]\r\n\r\n----\r\nCategoryStruct, CategoryRender\r\n"
    },
    {
      "Name": "SDL_TouchFingerEvent",
      "Uri": "https://wiki.libsdl.org/SDL_TouchFingerEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:06:57.4809009-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_TouchFingerEvent =\r\nA structure that contains finger touch event information.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_FINGERMOTION, SDL_FINGERDOWN, or SDL_FINGERUP||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||SDL_TouchID||'''touchId'''||the touch device id||\r\n||SDL_FingerID||'''fingerId'''||the finger id||\r\n||float||'''x'''||the x-axis location of the touch event, normalized (0...1)||\r\n||float||'''y'''||the y-axis location of the touch event, normalized (0...1)||\r\n||float||'''dx'''||the distance moved in the x-axis, normalized (-1...1)||\r\n||float||'''dy'''||the distance moved in the y-axis, normalized (-1...1)||\r\n||float||'''pressure'''||the quantity of pressure applied, normalized (0...1)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_TouchFingerEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_FINGERMOTION, SDL_FINGERDOWN, or SDL_FINGERUP is reported.  You would access it through the event's `tfinger` field.\r\n\r\n\r\n== Version ==\r\nThis structure is available since SDL 2.0.0.\r\n\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_UserEvent",
      "Uri": "https://wiki.libsdl.org/SDL_UserEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:06:58.1809677-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_UserEvent =\r\nA structure that contains an application-defined event type.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||value obtained from [[SDL_RegisterEvents]]()||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32||'''windowID'''||the associated window, if any||\r\n||Sint32||'''code'''||user defined event code||\r\n||void*||'''data1'''||user defined data pointer||\r\n||void*||'''data2'''||user defined data pointer||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nUint32 myEventType = SDL_RegisterEvents(1);\r\nif (myEventType != ((Uint32)-1)) {\r\n    SDL_Event event;\r\n    SDL_memset(&event, 0, sizeof(event)); /* or SDL_zero(event) */\r\n    event.type = myEventType;\r\n    event.user.code = my_event_code;\r\n    event.user.data1 = significant_data;\r\n    event.user.data2 = 0;\r\n    SDL_PushEvent(&event);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_UserEvent]] is in the '''user''' member of the [[SDL_Event]] union. This event is unique; it is never created by SDL but only by the application. The event can be pushed onto the event queue using [[SDL_PushEvent]](). The contents of the structure members are completely up to the programmer; the only requirement is that '''type''' is a value obtained from [[SDL_RegisterEvents]]().\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n\r\n== Related Functions ==\r\n .[[SDL_PushEvent]]\r\n .[[SDL_RegisterEvents]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_WindowEvent",
      "Uri": "https://wiki.libsdl.org/SDL_WindowEvent",
      "Categories": [
        "CategoryStruct",
        "CategoryEvents",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:06:58.8993896-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WindowEvent =\r\nA structure that contains window state change event data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint32||'''type'''||SDL_WINDOWEVENT||\r\n||Uint32||'''timestamp'''||timestamp of the event||\r\n||Uint32||'''windowID'''||the associated window||\r\n||Uint8||'''event'''||[[SDL_WindowEventID]]||\r\n||Sint32||'''data1'''||event dependent data||\r\n||Sint32||'''data2'''||event dependent data||\r\n\r\n== Code Examples ==\r\n##Example1 Start\r\n{{{#!highlight cpp\r\nvoid PrintEvent(const SDL_Event * event)\r\n{\r\n    if (event->type == SDL_WINDOWEVENT) {\r\n        switch (event->window.event) {\r\n        case SDL_WINDOWEVENT_SHOWN:\r\n            SDL_Log(\"Window %d shown\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_HIDDEN:\r\n            SDL_Log(\"Window %d hidden\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_EXPOSED:\r\n            SDL_Log(\"Window %d exposed\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_MOVED:\r\n            SDL_Log(\"Window %d moved to %d,%d\",\r\n                    event->window.windowID, event->window.data1,\r\n                    event->window.data2);\r\n            break;\r\n        case SDL_WINDOWEVENT_RESIZED:\r\n            SDL_Log(\"Window %d resized to %dx%d\",\r\n                    event->window.windowID, event->window.data1,\r\n                    event->window.data2);\r\n            break;\r\n        case SDL_WINDOWEVENT_SIZE_CHANGED:\r\n            SDL_Log(\"Window %d size changed to %dx%d\",\r\n                    event->window.windowID, event->window.data1,\r\n                    event->window.data2);\r\n            break;\r\n        case SDL_WINDOWEVENT_MINIMIZED:\r\n            SDL_Log(\"Window %d minimized\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_MAXIMIZED:\r\n            SDL_Log(\"Window %d maximized\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_RESTORED:\r\n            SDL_Log(\"Window %d restored\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_ENTER:\r\n            SDL_Log(\"Mouse entered window %d\",\r\n                    event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_LEAVE:\r\n            SDL_Log(\"Mouse left window %d\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_FOCUS_GAINED:\r\n            SDL_Log(\"Window %d gained keyboard focus\",\r\n                    event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_FOCUS_LOST:\r\n            SDL_Log(\"Window %d lost keyboard focus\",\r\n                    event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_CLOSE:\r\n            SDL_Log(\"Window %d closed\", event->window.windowID);\r\n            break;\r\n#if SDL_VERSION_ATLEAST(2, 0, 5)\r\n        case SDL_WINDOWEVENT_TAKE_FOCUS:\r\n            SDL_Log(\"Window %d is offered a focus\", event->window.windowID);\r\n            break;\r\n        case SDL_WINDOWEVENT_HIT_TEST:\r\n            SDL_Log(\"Window %d has a special hit test\", event->window.windowID);\r\n            break;\r\n#endif\r\n        default:\r\n            SDL_Log(\"Window %d got unknown event %d\",\r\n                    event->window.windowID, event->window.event);\r\n            break;\r\n        }\r\n    }\r\n}\r\n}}}\r\n##End Example1\r\n\r\n== Remarks ==\r\n[[SDL_WindowEvent]] is a member of the [[SDL_Event]] union and is used when an event of type SDL_WINDOWEVENT is reported.  You would access it through the event's `window` field.\r\n\r\n== Related Enumerations ==\r\n .[[SDL_EventType]]\r\n .[[SDL_WindowEventID]]\r\n\r\n== Related Structures ==\r\n .[[SDL_Event]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryEvents]], [[CategoryVideo]]\r\n\r\n##Actually from the SDL_events.h header but listed in both categories for the wiki.\r\n"
    },
    {
      "Name": "SDL_assert_data",
      "Uri": "https://wiki.libsdl.org/SDL_assert_data",
      "Categories": [
        "CategoryStruct",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T14:06:59.6509131-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n#acl All:read\r\n\r\n= SDL_assert_data =\r\nA structure that contains information about an assertion.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||int||'''always_ignore'''||1 if set, 0 otherwise||\r\n||unsigned int||'''trigger_count'''||number of times this assertion was triggered||\r\n||const char*||'''condition'''||the assertion condition to check||\r\n||const char*||'''filename'''||the file containing the assertion||\r\n||int||'''linenum'''||the location of the assertion in the file||\r\n||const char*||'''function'''||the function containing the assertion||\r\n||const struct SDL_assert_data*||'''next'''||Pointer to next triggered assertion's info||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis structure is filled in with information about the assertion and is used by the assertion handler then added to the assertion report. This is returned as a linked list from [[SDL_GetAssertionReport]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_assert]]\r\n .[[SDL_assert_paranoid]]\r\n .[[SDL_assert_release]]\r\n .[[SDL_GetAssertionReport]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_atomic_t",
      "Uri": "https://wiki.libsdl.org/SDL_atomic_t",
      "Categories": [
        "CategoryStruct",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:07:05.3039162-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_atomic_t =\r\nA structure representing an atomic integer value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||int||'''value'''||the atomic integer value||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n/* This is a simple fps counter program\r\n *\r\n * Timers in SDL are run in a separate thread\r\n * so effort is needed to avoid data races\r\n */\r\nSDL_atomic_t frames;\r\n\r\n/* Calculate and display the average framerate over the set interval */\r\nUint32 fps_timer_callback(Uint32 interval, void *data)\r\n{\r\n\tconst float f = SDL_AtomicGet(&frames);\r\n\tconst float iv = interval * 0.001f;\r\n\r\n\t/* Note: the thread safety of printf is ambiguous across platforms */\r\n\tprintf(\"%.2f\\tfps\\n\", f / iv);\r\n\r\n\t/* Reset frame counter */\r\n\tSDL_AtomicSet(&frames, 0);\r\n\r\n\treturn interval;\r\n}\r\n\r\nint main(int argc, char **argv)\r\n{\r\n\tSDL_Init(SDL_INIT_EVERYTHING);\r\n\tSDL_Window *win = SDL_CreateWindow(\"Counter\",\r\n\t\t\tSDL_WINDOWPOS_CENTERED,\r\n\t\t\tSDL_WINDOWPOS_CENTERED,\r\n\t\t\t640,\r\n\t\t\t480,\r\n\t\t\t0\r\n\t\t\t);\r\n\r\n\tSDL_Surface *screen = SDL_GetWindowSurface(win);\r\n\r\n\t/* Our timer will be run every five seconds in a separate thread */\r\n\tSDL_AddTimer(5000, fps_timer_callback, NULL);\r\n\r\n\tSDL_Event e;\r\n\twhile(1) {\r\n\t\twhile (SDL_PollEvent(&e)) {\r\n\t\t\tif (e.type == SDL_QUIT) {\r\n\t\t\t\tgoto quit;\r\n\t\t\t}\r\n\t\t}\r\n\t\tSDL_FillRect(screen, NULL, 0xffffffff);\r\n\t\tSDL_UpdateWindowSurface(win);\r\n\r\n\t\t/* Add one frame */\r\n\t\tSDL_AtomicAdd(&frames, 1);\r\n\t}\r\nquit:\r\n\tSDL_DestroyWindow(win);\r\n\tSDL_Quit();\r\n\treturn 0;\r\n}\r\n\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_atomic_t]] is a structure so people don't accidentally use numeric operations on it.  Instead, you should use the atomic operation functions to work with the integer value.  \r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicAdd]]\r\n .[[SDL_AtomicCAS]]\r\n .[[SDL_AtomicDecRef]]\r\n .[[SDL_AtomicGet]]\r\n .[[SDL_AtomicIncRef]]\r\n .[[SDL_AtomicSet]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_version",
      "Uri": "https://wiki.libsdl.org/SDL_version",
      "Categories": [
        "CategoryStruct",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T14:07:06.0231104-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_version =\r\nA structure that contains information about the version of SDL in use.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Data Fields ==\r\n||Uint8 ||'''major''' ||major version ||\r\n||Uint8 ||'''minor''' ||minor version ||\r\n||Uint8 ||'''patch''' ||update version (patchlevel)||\r\n\r\n== Code Examples ==\r\n<<Include(SDL_GetVersion, , , from=\"== Code Examples ==\", to=\"== Remarks\")>>\r\n\r\n== Remarks ==\r\nRepresents the library's version as three levels:\r\n\r\n * major revision (increments with massive changes, additions, and enhancements)\r\n * minor revision (increments with backwards-compatible changes to the major revision), and\r\n * patchlevel (increments with fixes to the minor revision)\r\n\r\nThe macro [[SDL_VERSION]] can be used to populate this structure with information. \r\n\r\n== Related Macros ==\r\n .[[SDL_COMPILEDVERSION]]\r\n .[[SDL_VERSION]]\r\n .[[SDL_VERSIONNUM]]\r\n .[[SDL_VERSION_ATLEAST]]\r\n\r\n== Related Functions ==\r\n . [[SDL_GetVersion]]\r\n\r\n----\r\n[[CategoryStruct]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_AddEventWatch",
      "Uri": "https://wiki.libsdl.org/SDL_AddEventWatch",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:07:06.7101219-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AddEventWatch =\r\nUse this function to add a callback to be triggered when an event is added to the event queue.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_AddEventWatch(SDL_EventFilter filter,\r\n                       void*           userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''filter'''||the function to call when an event happens; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||a pointer that is passed to '''filter'''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Include(SDL_SetEventFilter, , , from=\"Start Include here.\", to=\"##End Include here\")>>\r\n . where `YourEventFilter` is the name of your function and its parameters are:\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_AddEventWatch]]()||\r\n ||`event`||the event that triggered the callback||\r\n\r\n . '''filter''' will be called when an event happens, and its return value is ignored.\r\n\r\n/!\\ WARNING: Be very careful of what you do in the event filter function, as it may run in a different thread!\r\n\r\nIf the quit event is generated by a signal (e.g. SIGINT), it will bypass the internal queue and be delivered to the watch callback immediately, and arrive at the next event poll.\r\n\r\nNote: the callback is called for events posted by the user through [[SDL_PushEvent]](), but not for disabled events, nor for events by a filter callback set with [[SDL_SetEventFilter]](), nor for events posted by the user through [[SDL_PeepEvents]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_DelEventWatch]]\r\n .[[SDL_SetEventFilter]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_AddHintCallback",
      "Uri": "https://wiki.libsdl.org/SDL_AddHintCallback",
      "Categories": [
        "CategoryAPI",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:07:07.4101992-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_AddHintCallback =\r\nUse this function to add a function to watch a particular hint.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_AddHintCallback(const char*      name,\r\n                         SDL_HintCallback callback,\r\n                         void*            userdata)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''name'''||the hint to watch||\r\n||'''callback'''||the function to call when the hint value changes||\r\n||'''userdata'''||a pointer to pass to the callback function||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe function prototype for '''callback''' is:\r\n {{{#!highlight cpp\r\nvoid SDL_HintCallback(void*       userdata,\r\n                      const char* name,\r\n                      const char* oldValue,\r\n                      const char* newValue)\r\n}}}\r\n . where its parameters are:\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_AddHintCallback]]()||\r\n ||`name`||what was passed as '''name''' to [[SDL_AddHintCallback]]()||\r\n ||`oldValue`||the old value||\r\n ||`newValue`||the new value||\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_DelHintCallback]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_AddTimer",
      "Uri": "https://wiki.libsdl.org/SDL_AddTimer",
      "Categories": [
        "CategoryAPI",
        "CategoryTimer"
      ],
      "LastUpdate": "2021-01-16T14:07:08.1331207-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AddTimer =\r\nUse this function to set up a callback function to be run on a separate thread after the specified number of milliseconds has elapsed.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_TimerID SDL_AddTimer(Uint32            interval,\r\n                         SDL_TimerCallback callback,\r\n                         void*             param)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''interval'''||the timer delay (ms) passed to '''callback'''||\r\n||'''callback'''||the function to call when the specified '''interval''' elapses; see [[#Remarks|Remarks]] for details||\r\n||'''param'''||a pointer that is passed to '''callback'''||\r\n\r\n== Return Value ==\r\nReturns a timer ID or 0 if an error occurs; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n\r\n{{{#!highlight cpp\r\n/* Start the timer; the callback below will be executed after the delay */\r\n\r\nUint32 delay = (33 / 10) * 10;  /* To round it down to the nearest 10 ms */\r\nSDL_TimerID my_timer_id = SDL_AddTimer(delay, my_callbackfunc, my_callback_param);\r\n\r\n...\r\n\r\nUint32 my_callbackfunc(Uint32 interval, void *param)\r\n{\r\n    SDL_Event event;\r\n    SDL_UserEvent userevent;\r\n\r\n    /* In this example, our callback pushes an SDL_USEREVENT event\r\n    into the queue, and causes our callback to be called again at the\r\n    same interval: */\r\n\r\n    userevent.type = SDL_USEREVENT;\r\n    userevent.code = 0;\r\n    userevent.data1 = NULL;\r\n    userevent.data2 = NULL;\r\n\r\n    event.type = SDL_USEREVENT;\r\n    event.user = userevent;\r\n\r\n    SDL_PushEvent(&event);\r\n    return(interval);\r\n}\r\n}}}\r\nNote that it is possible to avoid the multithreading problems with SDL timers by giving to `userevent.data1` the address of a function you want to be executed and to `userevent.data2` its params, and then deal with it in the event loop.\r\n{{{#!highlight cpp\r\n/* with the same code as before: */\r\nUint32 my_callbackfunc(Uint32 interval, void *param)\r\n{\r\n    SDL_Event event;\r\n    SDL_UserEvent userevent;\r\n\r\n    /* In this example, our callback pushes a function\r\n    into the queue, and causes our callback to be called again at the\r\n    same interval: */\r\n\r\n    userevent.type = SDL_USEREVENT;\r\n    userevent.code = 0;\r\n    userevent.data1 = &my_function;\r\n    userevent.data2 = param;\r\n\r\n    event.type = SDL_USEREVENT;\r\n    event.user = userevent;\r\n\r\n    SDL_PushEvent(&event);\r\n    return(interval);\r\n}\r\n\r\n/* Now the event loop */\r\nSDL_Event event;\r\nwhile (SDL_PollEvent (&event))\r\n{\r\n    switch(event.type)\r\n    {\r\n        case SDL_USEREVENT: {\r\n            /* and now we can call the function we wanted to call in the timer but couldn't because of the multithreading problems */\r\n            void (*p) (void*) = event.user.data1;\r\n            p(event.user.data2);\r\n            break;\r\n        }\r\n        /* ... */\r\n    }\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n\r\nIf you use this function, you must pass SDL_INIT_TIMER to [[SDL_Init]]().\r\n\r\nThe callback function is passed the current timer interval and the user supplied parameter from the [[SDL_AddTimer]]() call and should return the next timer interval. If the value returned from the callback is 0, the timer is canceled.\r\n\r\nThe callback is run on a separate thread. See the code examples for a method of processing the timer callbacks on the main thread if that's desired.\r\n\r\nTimers take into account the amount of time it took to execute the callback. For example, if the callback took 250 ms to execute and returned 1000 (ms), the timer would only wait another 750 ms before its next iteration.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_RemoveTimer]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryTimer]]\r\n"
    },
    {
      "Name": "SDL_AllocFormat",
      "Uri": "https://wiki.libsdl.org/SDL_AllocFormat",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:07:08.895332-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AllocFormat =\r\nUse this function to create an [[SDL_PixelFormat]] structure corresponding to a pixel format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_PixelFormat* SDL_AllocFormat(Uint32 pixel_format)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''pixel_format'''||one of the [[SDL_PixelFormatEnum]] values; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns the new [[SDL_PixelFormat]] structure or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''pixel_format''' may be one of the following:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\nReturned structure may come from a shared global cache (i.e. not newly allocated), and hence should not be modified, especially the palette. Weird errors such as {{{Blit combination not supported}}} may occur.\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeFormat]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_AllocPalette",
      "Uri": "https://wiki.libsdl.org/SDL_AllocPalette",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:07:14.5538477-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AllocPalette =\r\nUse this function to create a palette structure with the specified number of color entries.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Palette* SDL_AllocPalette(int ncolors)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''ncolors'''||represents the number of color entries in the color palette||\r\n\r\n== Return Value ==\r\nReturns a new [[SDL_Palette]] structure on success or NULL on failure (e.g. if there wasn't enough memory); call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe palette entries are initialized to white.\r\n\r\n== Related Functions ==\r\n .[[SDL_FreePalette]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_AllocRW",
      "Uri": "https://wiki.libsdl.org/SDL_AllocRW",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:07:15.2630614-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_AllocRW =\r\nUse this function to allocate an empty, unpopulated [[SDL_RWops]] structure.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_RWops* SDL_AllocRW(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a pointer to the allocated memory on success, or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"stdlib.h\"\r\n#include \"SDL.h\"\r\n\r\n/* These functions should not be used except from pointers in an SDL_RWops */\r\nstatic Sint64 mysizefunc(SDL_RWops * context)\r\n{\r\n  return -1;\r\n}\r\n\r\nstatic Sint64 myseekfunc(SDL_RWops *context, Sint64 offset, int whence)\r\n{\r\n  return SDL_SetError(\"Can't seek in this kind of SDL_RWops\");\r\n}\r\n\r\nstatic size_t myreadfunc(SDL_RWops *context, void *ptr, size_t size, size_t maxnum)\r\n{\r\n  SDL_memset(ptr,0,size*maxnum);\r\n  return maxnum;\r\n}\r\n\r\nstatic size_t mywritefunc(SDL_RWops *context, const void *ptr, size_t size, size_t num)\r\n{\r\n  return num;\r\n}\r\n\r\nstatic int myclosefunc(SDL_RWops *context)\r\n{\r\n  if(context->type != 0xdeadbeef)\r\n  {\r\n    return SDL_SetError(\"Wrong kind of SDL_RWops for myclosefunc()\");\r\n  }\r\n\r\n  free(context->hidden.unknown.data1);\r\n  SDL_FreeRW(context);\r\n  return 0;\r\n}\r\n\r\nSDL_RWops *MyCustomRWop()\r\n{\r\n  SDL_RWops *c=SDL_AllocRW();\r\n  if(c==NULL) return NULL;\r\n\r\n  c->size =mysizefunc;\r\n  c->seek =myseekfunc;\r\n  c->read =myreadfunc;\r\n  c->write=mywritefunc;\r\n  c->close=myclosefunc;\r\n  c->type =0xdeadbeef;\r\n  c->hidden.unknown.data1=malloc(256);\r\n  return c;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nApplications do not need to use this function unless they are providing their own [[SDL_RWops]] implementation. If you just need a SDL_RWops to read/write a common data source, you should use the built-in implementations in SDL, like [[SDL_RWFromFile]]() or [[SDL_RWFromMem]](), etc.\r\n\r\nYou must free the returned pointer with [[SDL_FreeRW]](). Depending on your operating system and compiler, there may be a difference between the malloc() and free() your program uses and the versions SDL calls internally. Trying to mix the two can cause crashing such as segmentation faults. Since all SDL_RWops must free themselves when their '''close''' method is called, all SDL_RWops must be allocated through this function, so they can all be freed correctly with [[SDL_FreeRW]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeRW]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_AndroidGetActivity",
      "Uri": "https://wiki.libsdl.org/SDL_AndroidGetActivity",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:07:56.7889053-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_AndroidGetActivity =\r\nUse this function to retrieve the Java instance of the activity class in an Android application.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_AndroidGetActivity()\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the jobject representing the instance of the Activity class of the Android application, or NULL on error.\r\n\r\nThe jobject returned by the function is a local reference and must be released by the caller. See the !PushLocalFrame() and !PopLocalFrame() or !DeleteLocalRef() functions of the Java native interface ([[http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html|in Oracle's documentation]]).\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n#include <jni.h>\r\n\r\n// This example requires C++ and a custom Java method named \"void showHome()\"\r\n\r\n// Calls the void showHome() method of the Java instance of the activity.\r\nvoid showHome(void)\r\n{\r\n    // retrieve the JNI environment.\r\n    JNIEnv* env = (JNIEnv*)SDL_AndroidGetJNIEnv();\r\n\r\n    // retrieve the Java instance of the SDLActivity\r\n    jobject activity = (jobject)SDL_AndroidGetActivity();\r\n\r\n    // find the Java class of the activity. It should be SDLActivity or a subclass of it.\r\n    jclass clazz(env->GetObjectClass(activity));\r\n\r\n    // find the identifier of the method to call\r\n    jmethodID method_id = env->GetMethodID(clazz, \"showHome\", \"()V\");\r\n\r\n    // effectively call the Java method\r\n    env->CallVoidMethod(activity, method_id);\r\n\r\n    // clean up the local references.\r\n    env->DeleteLocalRef(activity);\r\n    env->DeleteLocalRef(clazz);\r\n\r\n    // Warning (and discussion of implementation details of SDL for Android):\r\n    // Local references are automatically deleted if a native function called\r\n    // from Java side returns. For SDL this native function is main() itself.\r\n    // Therefore references need to be manually deleted because otherwise the\r\n    // references will first be cleaned if main() returns (application exit).\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe prototype of the function in SDL's code actually declares a void* return type, even if the implementation returns a jobject. The rationale being that it allows not to include jni.h in the headers of the SDL.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AndroidGetJNIEnv]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_AndroidGetExternalStoragePath",
      "Uri": "https://wiki.libsdl.org/SDL_AndroidGetExternalStoragePath",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:07:57.4904029-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_AndroidGetExternalStoragePath =\r\nUse this function to get the path used for external storage for this application.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_AndroidGetExternalStoragePath()\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the path used for external storage for this application on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis path is unique to your application, but is public and can be written to by other applications.\r\n\r\nYour external storage path is typically: `/storage/sdcard0/Android/data/your.app.package/files`.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AndroidGetExternalStorageState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_AndroidGetExternalStorageState",
      "Uri": "https://wiki.libsdl.org/SDL_AndroidGetExternalStorageState",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:07:58.2166845-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_AndroidGetExternalStorageState =\r\nUse this function to get the current state of external storage.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_AndroidGetExternalStorageState()\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the current state of external storage on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe current state of external storage, a bitmask of these values: SDL_ANDROID_EXTERNAL_STORAGE_READ, SDL_ANDROID_EXTERNAL_STORAGE_WRITE.\r\n\r\nIf external storage is currently unavailable, this will return 0.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AndroidGetExternalStoragePath]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_AndroidGetInternalStoragePath",
      "Uri": "https://wiki.libsdl.org/SDL_AndroidGetInternalStoragePath",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:07:58.8834577-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_AndroidGetInternalStoragePath =\r\nUse this function to get the path used for internal storage for this application.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_AndroidGetInternalStoragePath()\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the path used for internal storage or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis path is unique to your application and cannot be written to by other applications.\r\n\r\nYour internal storage path is typically: `/data/data/your.app.package/files`.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AndroidGetExternalStorageState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_AndroidGetJNIEnv",
      "Uri": "https://wiki.libsdl.org/SDL_AndroidGetJNIEnv",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:08:04.5348488-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_AndroidGetJNIEnv =\r\nUse this function to retrieve the Java native interface object (JNIEnv) of the current thread on Android builds.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_AndroidGetJNIEnv()\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a pointer to Java native interface object (JNIEnv) to which the current thread is attached, or 0 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n#include <jni.h>\r\n\r\n// This example requires C++ and a custom Java method named \"void showHome()\"\r\n\r\n// Calls the void showHome() method of the Java instance of the activity.\r\nvoid showHome(void)\r\n{\r\n    // retrieve the JNI environment.\r\n    JNIEnv* env = (JNIEnv*)SDL_AndroidGetJNIEnv();\r\n\r\n    // retrieve the Java instance of the SDLActivity\r\n    jobject activity = (jobject)SDL_AndroidGetActivity();\r\n\r\n    // find the Java class of the activity. It should be SDLActivity or a subclass of it.\r\n    jclass clazz(env->GetObjectClass(activity));\r\n\r\n    // find the identifier of the method to call\r\n    jmethodID method_id = env->GetMethodID(clazz, \"showHome\", \"()V\");\r\n\r\n    // effectively call the Java method\r\n    env->CallVoidMethod(activity, method_id);\r\n\r\n    // clean up the local references.\r\n    env->DeleteLocalRef(activity);\r\n    env->DeleteLocalRef(clazz);\r\n\r\n    // Warning (and discussion of implementation details of SDL for Android):\r\n    // Local references are automatically deleted if a native function called\r\n    // from Java side returns. For SDL this native function is main() itself.\r\n    // Therefore references need to be manually deleted because otherwise the\r\n    // references will first be cleaned if main() returns (application exit).\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe prototype of the function in SDL's code actually declare a void* return type, even if the implementation returns a pointer to a JNIEnv. The rationale being that it allows not to include jni.h in the headers of the SDL.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AndroidGetActivity]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n"
    },
    {
      "Name": "SDL_AtomicAdd",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicAdd",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:08:05.1218696-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicAdd =\r\nUse this function to add to an atomic variable.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_AtomicAdd(SDL_atomic_t* a,\r\n                  int           v)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to an [[SDL_atomic_t]] variable to be modified||\r\n||'''v'''||the desired value to add||\r\n\r\n== Return Value ==\r\nReturns the previous value of the atomic variable.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function also acts as a full memory barrier.\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicDecRef]]\r\n .[[SDL_AtomicIncRef]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicCAS",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicCAS",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:08:05.8496216-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicCAS =\r\nUse this function to set an atomic variable to a new value if it is currently an old value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_AtomicCAS(SDL_atomic_t* a,\r\n                       int           oldval,\r\n                       int           newval)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to an [[SDL_atomic_t]] variable to be modified||\r\n||'''oldval'''||the old value||\r\n||'''newval'''||the new value||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n{i} Note: If you don't know what this function is for, you shouldn't use it!\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicCASPtr]]\r\n .[[SDL_AtomicGet]]\r\n .[[SDL_AtomicSet]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicCASPtr",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicCASPtr",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:08:06.5996096-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicCASPtr =\r\nUse this function to set a pointer to a new value if it is currently an old value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_AtomicCASPtr(void** a,\r\n                          void*  oldval,\r\n                          void*  newval)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to a pointer||\r\n||'''oldval'''||the old pointer value||\r\n||'''newval'''||the new pointer value||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the pointer was set, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n{i} Note: If you don't know what this function is for, you shouldn't use it!\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicCAS]]\r\n .[[SDL_AtomicGetPtr]]\r\n .[[SDL_AtomicSetPtr]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicDecRef",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicDecRef",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:08:07.353452-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicDecRef =\r\nUse this function to decrement an atomic variable used as a reference count.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_AtomicDecRef(SDL_atomic_t* a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to an [[SDL_atomic_t]] variable to be modified||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the variable reached zero after decrementing, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicAdd]]\r\n .[[SDL_AtomicIncRef]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicGet",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicGet",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:08:08.0357785-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicGet =\r\nUse this function to get the value of an atomic variable.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_AtomicGet(SDL_atomic_t* a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to an [[SDL_atomic_t]] variable||\r\n\r\n== Return Value ==\r\nReturns the current value of an atomic variable.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicSet]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicGetPtr",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicGetPtr",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:08:13.7110562-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicGetPtr =\r\nUse this function to get the value of a pointer atomically.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_AtomicGetPtr(void** a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to a pointer||\r\n\r\n== Return Value ==\r\nReturns the current value of a pointer.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicCASPtr]]\r\n .[[SDL_AtomicSetPtr]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicIncRef",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicIncRef",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:08:14.5040264-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicIncRef =\r\nUse this function to increment an atomic variable used as a reference count.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_AtomicIncRef(SDL_atomic_t* a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to an [[SDL_atomic_t]] variable to be modified||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicAdd]]\r\n .[[SDL_AtomicDecRef]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicLock",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicLock",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:09:18.1091075-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicLock =\r\nUse this function to lock a spin lock by setting it to a non-zero value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_AtomicLock(SDL_SpinLock* lock)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''lock'''||a pointer to a lock variable||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Include(CategoryAtomic, , , from=\"Start Include here.\", to=\"##End Include here\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicTryLock]]\r\n .[[SDL_AtomicUnlock]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicSet",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicSet",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:09:18.5191779-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicSet =\r\nUse this function to set an atomic variable to a value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_AtomicSet(SDL_atomic_t* a,\r\n                  int           v)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to an [[SDL_atomic_t]] variable to be modified||\r\n||'''v'''||the desired value||\r\n\r\n== Return Value ==\r\nReturns the previous value of the atomic variable.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function also acts as a full memory barrier.\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicGet]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicSetPtr",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicSetPtr",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:09:18.9640798-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicSetPtr =\r\nUse this function to set a pointer to a value atomically.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_AtomicSetPtr(void** a,\r\n                       void*  v)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||a pointer to a pointer||\r\n||'''v'''||the desired pointer value||\r\n\r\n== Return Value ==\r\nReturns the previous value of the pointer.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicCASPtr]]\r\n .[[SDL_AtomicGetPtr]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicTryLock",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicTryLock",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:09:19.3363814-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicTryLock =\r\nUse this function to try to lock a spin lock by setting it to a non-zero value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_AtomicTryLock(SDL_SpinLock* lock)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''lock'''||a pointer to a lock variable||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already held.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Include(CategoryAtomic, , , from=\"Start Include here.\", to=\"##End Include here\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicLock]]\r\n .[[SDL_AtomicUnlock]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AtomicUnlock",
      "Uri": "https://wiki.libsdl.org/SDL_AtomicUnlock",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:09:20.2116299-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AtomicUnlock =\r\nUse this function to unlock a spin lock by setting it to 0.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_AtomicUnlock(SDL_SpinLock* lock)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''lock'''||a pointer to a lock variable||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nAlways returns immediately.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicLock]]\r\n .[[SDL_AtomicTryLock]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_AudioInit",
      "Uri": "https://wiki.libsdl.org/SDL_AudioInit",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:09:25.5283571-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AudioInit =\r\nUse this function to initialize a particular audio driver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_AudioInit(const char* driver_name)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''driver_name'''||the name of the desired audio driver||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint i;\r\n\r\nfor (i = 0; i < SDL_GetNumAudioDrivers(); ++i) {\r\n    const char* driver_name = SDL_GetAudioDriver(i);\r\n    if (SDL_AudioInit(driver_name)) {\r\n        printf(\"Audio driver failed to initialize: %s\\n\", driver_name);\r\n        continue;\r\n    }\r\n    SDL_AudioQuit();\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is used internally, and should not be used unless you have a specific need to designate the audio driver you want to use.  You should normally use [[SDL_Init]]() or [[SDL_InitSubSystem]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_AudioQuit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_AudioQuit",
      "Uri": "https://wiki.libsdl.org/SDL_AudioQuit",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:09:25.931478-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_AudioQuit =\r\nUse this function to shut down audio if you initialized it with [[SDL_AudioInit]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_AudioQuit(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint i;\r\n\r\nfor (i = 0; i < SDL_GetNumAudioDrivers(); ++i) {\r\n    const char* driver_name = SDL_GetAudioDriver(i);\r\n    if (SDL_AudioInit(driver_name)) {\r\n        printf(\"Audio driver failed to initialize: %s\\n\", driver_name);\r\n        continue;\r\n    }\r\n    SDL_AudioQuit();\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is used internally, and should not be used unless you have a specific need to specify the audio driver you want to use. You should normally use [[SDL_Quit]]() or [[SDL_QuitSubSystem]](). \r\n\r\n== Related Functions ==\r\n .[[SDL_AudioInit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_BlitScaled",
      "Uri": "https://wiki.libsdl.org/SDL_BlitScaled",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:09:26.3391047-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_BlitScaled =\r\nUse this function to perform a scaled surface copy to a destination surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_BlitScaled(SDL_Surface*    src,\r\n                   const SDL_Rect* srcrect,\r\n                   SDL_Surface*    dst,\r\n                   SDL_Rect*       dstrect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the [[SDL_Surface]] structure to be copied from||\r\n||'''srcrect'''||the [[SDL_Rect]] structure representing the rectangle to be copied, or NULL to copy the entire surface||\r\n||'''dst'''||the [[SDL_Surface]] structure that is the blit target||\r\n||'''dstrect'''||the [[SDL_Rect]] structure representing the rectangle that is copied into, or NULL to copy into the entire surface||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is the public scaled blit function.  This function calls [[SDL_LowerBlitScaled]]() internally.\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]]\r\n .[[SDL_LowerBlitScaled]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_BlitSurface",
      "Uri": "https://wiki.libsdl.org/SDL_BlitSurface",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:09:26.7044502-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_BlitSurface =\r\nUse this function to perform a fast surface copy to a destination surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_BlitSurface(SDL_Surface*    src,\r\n                    const SDL_Rect* srcrect,\r\n                    SDL_Surface*    dst,\r\n                    SDL_Rect*       dstrect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the [[SDL_Surface]] structure to be copied from||\r\n||'''srcrect'''||the [[SDL_Rect]] structure representing the rectangle to be copied, or NULL to copy the entire surface||\r\n||'''dst'''||the [[SDL_Surface]] structure that is the blit target||\r\n||'''dstrect'''||the [[SDL_Rect]] structure representing the rectangle that is copied into||\r\n\r\n== Return Value ==\r\nReturns 0 if the blit is successful or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_BlitSurface(surface, &source_rect, temp_surface, NULL);\r\n}}}\r\n\r\n== Remarks ==\r\nYou should call [[SDL_BlitSurface]]() unless you know exactly how SDL blitting works internally and how to use the other blit functions.\r\n\r\nThis is the public blit function, and it performs rectangle validation and clipping before passing it to [[SDL_LowerBlit]]().\r\n\r\nThe blit function should not be called on a locked surface.\r\n\r\nThe width and height in '''srcrect''' determine the size of the copied rectangle. Only the position is used in the '''dstrect''' (the width and height are ignored). Blits with negative '''dstrect''' coordinates will be clipped properly.\r\n\r\nIf '''srcrect''' is NULL, the entire surface is copied. If '''dstrect''' is NULL, then the destination position (upper left corner) is (0, 0).\r\n\r\nThe final blit rectangle is saved in '''dstrect''' after all clipping is performed ('''srcrect''' is not modified).\r\n\r\nThe blit semantics for surfaces with and without blending and colorkey are defined as follows:\r\n    RGBA->RGB:\r\n      Source surface blend mode set to SDL_BLENDMODE_BLEND:\r\n        alpha-blend (using the source alpha-channel and per-surface alpha)\r\n        SDL_SRCCOLORKEY ignored.\r\n      Source surface blend mode set to SDL_BLENDMODE_NONE:\r\n        copy RGB.\r\n        if SDL_SRCCOLORKEY set, only copy the pixels matching the\r\n        RGB values of the source color key, ignoring alpha in the\r\n        comparison.\r\n\r\n    RGB->RGBA:\r\n      Source surface blend mode set to SDL_BLENDMODE_BLEND:\r\n        alpha-blend (using the source per-surface alpha)\r\n      Source surface blend mode set to SDL_BLENDMODE_NONE:\r\n        copy RGB, set destination alpha to source per-surface alpha value.\r\n      both:\r\n        if SDL_SRCCOLORKEY set, only copy the pixels matching the\r\n        source color key.\r\n\r\n    RGBA->RGBA:\r\n      Source surface blend mode set to SDL_BLENDMODE_BLEND:\r\n        alpha-blend (using the source alpha-channel and per-surface alpha)\r\n        SDL_SRCCOLORKEY ignored.\r\n      Source surface blend mode set to SDL_BLENDMODE_NONE:\r\n        copy all of RGBA to the destination.\r\n        if SDL_SRCCOLORKEY set, only copy the pixels matching the\r\n        RGB values of the source color key, ignoring alpha in the\r\n        comparison.\r\n\r\n    RGB->RGB:\r\n      Source surface blend mode set to SDL_BLENDMODE_BLEND:\r\n        alpha-blend (using the source per-surface alpha)\r\n      Source surface blend mode set to SDL_BLENDMODE_NONE:\r\n        copy RGB.\r\n      both:\r\n        if SDL_SRCCOLORKEY set, only copy the pixels matching the\r\n        source color key.\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitScaled]]\r\n .[[SDL_LowerBlit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_BuildAudioCVT",
      "Uri": "https://wiki.libsdl.org/SDL_BuildAudioCVT",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:09:27.0828605-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_BuildAudioCVT =\r\nUse this function to initialize an [[SDL_AudioCVT]] structure for conversion.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_BuildAudioCVT(SDL_AudioCVT*   cvt,\r\n                      SDL_AudioFormat src_format,\r\n                      Uint8           src_channels,\r\n                      int             src_rate,\r\n                      SDL_AudioFormat dst_format,\r\n                      Uint8           dst_channels,\r\n                      int             dst_rate)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''cvt'''||an [[SDL_AudioCVT]] structure filled in with audio conversion information||\r\n||'''src_format'''||the source format of the audio data; for more info see [[SDL_AudioFormat]]||\r\n||'''src_channels'''||the number of channels in the source||\r\n||'''src_rate'''||the frequency (samples-frames-per-second) of the source||\r\n||'''dst_format'''||the destination format of the audio data; for more info see [[SDL_AudioFormat]]||\r\n||'''dst_channels'''||the number of channels in the destination||\r\n||'''dst_rate'''||the frequency (samples-frames-per-second) of the destination||\r\n\r\n== Return Value ==\r\nReturns 1 if the audio filter is prepared, 0 if no conversion is needed, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Change 1024 stereo sample frames at 48000Hz from float32 to int16.\r\nSDL_AudioCVT cvt;\r\nSDL_BuildAudioCVT(&cvt, AUDIO_F32, 2, 48000, AUDIO_S16, 2, 48000);\r\nSDL_assert(cvt.needed); // obviously, this one is always needed.\r\ncvt.len = 1024 * 2 * 4;  // 1024 stereo float32 sample frames.\r\ncvt.buf = (Uint8 *) SDL_malloc(cvt.len * cvt.len_mult);\r\n// read your float32 data into cvt.buf here.\r\nSDL_ConvertAudio(&cvt);\r\n// cvt.buf has cvt.len_cvt bytes of converted data now.\r\n}}}\r\n\r\n== Remarks ==\r\nBefore an [[SDL_AudioCVT]] structure can be used to convert audio data it must be initialized with source and destination information.\r\n\r\nThis function will zero out every field of the [[SDL_AudioCVT]], so it must be called before the application fills in the final buffer information.\r\n\r\nOnce this function has returned successfully, and reported that a conversion is necessary, the application fills in the rest of the fields in [[SDL_AudioCVT]], now that it knows how large a buffer it needs to allocate, and then can call [[SDL_ConvertAudio]]() to complete the conversion.\r\n\r\n== Related Functions ==\r\n .[[SDL_ConvertAudio]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_COMPILEDVERSION",
      "Uri": "https://wiki.libsdl.org/SDL_COMPILEDVERSION",
      "Categories": [
        "CategoryAPI",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T14:09:27.490709-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_COMPILEDVERSION =\r\nUse this macro to get the SDL version number that you compiled against.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_COMPILEDVERSION\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Macros ==\r\n .[[SDL_VERSIONNUM]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_CalculateGammaRamp",
      "Uri": "https://wiki.libsdl.org/SDL_CalculateGammaRamp",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:09:32.8361449-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CalculateGammaRamp =\r\nUse this function to calculate a 256 entry gamma ramp for a gamma value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_CalculateGammaRamp(float   gamma,\r\n                            Uint16* ramp)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''gamma'''||a gamma value where 0.0 is black and 1.0 is identity||\r\n||'''ramp'''||an array of 256 values filled in with the gamma ramp||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowGammaRamp]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_CaptureMouse",
      "Uri": "https://wiki.libsdl.org/SDL_CaptureMouse",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:09:33.1721777-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_CaptureMouse =\r\nUse this function to capture the mouse and to track input outside an SDL window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_CaptureMouse(SDL_bool enabled)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''enabled'''||whether or not to enable capturing||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or -1 if not supported; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nCapturing enables your app to obtain mouse events globally, instead of just within your window. Not all video targets support this function. When capturing is enabled, the current window will get all mouse events, but unlike relative mode, no change is made to the cursor and it is not restrained to your window.\r\n\r\nThis function may also deny mouse input to other windows--both those in your application and others on the system--so you should use this function sparingly, and in small bursts. For example, you might want to track the mouse while the user is dragging something, until the user releases a mouse button. It is not recommended that you capture the mouse for long periods of time, such as the entire time your app is running.\r\n\r\nWhile captured, mouse events still report coordinates relative to the current (foreground) window, but those coordinates may be outside the bounds of the window (including negative values). Capturing is only allowed for the foreground window. If the window loses focus while capturing, the capture will be disabled automatically.\r\n\r\nWhile capturing is enabled, the current window will have the [[SDL_WindowFlags|SDL_WINDOW_MOUSE_CAPTURE]] flag set.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetGlobalMouseState]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_ClearError",
      "Uri": "https://wiki.libsdl.org/SDL_ClearError",
      "Categories": [
        "CategoryAPI",
        "CategoryError"
      ],
      "LastUpdate": "2021-01-16T14:09:33.5199094-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ClearError =\r\nUse this function to clear any previous error message.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_ClearError(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nconst char *error = SDL_GetError();\r\nif (*error) {\r\n  SDL_Log(\"SDL error: %s\", error);\r\n  SDL_ClearError();\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetError]]\r\n .[[SDL_SetError]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryError]]\r\n"
    },
    {
      "Name": "SDL_ClearHints",
      "Uri": "https://wiki.libsdl.org/SDL_ClearHints",
      "Categories": [
        "CategoryAPI",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:09:33.9560603-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ClearHints =\r\nUse this function to clear all hints.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_ClearHints(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is automatically called during [[SDL_Quit]]().\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_ClearQueuedAudio",
      "Uri": "https://wiki.libsdl.org/SDL_ClearQueuedAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:09:34.3251916-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_ClearQueuedAudio =\r\nUse this function to drop any queued audio data waiting to be sent to the hardware.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_ClearQueuedAudio(SDL_AudioDeviceID dev)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''dev'''||the device ID of which to clear the audio queue||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nImmediately after this call, [[SDL_GetQueuedAudioSize]]() will return 0 and the hardware will start playing silence if more audio isn't queued.\r\n\r\nThis will not prevent playback of queued audio that's already been sent to the hardware, as we can not undo that, so expect there to be some fraction of a second of audio that might still be heard. This can be useful if you want to, say, drop any pending music during a level change in your game.\r\n\r\nYou may not queue audio on a device that is using an application-supplied callback; calling this function on such a device is always a no-op.\r\nYou have to use the audio callback or queue audio with [[SDL_QueueAudio]](), but not both.\r\n\r\nYou should not call [[SDL_LockAudio]]() on the device before clearing the queue; SDL handles locking internally for this function.\r\n\r\nThis function always succeeds and thus returns void.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetQueuedAudioSize]]\r\n .[[SDL_QueueAudio]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_CloseAudio",
      "Uri": "https://wiki.libsdl.org/SDL_CloseAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:09:34.6798505-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_CloseAudio =\r\nThis function is a legacy means of closing the audio device. New programs might want to use [[SDL_CloseAudioDevice]]() instead.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_CloseAudio(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_AudioSpec want;\r\nif (SDL_OpenAudio(&want, NULL) == 0) {\r\n    SDL_PauseAudio(0);\r\n    SDL_Delay(5000);  // let audio callback run for 5 seconds.\r\n    SDL_CloseAudio();\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is equivalent to calling\r\n\r\n{{{#!highlight cpp\r\nSDL_CloseAudioDevice(1);\r\n}}}\r\n\r\nand is only useful if you used the legacy [[SDL_OpenAudio]]() function.\r\n\r\n== Related Functions ==\r\n . [[SDL_OpenAudio]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_CloseAudioDevice",
      "Uri": "https://wiki.libsdl.org/SDL_CloseAudioDevice",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:09:39.9867153-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_CloseAudioDevice =\r\nUse this function to shut down audio processing and close the audio device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_CloseAudioDevice(SDL_AudioDeviceID dev)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dev'''||an audio device previously opened with [[SDL_OpenAudioDevice]]()||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_AudioSpec want;\r\nSDL_AudioDeviceID devid = SDL_OpenAudioDevice(NULL, 0, &want, NULL, 0);\r\nif (devid > 0) {\r\n    SDL_PauseAudioDevice(devid, 0);\r\n    SDL_Delay(5000);  // let audio callback run for 5 seconds.\r\n    SDL_CloseAudioDevice(devid);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe application should close open audio devices once they are no longer needed. Calling this function will wait until the device's audio callback is not running, release the audio hardware and then clean up internal state. No further audio will play from this device once this function returns.\r\n\r\nThe device ID is invalid as soon as the device is closed, and is eligible for reuse in a new [[SDL_OpenAudioDevice]]() call immediately.\r\n\r\n== Related Functions ==\r\n .[[SDL_OpenAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_CompilerBarrier",
      "Uri": "https://wiki.libsdl.org/SDL_CompilerBarrier",
      "Categories": [
        "CategoryAPI",
        "CategoryAtomic"
      ],
      "LastUpdate": "2021-01-16T14:09:40.3803176-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_CompilerBarrier =\r\nUse this function to prevent the compiler from reordering reads and writes to globally visible variables across the call.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_CompilerBarrier(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function only prevents the compiler from reordering reads and writes, it does not prevent the CPU from reordering reads and writes.  However, all of the atomic operations that modify memory are full memory barriers.\r\n\r\nThis function is used in [[SDL_AtomicGet]]() and [[SDL_AtomicGetPtr]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_AtomicGet]]\r\n .[[SDL_AtomicGetPtr]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAtomic]]\r\n"
    },
    {
      "Name": "SDL_ComposeCustomBlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_ComposeCustomBlendMode",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:09:40.7867562-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_ComposeCustomBlendMode =\r\nUse this function to compose a custom blend mode for renderers.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor    srcColorFactor,\r\n                                         SDL_BlendFactor    dstColorFactor,\r\n                                         SDL_BlendOperation colorOperation,\r\n                                         SDL_BlendFactor    srcAlphaFactor,\r\n                                         SDL_BlendFactor    dstAlphaFactor,\r\n                                         SDL_BlendOperation alphaOperation)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''srcColorFactor'''||the [[SDL_BlendFactor]] applied to the red, green, and blue components of the source pixels||\r\n||'''dstColorFactor'''||the [[SDL_BlendFactor]] applied to the red, green, and blue components of the destination pixels||\r\n||'''colorOperation'''||the [[SDL_BlendOperation]] used to combine the red, green, and blue components of the source and destination pixels||\r\n||'''srcAlphaFactor'''||the [[SDL_BlendFactor]] applied to the alpha component of the source pixels||\r\n||'''dstAlphaFactor'''||the [[SDL_BlendFactor]] applied to the alpha component of the destination pixels||\r\n||'''alphaOperation'''||the [[SDL_BlendOperation]] used to combine the alpha component of the source and destination pixels||\r\n\r\n== Return Value ==\r\n\r\nReturns an [[SDL_BlendMode]] that represents the chosen factors and operations.\r\n\r\n== Code Examples ==\r\n\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThe functions [[SDL_SetRenderDrawBlendMode]] and [[SDL_SetTextureBlendMode]] accept the [[SDL_BlendMode]] returned by this function if the renderer supports it.\r\n\r\nA blend mode controls how the pixels from a drawing operation (source) get combined with the pixels from the render target (destination). First, the components of the source and destination pixels get multiplied with their blend factors. Then, the blend operation takes the two products and calculates the result that will get stored in the render target.\r\n\r\nExpressed in pseudocode, it would look like this:\r\n\r\n{{{\r\ndstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor)\r\ndstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor)\r\n}}}\r\n\r\nWhere the functions colorOperation(src, dst) and alphaOperation(src, dst) can return one of the following: src + dst, src - dst, dst - src, min(src, dst), max(src, dst).\r\n\r\nThe red, green, and blue components are always multiplied with the first, second, and third components of the [[SDL_BlendFactor]], respectively. The fourth component is not used.\r\n\r\nThe alpha component is always multiplied with the fourth component of the [[SDL_BlendFactor]]. The other components are not used in the alpha calculation.\r\n\r\nSupport for these blend modes varies for each renderer. To check if a specific [[SDL_BlendMode]] is supported, create a renderer and pass it to either [[SDL_SetRenderDrawBlendMode]] or [[SDL_SetTextureBlendMode]]. They will return with an error if the blend mode is not supported.\r\n\r\nThis list describes the support of custom blend modes for each renderer in SDL 2.0.6. All renderers support the four blend modes listed in the [[SDL_BlendMode]] enumeration.\r\n\r\n||direct3d||Supports SDL_BLENDOPERATION_ADD with all factors.||\r\n||direct3d11||Supports all operations with all factors. However, some factors produce unexpected results with SDL_BLENDOPERATION_MINIMUM and SDL_BLENDOPERATION_MAXIMUM.||\r\n||opengl||Supports the SDL_BLENDOPERATION_ADD operation with all factors.<<BR>>OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL 2.0.6.||\r\n||opengles||Supports the SDL_BLENDOPERATION_ADD operation with all factors. Color and alpha factors need to be the same.<<BR>>OpenGL ES 1 implementation specific: May also support SDL_BLENDOPERATION_SUBTRACT and SDL_BLENDOPERATION_REV_SUBTRACT. May support color and alpha operations being different from each other. May support color and alpha factors being different from each other.||\r\n||opengles2||Supports the SDL_BLENDOPERATION_ADD, SDL_BLENDOPERATION_SUBTRACT, SDL_BLENDOPERATION_REV_SUBTRACT operations with all factors.||\r\n||psp||No custom blend mode support.||\r\n||software||No custom blend mode support.||\r\n\r\nSome renderers do not provide an alpha component for the default render target. The SDL_BLENDFACTOR_DST_ALPHA and SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA factors do not have an effect in this case.\r\n\r\n== Version ==\r\n\r\nThis function is available in SDL 2.0.6.\r\n\r\n== Related Functions ==\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_GetRenderDrawBlendMode]]\r\n .[[SDL_SetTextureBlendMode]]\r\n .[[SDL_GetTextureBlendMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_CondBroadcast",
      "Uri": "https://wiki.libsdl.org/SDL_CondBroadcast",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:09:41.1373589-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CondBroadcast =\r\nUse this function to restart all threads that are waiting on the condition variable.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_CondBroadcast(SDL_cond* cond)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''cond'''||the condition variable to signal||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_bool condition = SDL_FALSE;\r\nSDL_mutex *lock;\r\nSDL_cond *cond;\r\n\r\nlock = SDL_CreateMutex();\r\ncond = SDL_CreateCond();\r\n.\r\n.\r\nThread A:\r\n    SDL_LockMutex(lock);\r\n    while (!condition) {\r\n        SDL_CondWait(cond, lock);\r\n    }\r\n    SDL_UnlockMutex(lock);\r\n\r\nThread B:\r\n    SDL_LockMutex(lock);\r\n    while (!condition) {\r\n        SDL_CondWait(cond, lock);\r\n    }\r\n    SDL_UnlockMutex(lock);\r\n\r\nThread C:\r\n    SDL_LockMutex(lock);\r\n    ...\r\n    condition = SDL_TRUE;\r\n    ...\r\n    SDL_CondBroadcast(cond);\r\n    SDL_UnlockMutex(lock);\r\n.\r\n.\r\nSDL_DestroyCond(cond);\r\nSDL_DestroyMutex(lock);\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CondSignal]]\r\n .[[SDL_CondWait]]\r\n .[[SDL_CondWaitTimeout]]\r\n .[[SDL_CreateCond]]\r\n .[[SDL_DestroyCond]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_CondSignal",
      "Uri": "https://wiki.libsdl.org/SDL_CondSignal",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:10:22.023774-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CondSignal =\r\nUse this function to restart one of the threads that are waiting on the condition variable.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_CondSignal(SDL_cond* cond)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''cond'''||the condition variable to signal||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateCond, , , from=\"## Begin Condition Variable Example\", to=\"## End Condition Variable Example\")>>\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CondBroadcast]]\r\n .[[SDL_CondWait]]\r\n .[[SDL_CondWaitTimeout]]\r\n .[[SDL_CreateCond]]\r\n .[[SDL_DestroyCond]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_CondWait",
      "Uri": "https://wiki.libsdl.org/SDL_CondWait",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:10:22.4607243-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CondWait =\r\nUse this function to wait until a condition variable is signaled.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_CondWait(SDL_cond*  cond,\r\n                 SDL_mutex* mutex)\r\n}}}\r\n== Function Parameters ==\r\n||'''cond''' ||the condition variable to wait on||\r\n||'''mutex''' ||the mutex used to coordinate thread access||\r\n\r\n== Return Value ==\r\nReturns 0 when it is signaled or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateCond, , , from=\"## Begin Condition Variable Example\", to=\"## End Condition Variable Example\")>>\r\n\r\n== Remarks ==\r\nThis function unlocks the specified '''mutex''' and waits for another thread to call [[SDL_CondSignal]]() or [[SDL_CondBroadcast]]() on the condition variable '''cond'''.  Once the condition variable is signaled, the mutex is re-locked and the function returns.\r\n\r\nThe mutex must be locked before calling this function.\r\n\r\nThis function is the equivalent of calling [[SDL_CondWaitTimeout]]() with a time length of SDL_MUTEX_MAXWAIT.\r\n\r\n== Related Functions ==\r\n .[[SDL_CondBroadcast]]\r\n .[[SDL_CondSignal]]\r\n .[[SDL_CondWaitTimeout]]\r\n .[[SDL_CreateCond]]\r\n .[[SDL_DestroyCond]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_CondWaitTimeout",
      "Uri": "https://wiki.libsdl.org/SDL_CondWaitTimeout",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:10:27.8221815-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CondWaitTimeout =\r\nUse this function to wait until a condition variable is signaled or a specified amount of time has passed.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_CondWaitTimeout(SDL_cond*  cond,\r\n                        SDL_mutex* mutex,\r\n                        Uint32     ms)\r\n}}}\r\n== Function Parameters ==\r\n||'''cond''' ||the condition variable to wait on||\r\n||'''mutex''' ||the mutex used to coordinate thread access||\r\n||'''ms''' ||the maximum time to wait in milliseconds, or SDL_MUTEX_MAXWAIT to wait indefinitely||\r\n\r\n== Return Value ==\r\nReturns 0 if the condition variable is signaled, SDL_MUTEX_TIMEDOUT if the condition is not signaled in the allotted time, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_bool condition = SDL_FALSE;\r\nSDL_mutex *lock;\r\nSDL_cond *cond;\r\n\r\nlock = SDL_CreateMutex();\r\ncond = SDL_CreateCond();\r\n.\r\n.\r\nThread A:\r\n    const Uint32 timeout = 1000; /* wake up every second */\r\n\r\n    while (!done) {\r\n        SDL_LockMutex(lock);\r\n        while (!condition && SDL_CondWaitTimeout(cond, lock, timeout) == 0) {\r\n            continue;\r\n        }\r\n        SDL_UnlockMutex(lock);\r\n\r\n        if (condition) {\r\n            ...\r\n        }\r\n\r\n        ... do some periodic work\r\n    }\r\n\r\nThread B:\r\n    SDL_LockMutex(lock);\r\n    ...\r\n    condition = SDL_TRUE;\r\n    ...\r\n    SDL_CondSignal(cond);\r\n    SDL_UnlockMutex(lock);\r\n.\r\n.\r\nSDL_DestroyCond(cond);\r\nSDL_DestroyMutex(lock);\r\n}}}\r\n\r\n== Remarks ==\r\nThis function unlocks the specified '''mutex''' and waits for another thread to call [[SDL_CondSignal]]() or [[SDL_CondBroadcast]]() on the condition variable '''cond''', or for the specified time to elapse.  Once the condition variable is signaled or the time elapsed, the mutex is re-locked and the function returns.\r\n\r\nThe mutex must be locked before calling this function.\r\n\r\n== Related Functions ==\r\n .[[SDL_CondBroadcast]]\r\n .[[SDL_CondSignal]]\r\n .[[SDL_CondWait]]\r\n .[[SDL_CreateCond]]\r\n .[[SDL_DestroyCond]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_ConvertAudio",
      "Uri": "https://wiki.libsdl.org/SDL_ConvertAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:10:28.1862287-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ConvertAudio =\r\nUse this function to convert audio data to a desired audio format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_ConvertAudio(SDL_AudioCVT* cvt)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''cvt'''||an [[SDL_AudioCVT]] structure that was previously set up; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\n\r\nReturns 0 if the conversion was completed successfully or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Change 1024 stereo sample frames at 48000Hz from Float32 to Int16.\r\nSDL_AudioCVT cvt;\r\nSDL_BuildAudioCVT(&cvt, AUDIO_F32, 2, 48000, AUDIO_S16, 2, 48000);\r\nSDL_assert(cvt.needed); // obviously, this one is always needed.\r\ncvt.len = 1024 * 2 * 4;  // 1024 stereo float32 sample frames.\r\ncvt.buf = (Uint8 *) SDL_malloc(cvt.len * cvt.len_mult);\r\n// read your float32 data into cvt.buf here.\r\nSDL_ConvertAudio(&cvt);\r\n// cvt.buf has cvt.len_cvt bytes of converted data now.\r\n}}}\r\n\r\n== Remarks ==\r\nThis function does the actual audio data conversion, after the application has called [[SDL_BuildAudioCVT]]() to prepare the conversion information and then filled in the buffer details.\r\n\r\nOnce the application has initialized the '''cvt''' structure using [[SDL_BuildAudioCVT]](), allocated an audio buffer and filled it with audio data in the source format, this function will convert the buffer, in-place, to the desired format.\r\n\r\nThe data conversion may go through several passes; any given pass may possibly temporarily increase the size of the data. For example, SDL might expand 16-bit data to 32 bits before resampling to a lower frequency, shrinking the data size after having grown it briefly. Since the supplied buffer will be both the source and destination, converting as necessary in-place, the application must allocate a buffer that will fully contain the data during its largest conversion pass. After [[SDL_BuildAudioCVT]]() returns, the application should set the '''cvt''' structure's '''len''' field to the size, in bytes, of the source data, and allocate a buffer that is '''len''' * '''len_mult''' bytes long for the '''buf''' field.\r\n\r\nThe source data should be copied into this buffer before the call to [[SDL_ConvertAudio]](). Upon successful return, this buffer will contain the converted audio, and the '''cvt''' structure's '''len_cvt''' field will be the size of the converted data, in bytes. Any bytes in the buffer past '''len_cvt''' are undefined once this function returns.\r\n\r\n== Related Functions ==\r\n .[[SDL_BuildAudioCVT]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_ConvertPixels",
      "Uri": "https://wiki.libsdl.org/SDL_ConvertPixels",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:10:28.470641-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ConvertPixels =\r\nUse this function to copy a block of pixels of one format to another format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_ConvertPixels(int         width,\r\n                      int         height,\r\n                      Uint32      src_format,\r\n                      const void* src,\r\n                      int         src_pitch,\r\n                      Uint32      dst_format,\r\n                      void*       dst,\r\n                      int         dst_pitch)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''width'''||the width of the block to copy, in pixels||\r\n||'''height'''||the height of the block to copy, in pixels||\r\n||'''src_format'''||the format of the source pixels; see [[#Remarks|Remarks]] for details||\r\n||'''src'''||a pointer to the source pixels||\r\n||'''src_pitch'''||the pitch of the block to copy||\r\n||'''dst_format'''||the format of the destination pixels; see [[#Remarks|Remarks]] for details||\r\n||'''dst'''||a pointer to be filled in with new pixel data||\r\n||'''dst_pitch'''||the pitch of the destination pixels||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''src_format''' and '''dst_format''' may each be one of the following [[SDL_PixelFormatEnum]] values:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"=== Pixel Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_ConvertSurface",
      "Uri": "https://wiki.libsdl.org/SDL_ConvertSurface",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:10:28.8461955-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ConvertSurface =\r\nUse this function to copy an existing surface into a new one that is optimized for blitting to a surface of a specified pixel format.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_ConvertSurface(SDL_Surface*           src,\r\n                                const SDL_PixelFormat* fmt,\r\n                                Uint32                 flags)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''src'''||the existing [[SDL_Surface]] structure to convert||\r\n||'''fmt'''||the [[SDL_PixelFormat]] structure that the new surface is optimized for||\r\n||'''flags'''||the flags are unused and should be set to 0; this is a leftover from SDL 1.2's API||\r\n\r\n== Return Value ==\r\nReturns the new [[SDL_Surface]] structure that is created or NULL if it fails; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n// SDL_Surface *input = ...;\r\nSDL_PixelFormat *format = SDL_AllocFormat(SDL_PIXELFORMAT_RGBA32);\r\nSDL_Surface *output = SDL_ConvertSurface(input, format, 0);\r\nSDL_FreeFormat(format);\r\n\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is used to optimize images for faster ''repeat'' blitting.  This is accomplished by converting the original and storing the result as a new surface. The new, optimized surface can then be used as the source for future blits, making them faster.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocFormat]]\r\n .[[SDL_ConvertSurfaceFormat]]\r\n .[[SDL_CreateRGBSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_ConvertSurfaceFormat",
      "Uri": "https://wiki.libsdl.org/SDL_ConvertSurfaceFormat",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:10:29.2153067-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ConvertSurfaceFormat =\r\nUse this function to copy an existing surface to a new surface of the specified format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* src,\r\n                                      Uint32       pixel_format,\r\n                                      Uint32       flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the [[SDL_Surface]] structure representing the surface to convert||\r\n||'''pixel_format'''||one of the enumerated values in [[SDL_PixelFormatEnum]]; see [[#format|Remarks]] for details||\r\n||'''flags'''||the flags are unused and should be set to 0||\r\n\r\n== Return Value ==\r\nReturns the new surface, or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(format)>> '''format''' may be one of the following:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"=== Pixel Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_ConvertSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_CreateColorCursor",
      "Uri": "https://wiki.libsdl.org/SDL_CreateColorCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:10:29.5670389-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateColorCursor =\r\nUse this function to create a color cursor.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface,\r\n                                  int          hot_x,\r\n                                  int          hot_y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||an [[SDL_Surface]] structure representing the cursor image||\r\n||'''hot_x'''||the x position of the cursor hot spot||\r\n||'''hot_y'''||the y position of the cursor hot spot||\r\n\r\n== Return Value ==\r\nReturns the new cursor on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint\r\nmain(int argc, char *argv[])\r\n{\r\n    SDL_Window *window = NULL;\r\n    SDL_Renderer *renderer = NULL;\r\n    SDL_Surface *surface = NULL;\r\n    SDL_Cursor *cursor = NULL;\r\n    SDL_bool error = SDL_TRUE;\r\n\r\n    if (SDL_Init(SDL_INIT_VIDEO) < 0) {\r\n        goto exit;\r\n    }\r\n    if (SDL_CreateWindowAndRenderer(640, 480, 0, &window, &renderer) < 0) {\r\n        goto exit;\r\n    }\r\n    surface = SDL_LoadBMP((1 < argc) ? argv[1] : \"cursor.bmp\");\r\n    if (!surface) {\r\n        goto exit;\r\n    }\r\n    cursor = SDL_CreateColorCursor(surface, 0, 0);\r\n    if (!cursor) {\r\n        goto exit;\r\n    }\r\n\r\n    SDL_SetCursor(cursor);\r\n    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\r\n    while (SDL_TRUE) {\r\n        SDL_Event event;\r\n        while (SDL_PollEvent(&event)) {\r\n            switch (event.type) {\r\n            case SDL_MOUSEBUTTONUP:\r\n            case SDL_QUIT:\r\n                error = SDL_FALSE;\r\n                goto exit;\r\n            }\r\n        }\r\n        SDL_RenderClear(renderer);\r\n        SDL_RenderPresent(renderer);\r\n    }\r\n\r\nexit:\r\n    if (error) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"%s\", SDL_GetError());\r\n    }\r\n    if (cursor) {\r\n        SDL_FreeCursor(cursor);\r\n    }\r\n    if (surface) {\r\n        SDL_FreeSurface(surface);\r\n    }\r\n    if (renderer) {\r\n        SDL_DestroyRenderer(renderer);\r\n    }\r\n    if (window) {\r\n        SDL_DestroyWindow(window);\r\n    }\r\n    SDL_Quit();\r\n    return error;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateCursor]]\r\n .[[SDL_FreeCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_CreateCond",
      "Uri": "https://wiki.libsdl.org/SDL_CreateCond",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:10:34.9291234-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateCond =\r\nUse this function to create a condition variable.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_cond* SDL_CreateCond(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a new condition variable or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n## Begin Condition Variable Example\r\nTypical use of condition variables:\r\n{{{#!highlight cpp\r\nSDL_bool condition = SDL_FALSE;\r\nSDL_mutex *lock;\r\nSDL_cond *cond;\r\n\r\nlock = SDL_CreateMutex();\r\ncond = SDL_CreateCond();\r\n.\r\n.\r\nThread A:\r\n    SDL_LockMutex(lock);\r\n    while (!condition) {\r\n        SDL_CondWait(cond, lock);\r\n    }\r\n    SDL_UnlockMutex(lock);\r\n\r\nThread B:\r\n    SDL_LockMutex(lock);\r\n    ...\r\n    condition = SDL_TRUE;\r\n    ...\r\n    SDL_CondSignal(cond);\r\n    SDL_UnlockMutex(lock);\r\n.\r\n.\r\nSDL_DestroyCond(cond);\r\nSDL_DestroyMutex(lock);\r\n}}}\r\n## End Condition Variable Example\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CondBroadcast]]\r\n .[[SDL_CondSignal]]\r\n .[[SDL_CondWait]]\r\n .[[SDL_CondWaitTimeout]]\r\n .[[SDL_DestroyCond]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_CreateCursor",
      "Uri": "https://wiki.libsdl.org/SDL_CreateCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:10:35.2813356-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_CreateCursor =\r\nUse this function to create a cursor using the specified bitmap data and mask (in MSB format).\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Cursor* SDL_CreateCursor(const Uint8* data,\r\n                             const Uint8* mask,\r\n                             int          w,\r\n                             int          h,\r\n                             int          hot_x,\r\n                             int          hot_y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''data'''||the color value for each pixel of the cursor; see [[#Remarks|Remarks]] for details||\r\n||'''mask'''||the mask value for each pixel of the cursor; see [[#Remarks|Remarks]] for details||\r\n||'''w'''||the width of the cursor; see [[#Remarks|Remarks]] for details||\r\n||'''h'''||the height of the cursor ''(same restrictions as w?)''||\r\n||'''hot_x'''||the X-axis location of the upper left corner of the cursor relative to the actual mouse position||\r\n||'''hot_y'''||the Y-axis location of the upper left corner of the cursor relative to the actual mouse position||\r\n\r\n== Return Value ==\r\nReturns a new cursor with the specified parameters on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n\r\n{{{#!highlight cpp\r\n/* Stolen from the mailing list */\r\n/* Creates a new mouse cursor from an XPM */\r\n\r\n\r\n/* XPM */\r\nstatic const char *arrow[] = {\r\n  /* width height num_colors chars_per_pixel */\r\n  \"    32    32        3            1\",\r\n  /* colors */\r\n  \"X c #000000\",\r\n  \". c #ffffff\",\r\n  \"  c None\",\r\n  /* pixels */\r\n  \"X                               \",\r\n  \"XX                              \",\r\n  \"X.X                             \",\r\n  \"X..X                            \",\r\n  \"X...X                           \",\r\n  \"X....X                          \",\r\n  \"X.....X                         \",\r\n  \"X......X                        \",\r\n  \"X.......X                       \",\r\n  \"X........X                      \",\r\n  \"X.....XXXXX                     \",\r\n  \"X..X..X                         \",\r\n  \"X.X X..X                        \",\r\n  \"XX  X..X                        \",\r\n  \"X    X..X                       \",\r\n  \"     X..X                       \",\r\n  \"      X..X                      \",\r\n  \"      X..X                      \",\r\n  \"       XX                       \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"                                \",\r\n  \"0,0\"\r\n};\r\n\r\nstatic SDL_Cursor *init_system_cursor(const char *image[])\r\n{\r\n  int i, row, col;\r\n  Uint8 data[4*32];\r\n  Uint8 mask[4*32];\r\n  int hot_x, hot_y;\r\n\r\n  i = -1;\r\n  for (row=0; row<32; ++row) {\r\n    for (col=0; col<32; ++col) {\r\n      if (col % 8) {\r\n        data[i] <<= 1;\r\n        mask[i] <<= 1;\r\n      } else {\r\n        ++i;\r\n        data[i] = mask[i] = 0;\r\n      }\r\n      switch (image[4+row][col]) {\r\n        case 'X':\r\n          data[i] |= 0x01;\r\n          mask[i] |= 0x01;\r\n          break;\r\n        case '.':\r\n          mask[i] |= 0x01;\r\n          break;\r\n        case ' ':\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  sscanf(image[4+row], \"%d,%d\", &hot_x, &hot_y);\r\n  return SDL_CreateCursor(data, mask, 32, 32, hot_x, hot_y);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n'''mask''' has to be in MSB (Most Significant Bit) format.\r\n\r\nThe cursor width ('''w''') must be a multiple of 8 bits.\r\n\r\nThe cursor is created in black and white according to the following:\r\n||<:> '''data'''||<:> '''mask'''||<:> Resulting Pixel on Screen||\r\n||<:> 0||<:> 1||<:> White||\r\n||<:> 1||<:> 1||<:> Black||\r\n||<:> 0||<:> 0||<:> Transparent||\r\n||<:> 1||<:> 0||<:> Inverted color if possible, black if not||\r\n\r\nCursors created with this function must be freed with [[SDL_FreeCursor]]().\r\n\r\nIf you want to have a color cursor, then this function is not for you; instead, you must hide the normal system cursor using [[SDL_ShowCursor]]() and in your main loop, when you draw graphics, also draw a [[SDL_Surface]] at the location of the mouse cursor.\r\n\r\nOr use [[SDL_CreateColorCursor]]().\r\n\r\n/* <<Color2(col=green,text=\"Should the above comment about color cursors be rephrased to be less conversational?  Example below:\")>> */\r\n\r\n/* ^To create a color cursor hide the normal system cursor (use [[SDL_ShowCursor]]() to find it???) and, along with your other graphics, draw an [[SDL_Surface]] at the location of the mouse cursor in your main loop.^ */\r\n\r\nNote that, since SDL 2.0.0, [[SDL_CreateSystemCursor]]() is available, which provides twelve readily available system cursors to pick from.\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeCursor]]\r\n .[[SDL_SetCursor]]\r\n .[[SDL_ShowCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_CreateMutex",
      "Uri": "https://wiki.libsdl.org/SDL_CreateMutex",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:10:35.6852799-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateMutex =\r\nUse this function to create a new mutex.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_mutex* SDL_CreateMutex(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the initialized and unlocked mutex or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n## Begin Mutex Example\r\n{{{#!highlight cpp\r\nSDL_mutex *mutex;\r\n\r\nmutex = SDL_CreateMutex();\r\nif (!mutex) {\r\n  fprintf(stderr, \"Couldn't create mutex\\n\");\r\n  return;\r\n}\r\n\r\nif (SDL_LockMutex(mutex) == 0) {\r\n  /* Do stuff while mutex is locked */\r\n  SDL_UnlockMutex(mutex);\r\n} else {\r\n  fprintf(stderr, \"Couldn't lock mutex\\n\");\r\n}\r\n\r\nSDL_DestroyMutex(mutex);\r\n}}}\r\n## End Mutex Example\r\n\r\n== Remarks ==\r\nCalls to [[SDL_LockMutex]]() will not return while the mutex is locked by another thread. See [[SDL_TryLockMutex]]() to attempt to lock without blocking.\r\n\r\nSDL mutexes are reentrant.\r\n\r\n== Related Functions ==\r\n .[[SDL_DestroyMutex]]\r\n .[[SDL_LockMutex]]\r\n .[[SDL_TryLockMutex]]\r\n .[[SDL_UnlockMutex]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_CreateRGBSurface",
      "Uri": "https://wiki.libsdl.org/SDL_CreateRGBSurface",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:10:36.0307455-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_CreateRGBSurface =\r\nUse this function to allocate a new RGB surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_CreateRGBSurface(Uint32 flags,\r\n                                  int    width,\r\n                                  int    height,\r\n                                  int    depth,\r\n                                  Uint32 Rmask,\r\n                                  Uint32 Gmask,\r\n                                  Uint32 Bmask,\r\n                                  Uint32 Amask)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''flags'''||the flags are unused and should be set to 0||\r\n||'''width'''||the width of the surface||\r\n||'''height'''||the height of the surface||\r\n||'''depth'''||the depth of the surface in bits; see [[#Remarks|Remarks]] for details||\r\n||'''Rmask'''||the red mask for the pixels||\r\n||'''Gmask'''||the green mask for the pixels||\r\n||'''Bmask'''||the blue mask for the pixels||\r\n||'''Amask'''||the alpha mask for the pixels||\r\n\r\n== Return Value ==\r\nReturns the new [[SDL_Surface]] structure that is created or NULL if it fails; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n    /* Create a 32-bit surface with the bytes of each pixel in R,G,B,A order,\r\n       as expected by OpenGL for textures */\r\n    SDL_Surface *surface;\r\n    Uint32 rmask, gmask, bmask, amask;\r\n\r\n    /* SDL interprets each pixel as a 32-bit number, so our masks must depend\r\n       on the endianness (byte order) of the machine */\r\n#if SDL_BYTEORDER == SDL_BIG_ENDIAN\r\n    rmask = 0xff000000;\r\n    gmask = 0x00ff0000;\r\n    bmask = 0x0000ff00;\r\n    amask = 0x000000ff;\r\n#else\r\n    rmask = 0x000000ff;\r\n    gmask = 0x0000ff00;\r\n    bmask = 0x00ff0000;\r\n    amask = 0xff000000;\r\n#endif\r\n\r\n    surface = SDL_CreateRGBSurface(0, width, height, 32,\r\n                                   rmask, gmask, bmask, amask);\r\n    if (surface == NULL) {\r\n        SDL_Log(\"SDL_CreateRGBSurface() failed: %s\", SDL_GetError());\r\n        exit(1);\r\n    }\r\n\r\n    /* or using the default masks for the depth: */\r\n    surface = SDL_CreateRGBSurface(0, width, height, 32, 0, 0, 0, 0);\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''depth''' is 4 or 8 bits, an empty palette is allocated for the surface. If '''depth''' is greater than 8 bits, the pixel format is set using the [RGBA]mask parameters.\r\n\r\nThe [RGBA]mask parameters are the bitmasks used to extract that color from a pixel. For instance, '''Rmask''' being FF000000 means the red data is stored in the most  significant byte. Using zeros for the RGB masks sets a default value, based on the depth. (e.g. SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);) However, using zero for the Amask results in an Amask of 0.\r\n\r\nBy default surfaces with an alpha mask are set up for blending as with\r\n .{{{SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)}}}\r\nYou can change this by calling [[SDL_SetSurfaceBlendMode]]() and selecting a different `blendMode`.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRGBSurfaceFrom]]\r\n .[[SDL_CreateRGBSurfaceWithFormat]]\r\n .[[SDL_FreeSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_CreateRGBSurfaceFrom",
      "Uri": "https://wiki.libsdl.org/SDL_CreateRGBSurfaceFrom",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:10:36.4212377-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_CreateRGBSurfaceFrom =\r\nUse this function to allocate a new RGB surface with existing pixel data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_CreateRGBSurfaceFrom(void*  pixels,\r\n                                      int    width,\r\n                                      int    height,\r\n                                      int    depth,\r\n                                      int    pitch,\r\n                                      Uint32 Rmask,\r\n                                      Uint32 Gmask,\r\n                                      Uint32 Bmask,\r\n                                      Uint32 Amask)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''pixels'''||a pointer to existing pixel data||\r\n||'''width'''||the width of the surface||\r\n||'''height'''||the height of the surface||\r\n||'''depth'''||the depth of the surface in bits; see [[#Remarks|Remarks]] for details||\r\n||'''pitch'''||the length of a row of pixels in bytes||\r\n||'''Rmask'''||the red mask for the pixels||\r\n||'''Gmask'''||the green mask for the pixels||\r\n||'''Bmask'''||the blue mask for the pixels||\r\n||'''Amask'''||the alpha mask for the pixels||\r\n\r\n== Return Value ==\r\nReturns the new [[SDL_Surface]] structure that is created or NULL if it fails; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// This example shows how to create a SDL_Surface* with the data loaded from an image\r\n// file with the stb_image.h library (https://github.com/nothings/stb/)\r\n\r\n// the color format you request stb_image to output,\r\n// use STBI_rgb if you don't want/need the alpha channel\r\nint req_format = STBI_rgb_alpha;\r\nint width, height, orig_format;\r\nunsigned char* data = stbi_load(\"./test.png\", &width, &height, &orig_format, req_format);\r\nif(data == NULL) {\r\n  SDL_Log(\"Loading image failed: %s\", stbi_failure_reason());\r\n  exit(1);\r\n}\r\n\r\n// Set up the pixel format color masks for RGB(A) byte arrays.\r\n// Only STBI_rgb (3) and STBI_rgb_alpha (4) are supported here!\r\nUint32 rmask, gmask, bmask, amask;\r\n#if SDL_BYTEORDER == SDL_BIG_ENDIAN\r\n  int shift = (req_format == STBI_rgb) ? 8 : 0;\r\n  rmask = 0xff000000 >> shift;\r\n  gmask = 0x00ff0000 >> shift;\r\n  bmask = 0x0000ff00 >> shift;\r\n  amask = 0x000000ff >> shift;\r\n#else // little endian, like x86\r\n  rmask = 0x000000ff;\r\n  gmask = 0x0000ff00;\r\n  bmask = 0x00ff0000;\r\n  amask = (req_format == STBI_rgb) ? 0 : 0xff000000;\r\n#endif\r\n\r\nint depth, pitch;\r\nif (req_format == STBI_rgb) {\r\n  depth = 24;\r\n  pitch = 3*width; // 3 bytes per pixel * pixels per row\r\n} else { // STBI_rgb_alpha (RGBA)\r\n  depth = 32;\r\n  pitch = 4*width;\r\n}\r\n\r\nSDL_Surface* surf = SDL_CreateRGBSurfaceFrom((void*)data, width, height, depth, pitch,\r\n                                             rmask, gmask, bmask, amask);\r\n\r\nif (surf == NULL) {\r\n  SDL_Log(\"Creating surface failed: %s\", SDL_GetError());\r\n  stbi_image_free(data);\r\n  exit(1);\r\n}\r\n\r\n// ... do something useful with the surface ...\r\n// ...\r\n\r\n// when you don't need the surface anymore, free it..\r\nSDL_FreeSurface(surf);\r\n// .. *and* the data used by the surface!\r\nstbi_image_free(data);\r\n}}}\r\n\r\n== Remarks ==\r\n<<Include(SDL_CreateRGBSurface, , , from=\"== Remarks ==\", to=\"== Related Functions ==\")>>\r\n\r\nNo copy is made of the pixel data.  Pixel data is not managed automatically; you must free the surface before you free the pixel data.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRGBSurface]]\r\n .[[SDL_CreateRGBSurfaceWithFormatFrom]]\r\n .[[SDL_FreeSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_CreateRGBSurfaceWithFormat",
      "Uri": "https://wiki.libsdl.org/SDL_CreateRGBSurfaceWithFormat",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:10:36.7490009-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_CreateRGBSurfaceWithFormat =\r\nUse this function to allocate an RGB surface.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_CreateRGBSurfaceWithFormat(Uint32 flags,\r\n                                            int    width,\r\n                                            int    height,\r\n                                            int    depth,\r\n                                            Uint32 format)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''flags'''||the '''flags''' are obsolete and should be set to 0||\r\n||'''width'''||the width in pixels of the surface to create||\r\n||'''height'''||the height in pixels of the surface to create||\r\n||'''depth'''||the depth in bits of the surface to create||\r\n||'''format'''||the [[SDL_PixelFormatEnum|pixel format]] of the surface to create||\r\n\r\n\r\n== Return Value ==\r\nReturns a new [[SDL_Surface]] on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n    /* Create a 32-bit surface with the bytes of each pixel in R,G,B,A order,\r\n       as expected by OpenGL for textures */\r\n\r\n    SDL_Surface* surf;\r\n    surf = SDL_CreateRGBSurfaceWithFormat(0, width, height, 32, SDL_PIXELFORMAT_RGBA32);\r\n    if (surf == NULL) {\r\n        SDL_Log(\"SDL_CreateRGBSurfaceWithFormat() failed: %s\", SDL_GetError());\r\n        exit(1);\r\n    }\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nIf the function runs out of memory, it will return NULL.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRGBSurface]]\r\n .[[SDL_CreateRGBSurfaceWithFormatFrom]]\r\n .[[SDL_FreeSurface]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_CreateRGBSurfaceWithFormatFrom",
      "Uri": "https://wiki.libsdl.org/SDL_CreateRGBSurfaceWithFormatFrom",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:10:42.1018604-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_CreateRGBSurfaceWithFormatFrom =\r\nUse this function to allocate an RGB surface from provided pixel data.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom(void*  pixels,\r\n                                                int    width,\r\n                                                int    height,\r\n                                                int    depth,\r\n                                                int    pitch,\r\n                                                Uint32 format)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''pixels'''||the pixel data to create the surface from||\r\n||'''width'''||the width in pixels of the surface to create||\r\n||'''height'''||the height in pixels of the surface to create||\r\n||'''depth'''||the depth in bits of the surface to create||\r\n||'''pitch'''||the length of a row of pixels in bytes||\r\n||'''format'''||the [[SDL_PixelFormatEnum|pixel format]] of the surface to create||\r\n\r\n\r\n== Return Value ==\r\nReturns a new [[SDL_Surface]] on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// This example shows how to create a SDL_Surface* with the data loaded\r\n// from an image file with stb_image.h (https://github.com/nothings/stb/)\r\n\r\n// the color format you request stb_image to output,\r\n// use STBI_rgb if you don't want/need the alpha channel\r\nint req_format = STBI_rgb_alpha;\r\nint width, height, orig_format;\r\nunsigned char* data = stbi_load(\"./test.png\", &width, &height, &orig_format, req_format);\r\nif (data == NULL) {\r\n    SDL_Log(\"Loading image failed: %s\", stbi_failure_reason());\r\n    exit(1);\r\n}\r\n\r\nint depth, pitch;\r\nUint32 pixel_format;\r\nif (req_format == STBI_rgb) {\r\n    depth = 24;\r\n    pitch = 3*width; // 3 bytes per pixel * pixels per row\r\n    pixel_format = SDL_PIXELFORMAT_RGB24;\r\n} else { // STBI_rgb_alpha (RGBA)\r\n    depth = 32;\r\n    pitch = 4*width;\r\n    pixel_format = SDL_PIXELFORMAT_RGBA32;\r\n}\r\n\r\nSDL_Surface* surf = SDL_CreateRGBSurfaceWithFormatFrom((void*)data, width, height,\r\n                                                       depth, pitch, pixel_format);\r\n\r\nif (surf == NULL) {\r\n    SDL_Log(\"Creating surface failed: %s\", SDL_GetError());\r\n    stbi_image_free(data);\r\n    exit(1);\r\n}\r\n\r\n// ... do something useful with the surface ...\r\n// ...\r\n\r\n// when you don't need the surface anymore, free it..\r\nSDL_FreeSurface(surf);\r\n// .. *and* the data used by the surface!\r\nstbi_image_free(data);\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nIf the function runs out of memory, it will return NULL.\r\n\r\n## TODO: something about depth being 4 or 8 and palettes, like in SDL_CreateRGBSurface ?\r\n\r\nNo copy is made of the pixel data.  Pixel data is not managed automatically; you must free the surface before you free the pixel data.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRGBSurfaceFrom]]\r\n .[[SDL_CreateRGBSurfaceWithFormat]]\r\n .[[SDL_FreeSurface]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_CreateRenderer",
      "Uri": "https://wiki.libsdl.org/SDL_CreateRenderer",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:10:42.4427914-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_CreateRenderer =\r\nUse this function to create a 2D rendering context for a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Renderer* SDL_CreateRenderer(SDL_Window* window,\r\n                                 int         index,\r\n                                 Uint32      flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window where rendering is displayed||\r\n||'''index'''||the index of the rendering driver to initialize, or -1 to initialize the first one supporting the requested flags||\r\n||'''flags'''||0, or one or more [[SDL_RendererFlags]] OR'd together; see [[#flags|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns a valid rendering context or NULL if there was an error; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char *argv[]) {\r\n    SDL_Window *win = NULL;\r\n    SDL_Renderer *renderer = NULL;\r\n    SDL_Texture *bitmapTex = NULL;\r\n    SDL_Surface *bitmapSurface = NULL;\r\n    int posX = 100, posY = 100, width = 320, height = 240;\r\n\r\n    SDL_Init(SDL_INIT_VIDEO);\r\n\r\n    win = SDL_CreateWindow(\"Hello World\", posX, posY, width, height, 0);\r\n\r\n    renderer = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED);\r\n\r\n    bitmapSurface = SDL_LoadBMP(\"img/hello.bmp\");\r\n    bitmapTex = SDL_CreateTextureFromSurface(renderer, bitmapSurface);\r\n    SDL_FreeSurface(bitmapSurface);\r\n\r\n    while (1) {\r\n        SDL_Event e;\r\n        if (SDL_PollEvent(&e)) {\r\n            if (e.type == SDL_QUIT) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        SDL_RenderClear(renderer);\r\n        SDL_RenderCopy(renderer, bitmapTex, NULL, NULL);\r\n        SDL_RenderPresent(renderer);\r\n    }\r\n\r\n    SDL_DestroyTexture(bitmapTex);\r\n    SDL_DestroyRenderer(renderer);\r\n    SDL_DestroyWindow(win);\r\n\r\n    SDL_Quit();\r\n\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(flags)>> '''flags''' may be any of the following OR'd together:\r\n<<Include(SDL_RendererFlags, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSoftwareRenderer]]\r\n .[[SDL_DestroyRenderer]]\r\n .[[SDL_GetNumRenderDrivers]]\r\n .[[SDL_GetRendererInfo]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_CreateSemaphore",
      "Uri": "https://wiki.libsdl.org/SDL_CreateSemaphore",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:10:42.8319327-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateSemaphore =\r\nUse this function to create a semaphore.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_sem* SDL_CreateSemaphore(Uint32 initial_value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''initial_value'''||the starting value of the semaphore||\r\n\r\n== Return Value ==\r\nReturns a new semaphore or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n## Begin Semaphore Example\r\nTypical use of semaphores:\r\n{{{#!highlight cpp\r\nSDL_atomic_t done;\r\nSDL_sem *sem;\r\n\r\nSDL_AtomicSet(&done, 0);\r\nsem = SDL_CreateSemaphore(0);\r\n.\r\n.\r\nThread A:\r\n    while (!SDL_AtomicGet(&done)) {\r\n        add_data_to_queue();\r\n        SDL_SemPost(sem);\r\n    }\r\n\r\nThread B:\r\n    while (!SDL_AtomicGet(&done)) {\r\n        SDL_SemWait(sem);\r\n        if (data_available()) {\r\n            get_data_from_queue();\r\n        }\r\n    }\r\n.\r\n.\r\nSDL_AtomicSet(&done, 1);\r\nSDL_SemPost(sem);\r\nwait_for_threads();\r\nSDL_DestroySemaphore(sem);\r\n}}}\r\n## End Semaphore Example\r\n\r\n== Remarks ==\r\nThis function creates a new semaphore and initializes it with the value '''initial_value'''. Each wait operation on the semaphore will atomically decrement the semaphore value and potentially block if the semaphore value is 0. Each post operation will atomically increment the semaphore value and wake waiting threads and allow them to retry the wait operation.\r\n\r\n== Related Functions ==\r\n .[[SDL_DestroySemaphore]]\r\n .[[SDL_SemPost]]\r\n .[[SDL_SemTryWait]]\r\n .[[SDL_SemValue]]\r\n .[[SDL_SemWait]]\r\n .[[SDL_SemWaitTimeout]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_CreateSoftwareRenderer",
      "Uri": "https://wiki.libsdl.org/SDL_CreateSoftwareRenderer",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:10:43.1783721-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateSoftwareRenderer =\r\nUse this function to create a 2D software rendering context for a surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure representing the surface where rendering is done||\r\n\r\n== Return Value ==\r\nReturns a valid rendering context or NULL if there was an error; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nSDL_Window *window;\r\nSDL_Renderer *renderer;\r\nint done;\r\n\r\nvoid\r\nDrawChessBoard(SDL_Renderer * renderer)\r\n{\r\n    int row = 0,column = 0,x = 0;\r\n    SDL_Rect rect, darea;\r\n\r\n    /* Get the Size of drawing surface */\r\n    SDL_RenderGetViewport(renderer, &darea);\r\n\r\n    for ( ; row < 8; row++) {\r\n        column = row%2;\r\n        x = column;\r\n        for ( ; column < 4+(row%2); column++) {\r\n            SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0xFF);\r\n\r\n            rect.w = darea.w/8;\r\n            rect.h = darea.h/8;\r\n            rect.x = x * rect.w;\r\n            rect.y = row * rect.h;\r\n            x = x + 2;\r\n            SDL_RenderFillRect(renderer, &rect);\r\n        }\r\n    }\r\n}\r\n\r\nvoid\r\nloop()\r\n{\r\n    SDL_Event e;\r\n    while (SDL_PollEvent(&e)) {\r\n        if (e.type == SDL_QUIT) {\r\n            done = 1;\r\n            return;\r\n        }\r\n\r\n        if ((e.type == SDL_KEYDOWN) && (e.key.keysym.sym == SDLK_ESCAPE)) {\r\n            done = 1;\r\n            return;\r\n        }\r\n    }\r\n\r\n    DrawChessBoard(renderer);\r\n\r\n    /* Got everything on rendering surface,\r\n       now Update the drawing image on window screen */\r\n    SDL_UpdateWindowSurface(window);\r\n}\r\n\r\nint\r\nmain(int argc, char *argv[])\r\n{\r\n    SDL_Surface *surface;\r\n\r\n    /* Enable standard application logging */\r\n    SDL_LogSetPriority(SDL_LOG_CATEGORY_APPLICATION, SDL_LOG_PRIORITY_INFO);\r\n\r\n    /* Initialize SDL */\r\n    if (SDL_Init(SDL_INIT_VIDEO) != 0) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"SDL_Init fail : %s\\n\", SDL_GetError());\r\n        return 1;\r\n    }\r\n\r\n    /* Create window and renderer for given surface */\r\n    window = SDL_CreateWindow(\"Chess Board\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, 0);\r\n    if (!window) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Window creation fail : %s\\n\",SDL_GetError());\r\n        return 1;\r\n    }\r\n    surface = SDL_GetWindowSurface(window);\r\n    renderer = SDL_CreateSoftwareRenderer(surface);\r\n    if (!renderer) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Render creation for surface fail : %s\\n\",SDL_GetError());\r\n        return 1;\r\n    }\r\n\r\n    /* Clear the rendering surface with the specified color */\r\n    SDL_SetRenderDrawColor(renderer, 0xFF, 0xFF, 0xFF, 0xFF);\r\n    SDL_RenderClear(renderer);\r\n\r\n    /* Draw the Image on rendering surface */\r\n    done = 0;\r\n\r\n    while (!done) {\r\n        loop();\r\n    }\r\n\r\n    SDL_Quit();\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nTwo other API which can be used to create SDL_Renderer:<<BR>>1) [[SDL_CreateRenderer]]()<<BR>>2) [[SDL_CreateWindowAndRenderer]]()\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n .[[SDL_DestroyRenderer]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_CreateSystemCursor",
      "Uri": "https://wiki.libsdl.org/SDL_CreateSystemCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:10:43.5544468-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_CreateSystemCursor =\r\nUse this function to create a system cursor.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''id'''||a system cursor enum value; see [[#Remarks|Remarks]] for details||\r\n\r\n\r\n== Return Value ==\r\nReturns a cursor on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Cursor* cursor;\r\ncursor = SDL_CreateSystemCursor(SDL_SYSTEM_CURSOR_HAND);\r\nSDL_SetCursor(cursor);\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n'''id''' may be one of the following:\r\n||SDL_SYSTEM_CURSOR_ARROW||arrow||\r\n||SDL_SYSTEM_CURSOR_IBEAM||i-beam||\r\n||SDL_SYSTEM_CURSOR_WAIT||wait||\r\n||SDL_SYSTEM_CURSOR_CROSSHAIR||crosshair||\r\n||SDL_SYSTEM_CURSOR_WAITARROW||small wait cursor (or wait if not available)||\r\n||SDL_SYSTEM_CURSOR_SIZENWSE||double arrow pointing northwest and southeast||\r\n||SDL_SYSTEM_CURSOR_SIZENESW||double arrow pointing northeast and southwest||\r\n||SDL_SYSTEM_CURSOR_SIZEWE||double arrow pointing west and east||\r\n||SDL_SYSTEM_CURSOR_SIZENS||double arrow pointing north and south||\r\n||SDL_SYSTEM_CURSOR_SIZEALL||four pointed arrow pointing north, south, east, and west||\r\n||SDL_SYSTEM_CURSOR_NO||slashed circle or crossbones||\r\n||SDL_SYSTEM_CURSOR_HAND||hand||\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_CreateTexture",
      "Uri": "https://wiki.libsdl.org/SDL_CreateTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:10:43.9443808-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_CreateTexture =\r\nUse this function to create a texture for a rendering context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer,\r\n                               Uint32        format,\r\n                               int           access,\r\n                               int           w,\r\n                               int           h)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''format'''||one of the enumerated values in [[SDL_PixelFormatEnum]]; see [[#format|Remarks]] for details||\r\n||'''access'''||one of the enumerated values in [[SDL_TextureAccess]]; see [[#access|Remarks]] for details||\r\n||'''w'''||the width of the texture in pixels||\r\n||'''h'''||the height of the texture in pixels||\r\n\r\n== Return Value ==\r\nReturns a pointer to the created texture or NULL if no rendering context was active, the format was unsupported, or the width or height were out of range; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\n/* Moving Rectangle */\r\nint main(int argc, char *argv[])\r\n{\r\n        SDL_Window *window;\r\n        SDL_Renderer *renderer;\r\n        SDL_Texture *texture;\r\n        SDL_Event event;\r\n        SDL_Rect r;\r\n\r\n        if (SDL_Init(SDL_INIT_VIDEO) < 0) {\r\n                SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't initialize SDL: %s\", SDL_GetError());\r\n                return 3;\r\n        }\r\n\r\n        window = SDL_CreateWindow(\"SDL_CreateTexture\",\r\n                        SDL_WINDOWPOS_UNDEFINED,\r\n                        SDL_WINDOWPOS_UNDEFINED,\r\n                        1024, 768,\r\n                        SDL_WINDOW_RESIZABLE);\r\n\r\n        r.w = 100;\r\n        r.h = 50;\r\n\r\n        renderer = SDL_CreateRenderer(window, -1, 0);\r\n\r\n        texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, 1024, 768);\r\n\r\n        while (1) {\r\n                SDL_PollEvent(&event);\r\n                if(event.type == SDL_QUIT)\r\n                        break;\r\n                r.x=rand()%500;\r\n                r.y=rand()%500;\r\n\r\n                SDL_SetRenderTarget(renderer, texture);\r\n                SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0x00);\r\n                SDL_RenderClear(renderer);\r\n                SDL_RenderDrawRect(renderer,&r);\r\n                SDL_SetRenderDrawColor(renderer, 0xFF, 0x00, 0x00, 0x00);\r\n                SDL_RenderFillRect(renderer, &r);\r\n                SDL_SetRenderTarget(renderer, NULL);\r\n                SDL_RenderCopy(renderer, texture, NULL, NULL);\r\n                SDL_RenderPresent(renderer);\r\n        }\r\n        SDL_DestroyRenderer(renderer);\r\n        SDL_Quit();\r\n        return 0;\r\n}\r\n\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(format)>> '''format''' may be one of the following:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"=== Pixel Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\n<<Anchor(access)>> '''access''' may be one of the following:\r\n<<Include(SDL_TextureAccess, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\nYou can set the texture scaling method by setting [[SDL_HINT_RENDER_SCALE_QUALITY]] before creating the texture.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTextureFromSurface]]\r\n .[[SDL_DestroyTexture]]\r\n .[[SDL_QueryTexture]]\r\n .[[SDL_UpdateTexture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_CreateTextureFromSurface",
      "Uri": "https://wiki.libsdl.org/SDL_CreateTextureFromSurface",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:11:29.6400469-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateTextureFromSurface =\r\nUse this function to create a texture from an existing surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer,\r\n                                          SDL_Surface*  surface)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''surface'''||the [[SDL_Surface]] structure containing pixel data used to fill the texture||\r\n\r\n== Return Value ==\r\nReturns the created texture or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nUint32 rmask, gmask, bmask, amask;\r\n\r\n/* SDL interprets each pixel as a 32-bit number, so our masks must depend\r\n   on the endianness (byte order) of the machine */\r\n#if SDL_BYTEORDER == SDL_BIG_ENDIAN\r\n    rmask = 0xff000000;\r\n    gmask = 0x00ff0000;\r\n    bmask = 0x0000ff00;\r\n    amask = 0x000000ff;\r\n#else\r\n    rmask = 0x000000ff;\r\n    gmask = 0x0000ff00;\r\n    bmask = 0x00ff0000;\r\n    amask = 0xff000000;\r\n#endif\r\n\r\nSDL_Surface *surface = SDL_CreateRGBSurface(0, 640, 480, 32, rmask, gmask, bmask, amask);\r\n\r\nif (surface == NULL) {\r\n    fprintf(stderr, \"CreateRGBSurface failed: %s\\n\", SDL_GetError());\r\n    exit(1);\r\n}\r\n\r\n\r\nSDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surface);\r\n\r\nif (texture == NULL) {\r\n    fprintf(stderr, \"CreateTextureFromSurface failed: %s\\n\", SDL_GetError());\r\n    exit(1);\r\n}\r\n\r\nSDL_FreeSurface(surface);\r\nsurface = NULL;\r\n\r\n}}}\r\n\r\n== Remarks ==\r\nThe surface is not modified or freed by this function.\r\n\r\nThe [[SDL_TextureAccess]] hint for the created texture is SDL_TEXTUREACCESS_STATIC.\r\n\r\nThe pixel format of the created texture may be different from the pixel format of the surface. Use [[SDL_QueryTexture]]() to query the pixel format of the texture.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTexture]]\r\n .[[SDL_DestroyTexture]]\r\n .[[SDL_QueryTexture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_CreateThread",
      "Uri": "https://wiki.libsdl.org/SDL_CreateThread",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T14:11:29.920788-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n\r\n= SDL_CreateThread =\r\nUse this function to create a new thread.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Thread* SDL_CreateThread(SDL_ThreadFunction fn,\r\n                             const char*        name,\r\n                             void*              data)\r\n}}}\r\n== Function Parameters ==\r\n||'''fn''' ||the function to call in the new thread; see [[#Remarks|Remarks]] for details ||\r\n||'''name''' ||the name of the thread; see [[#name|Remarks]] for details ||\r\n||'''data''' ||a pointer that is passed to '''fn''' ||\r\n\r\n\r\n== Return Value ==\r\nReturns an opaque pointer to the new thread object on success, NULL if the new thread could not be created; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include <stdio.h>\r\n#include \"SDL.h\"\r\n\r\n/* Very simple thread - counts 0 to 9 delaying 50ms between increments */\r\nstatic int TestThread(void *ptr)\r\n{\r\n    int cnt;\r\n\r\n    for (cnt = 0; cnt < 10; ++cnt) {\r\n        printf(\"Thread counter: %d\\n\", cnt);\r\n        SDL_Delay(50);\r\n    }\r\n\r\n    return cnt;\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    SDL_Thread *thread;\r\n    int         threadReturnValue;\r\n\r\n    printf(\"Simple SDL_CreateThread test:\\n\");\r\n\r\n    /* Simply create a thread */\r\n    thread = SDL_CreateThread(TestThread, \"TestThread\", (void *)NULL);\r\n\r\n    if (NULL == thread) {\r\n        printf(\"SDL_CreateThread failed: %s\\n\", SDL_GetError());\r\n    } else {\r\n        SDL_WaitThread(thread, &threadReturnValue);\r\n        printf(\"Thread returned value: %d\\n\", threadReturnValue);\r\n    }\r\n\r\n    return 0;\r\n}\r\n}}}\r\n{{{#!highlight cpp\r\nOutput:\r\nSimple SDL_CreateThread test:\r\nThread counter: 0\r\nThread counter: 1\r\nThread counter: 2\r\nThread counter: 3\r\nThread counter: 4\r\nThread counter: 5\r\nThread counter: 6\r\nThread counter: 7\r\nThread counter: 8\r\nThread counter: 9\r\nThread returned value: 10\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_CreateThread]]() creates a new thread of execution that shares all of its parent's global memory, signal handlers, file descriptors, etc, and runs the function '''fn''', passing it the void pointer '''data'''.  The thread quits when '''fn''' returns.\r\n\r\nThe function prototype for '''fn''' is:\r\n\r\n{{{#!highlight cpp\r\nint SDL_ThreadFunction(void* data)\r\n}}}\r\n  . where its parameter is:\r\n ||`data` ||what was passed as '''data''' to [[SDL_CreateThread]]() ||\r\n\r\n\r\n<<Anchor(name)>>\r\nThere are no requirements for thread naming conventions, so long as the string is null-terminated UTF-8, but these guidelines are helpful in choosing a name:\r\n\r\n . http://stackoverflow.com/questions/149932/naming-conventions-for-threads\r\n\r\nIf a system imposes requirements, SDL will try to munge the string for it (truncate, etc), but the original string contents will be available from [[SDL_GetThreadName]]().\r\n\r\n== Related Functions ==\r\n . [[SDL_WaitThread]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_CreateWindow",
      "Uri": "https://wiki.libsdl.org/SDL_CreateWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:11:30.1917059-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_CreateWindow =\r\nUse this function to create a window with the specified position, dimensions, and flags.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Window* SDL_CreateWindow(const char* title,\r\n                             int         x,\r\n                             int         y,\r\n                             int         w,\r\n                             int         h,\r\n                             Uint32      flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''title'''||the title of the window, in UTF-8 encoding||\r\n||'''x'''||the x position of the window, SDL_WINDOWPOS_CENTERED, or SDL_WINDOWPOS_UNDEFINED||\r\n||'''y'''||the y position of the window, SDL_WINDOWPOS_CENTERED, or SDL_WINDOWPOS_UNDEFINED||\r\n||'''w'''||the width of the window, in screen coordinates||\r\n||'''h'''||the height of the window, in screen coordinates||\r\n||'''flags'''||0, or one or more [[SDL_WindowFlags]] OR'd together; see [[#flags|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns the window that was created or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Example program:\r\n// Using SDL2 to create an application window\r\n\r\n#include \"SDL.h\"\r\n#include <stdio.h>\r\n\r\nint main(int argc, char* argv[]) {\r\n\r\n    SDL_Window *window;                    // Declare a pointer\r\n\r\n    SDL_Init(SDL_INIT_VIDEO);              // Initialize SDL2\r\n\r\n    // Create an application window with the following settings:\r\n    window = SDL_CreateWindow(\r\n        \"An SDL2 window\",                  // window title\r\n        SDL_WINDOWPOS_UNDEFINED,           // initial x position\r\n        SDL_WINDOWPOS_UNDEFINED,           // initial y position\r\n        640,                               // width, in pixels\r\n        480,                               // height, in pixels\r\n        SDL_WINDOW_OPENGL                  // flags - see below\r\n    );\r\n\r\n    // Check that the window was successfully created\r\n    if (window == NULL) {\r\n        // In the case that the window could not be made...\r\n        printf(\"Could not create window: %s\\n\", SDL_GetError());\r\n        return 1;\r\n    }\r\n\r\n    // The window is open: could enter program loop here (see SDL_PollEvent())\r\n\r\n    SDL_Delay(3000);  // Pause execution for 3000 milliseconds, for example\r\n\r\n    // Close and destroy the window\r\n    SDL_DestroyWindow(window);\r\n\r\n    // Clean up\r\n    SDL_Quit();\r\n    return 0;\r\n}\r\n\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(flags)>> '''flags''' may be any of the following OR'd together:\r\n||SDL_WINDOW_FULLSCREEN||fullscreen window||\r\n||SDL_WINDOW_FULLSCREEN_DESKTOP||fullscreen window at the current desktop resolution||\r\n||SDL_WINDOW_OPENGL||window usable with OpenGL context||\r\n||SDL_WINDOW_VULKAN||window usable with a Vulkan instance||\r\n||SDL_WINDOW_HIDDEN||window is not visible||\r\n||SDL_WINDOW_BORDERLESS||no window decoration||\r\n||SDL_WINDOW_RESIZABLE||window can be resized||\r\n||SDL_WINDOW_MINIMIZED||window is minimized||\r\n||SDL_WINDOW_MAXIMIZED||window is maximized||\r\n||SDL_WINDOW_INPUT_GRABBED||window has grabbed input focus||\r\n||SDL_WINDOW_ALLOW_HIGHDPI||window should be created in high-DPI mode if supported (>= SDL 2.0.1)||\r\n\r\nSDL_WINDOW_SHOWN is ignored by SDL_!CreateWindow(). The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set. SDL_WINDOW_SHOWN may be queried later using [[SDL_GetWindowFlags]]().\r\n\r\nOn Apple's OS X you '''must''' set the NSHighResolutionCapable Info.plist property to YES, otherwise you will not receive a High DPI OpenGL canvas.\r\n\r\nIf the window is created with the SDL_WINDOW_ALLOW_HIGHDPI flag, its size in pixels may differ from its size in screen coordinates on platforms with high-DPI support (e.g. iOS and Mac OS X). Use [[SDL_GetWindowSize]]() to query the client area's size in screen coordinates, and [[SDL_GL_GetDrawableSize]]() or [[SDL_GetRendererOutputSize]]() to query the drawable size in pixels.\r\n\r\nIf the window is set fullscreen, the width and height parameters '''w''' and '''h''' will not be used. However, invalid size parameters (e.g. too large) may still fail. Window size is actually limited to 16384 x 16384 for all platforms at window creation.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateWindowFrom]]\r\n .[[SDL_DestroyWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_CreateWindowAndRenderer",
      "Uri": "https://wiki.libsdl.org/SDL_CreateWindowAndRenderer",
      "Categories": [
        "CategoryAPI",
        "CategoryRender",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:11:30.4529506-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateWindowAndRenderer =\r\nUse this function to create a window and default renderer.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_CreateWindowAndRenderer(int            width,\r\n                                int            height,\r\n                                Uint32         window_flags,\r\n                                SDL_Window**   window,\r\n                                SDL_Renderer** renderer)\r\n}}}\r\n\r\n\r\n\r\n== Function Parameters ==\r\n||'''width'''||the width of the window||\r\n||'''height'''||the height of the window||\r\n||'''window_flags'''||the flags used to create the window (see [[SDL_CreateWindow]]())||\r\n||'''window'''||a pointer filled with the window, or NULL on error||\r\n||'''renderer'''||a pointer filled with the renderer, or NULL on error||\r\n\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success, or -1 on error; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    SDL_Window *window;\r\n    SDL_Renderer *renderer;\r\n    SDL_Surface *surface;\r\n    SDL_Texture *texture;\r\n    SDL_Event event;\r\n\r\n    if (SDL_Init(SDL_INIT_VIDEO) < 0) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't initialize SDL: %s\", SDL_GetError());\r\n        return 3;\r\n    }\r\n\r\n    if (SDL_CreateWindowAndRenderer(320, 240, SDL_WINDOW_RESIZABLE, &window, &renderer)) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't create window and renderer: %s\", SDL_GetError());\r\n        return 3;\r\n    }\r\n\r\n    surface = SDL_LoadBMP(\"sample.bmp\");\r\n    if (!surface) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't create surface from image: %s\", SDL_GetError());\r\n        return 3;\r\n    }\r\n    texture = SDL_CreateTextureFromSurface(renderer, surface);\r\n    if (!texture) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't create texture from surface: %s\", SDL_GetError());\r\n        return 3;\r\n    }\r\n    SDL_FreeSurface(surface);\r\n\r\n    while (1) {\r\n        SDL_PollEvent(&event);\r\n        if (event.type == SDL_QUIT) {\r\n            break;\r\n        }\r\n        SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0x00);\r\n        SDL_RenderClear(renderer);\r\n        SDL_RenderCopy(renderer, texture, NULL, NULL);\r\n        SDL_RenderPresent(renderer);\r\n    }\r\n\r\n    SDL_DestroyTexture(texture);\r\n    SDL_DestroyRenderer(renderer);\r\n    SDL_DestroyWindow(window);\r\n\r\n    SDL_Quit();\r\n\r\n    return 0;\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n .[[SDL_CreateWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_CreateWindowFrom",
      "Uri": "https://wiki.libsdl.org/SDL_CreateWindowFrom",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:11:30.7507435-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_CreateWindowFrom =\r\nUse this function to create an SDL window from an existing native window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Window* SDL_CreateWindowFrom(const void* data)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''data'''||a pointer to driver-dependent window creation data, typically your native window cast to a void*||\r\n\r\n== Return Value ==\r\nReturns the window that was created or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIn some cases (e.g. OpenGL) and on some platforms (e.g. Microsoft Windows) the hint [[SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT]] needs to be configured before using SDL_!CreateWindowFrom().\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateWindow]]\r\n .[[SDL_DestroyWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_DXGIGetOutputInfo",
      "Uri": "https://wiki.libsdl.org/SDL_DXGIGetOutputInfo",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:11:31.0377855-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_DXGIGetOutputInfo =\r\nUse this function to get the DXGI Adapter and Output indices for the specified display index.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_DXGIGetOutputInfo(int  displayIndex,\r\n                               int* adapterIndex,\r\n                               int* outputIndex)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the display index for which to get both indices||\r\n||'''adapterIndex'''||a pointer to be filled in with the adapter index||\r\n||'''outputIndex''' ||a pointer to be filled in with the output index||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE on success or SDL_FALSE on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe DXGI Adapter and Output indices can be passed to `EnumAdapters` and `EnumOutputs` respectively to get the objects required to create a DX10 or DX11 device and swap chain.\r\n\r\nBefore SDL 2.0.4 this function did not return a value. Since SDL 2.0.4 it returns an SDL_bool.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_DelEventWatch",
      "Uri": "https://wiki.libsdl.org/SDL_DelEventWatch",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:11:36.4294204-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_DelEventWatch =\r\nUse this function to remove an event watch callback added with [[SDL_AddEventWatch]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DelEventWatch(SDL_EventFilter filter,\r\n                       void*           userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''filter'''||the function originally passed to [[SDL_AddEventWatch]](); see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||the pointer originally passed to [[SDL_AddEventWatch]]()||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function takes the same input as [[SDL_AddEventWatch]]() to identify and delete the corresponding callback.\r\n\r\n== Related Functions ==\r\n .[[SDL_AddEventWatch]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_DelHintCallback",
      "Uri": "https://wiki.libsdl.org/SDL_DelHintCallback",
      "Categories": [
        "CategoryAPI",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:11:36.7807856-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_DelHintCallback =\r\nUse this function to remove a function watching a particular hint.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DelHintCallback(const char*      name,\r\n                         SDL_HintCallback callback,\r\n                         void*            userdata)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''name'''||the hint being watched||\r\n||'''callback'''||the function being called when the hint value changes||\r\n||'''userdata'''||a pointer being passed to the callback function||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe function prototype for '''callback''' is:\r\n {{{#!highlight cpp\r\nvoid SDL_HintCallback(void*       userdata,\r\n                      const char* name,\r\n                      const char* oldValue,\r\n                      const char* newValue)\r\n}}}\r\n . where its parameters are:\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_DelHintCallback]]()||\r\n ||`name`||what was passed as '''name''' to [[SDL_DelHintCallback]]()||\r\n ||`oldValue`||the old value||\r\n ||`newValue`||the new value||\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AddHintCallback]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_Delay",
      "Uri": "https://wiki.libsdl.org/SDL_Delay",
      "Categories": [
        "CategoryAPI",
        "CategoryTimer"
      ],
      "LastUpdate": "2021-01-16T14:11:37.4621596-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Delay =\r\nUse this function to wait a specified number of milliseconds before returning.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_Delay(Uint32 ms)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''ms'''||the number of milliseconds to delay||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThis function waits a specified number of milliseconds before returning. It waits at least the specified time, but possibly longer due to OS scheduling.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryTimer]]\r\n"
    },
    {
      "Name": "SDL_DequeueAudio",
      "Uri": "https://wiki.libsdl.org/SDL_DequeueAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:11:37.7222726-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_DequeueAudio =\r\nUse this function to dequeue more audio on non-callback devices.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_DequeueAudio(SDL_AudioDeviceID dev,\r\n                        void*             data,\r\n                        Uint32            len)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''dev'''||the device ID from which we will dequeue audio||\r\n||'''data'''||a pointer into where audio data should be copied||\r\n||'''len'''||the number of bytes (not samples!) to which (data) points||\r\n\r\n\r\n== Return Value ==\r\nReturns number of bytes dequeued, which could be less than requested; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nIf you are looking to queue audio for output on a non-callback playback device, you want [[SDL_QueueAudio]]() instead.  SDL_!DequeueAudio() will always return 0 if you use it with playback devices.\r\n\r\nSDL offers two ways to retrieve audio from a capture device: you can either supply a callback that SDL triggers with some frequency as the device records more audio data, (push method), or you can supply no callback, and then SDL will expect you to retrieve data at regular intervals (pull method) with this function.\r\n\r\nThere are no limits on the amount of data you can queue, short of exhaustion of address space.  Data from the device will keep queuing as necessary without further intervention from you.  This means you will eventually run out of memory if you aren't routinely dequeueing data.\r\n\r\nCapture devices will not queue data when paused; if you are expecting to not need captured audio for some length of time, use [[SDL_PauseAudioDevice]]() to stop the capture device from queueing more data.  This can be useful during, say, level loading times.  When unpaused, capture devices will start queueing data from that point, having flushed any capturable data available while paused.\r\n\r\nThis function is thread-safe, but dequeueing from the same device from two threads at once does not promise which thread will dequeued data first.\r\n\r\nYou may not dequeue audio from a device that is using an application-supplied callback; doing so returns an error.  You have to use the audio callback, or dequeue audio with this function, but not both.\r\n\r\nYou should not call [[SDL_LockAudio]]() on the device before queueing; SDL handles locking internally for this function.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_ClearQueuedAudio]]\r\n .[[SDL_GetQueuedAudioSize]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_DestroyCond",
      "Uri": "https://wiki.libsdl.org/SDL_DestroyCond",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:11:38.026215-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_DestroyCond =\r\nUse this function to destroy a condition variable.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DestroyCond(SDL_cond* cond)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''cond'''||the condition variable to destroy||\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateCond, , , from=\"## Begin Condition Variable Example\", to=\"## End Condition Variable Example\")>>\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CondBroadcast]]\r\n .[[SDL_CondSignal]]\r\n .[[SDL_CondWait]]\r\n .[[SDL_CondWaitTimeout]]\r\n .[[SDL_CreateCond]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_DestroyMutex",
      "Uri": "https://wiki.libsdl.org/SDL_DestroyMutex",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:11:38.3278966-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_DestroyMutex =\r\nUse this function to destroy a mutex created with [[SDL_CreateMutex]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DestroyMutex(SDL_mutex* mutex)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''mutex''' ||the mutex to destroy||\r\n\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateMutex, , , from=\"## Begin Mutex Example\", to=\"## End Mutex Example\")>>\r\n\r\n== Remarks ==\r\nThis function must be called on any mutex that is no longer needed. Failure to destroy a mutex will result in a system memory or resource leak. While it is safe to destroy a mutex that is UNLOCKED, it is not safe to attempt to destroy a locked mutex and may result in undefined behavior depending on the platform.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateMutex]]\r\n .[[SDL_LockMutex]]\r\n .[[SDL_TryLockMutex]]\r\n .[[SDL_UnlockMutex]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_DestroyRenderer",
      "Uri": "https://wiki.libsdl.org/SDL_DestroyRenderer",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:11:43.612885-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_DestroyRenderer =\r\nUse this function to destroy the rendering context for a window and free associated textures.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DestroyRenderer(SDL_Renderer* renderer)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_DestroySemaphore",
      "Uri": "https://wiki.libsdl.org/SDL_DestroySemaphore",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:11:43.9368953-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_DestroySemaphore =\r\nUse this function to destroy a semaphore.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DestroySemaphore(SDL_sem* sem)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''sem'''||the semaphore to destroy||\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateSemaphore, , , from=\"## Begin Semaphore Example\", to=\"## End Semaphore Example\")>>\r\n\r\n== Remarks ==\r\nIt is not safe to destroy a semaphore if there are threads currently waiting on it.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSemaphore]]\r\n .[[SDL_SemPost]]\r\n .[[SDL_SemTryWait]]\r\n .[[SDL_SemValue]]\r\n .[[SDL_SemWait]]\r\n .[[SDL_SemWaitTimeout]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_DestroyTexture",
      "Uri": "https://wiki.libsdl.org/SDL_DestroyTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:11:44.2213694-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_DestroyTexture =\r\nUse this function to destroy the specified texture.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DestroyTexture(SDL_Texture* texture)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to destroy||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nPassing NULL or an otherwise invalid texture will set the SDL error message to \"Invalid texture\".\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTexture]]\r\n .[[SDL_CreateTextureFromSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_DestroyWindow",
      "Uri": "https://wiki.libsdl.org/SDL_DestroyWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:11:44.4928761-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_DestroyWindow =\r\nUse this function to destroy a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DestroyWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to destroy||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''window''' is NULL, this function will return immediately after setting the SDL error message to \"Invalid window\". See [[SDL_GetError]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateWindow]]\r\n .[[SDL_CreateWindowFrom]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_DetachThread",
      "Uri": "https://wiki.libsdl.org/SDL_DetachThread",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T14:11:44.747531-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_DetachThread =\r\nUse this function to let a thread clean up on exit without intervention.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DetachThread(SDL_Thread* thread)\r\n}}}\r\n== Function Parameters ==\r\n||'''thread''' ||the SDL_Thread pointer that was returned from the [[SDL_CreateThread]]() call that started this thread||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern int TestThread(void *ptr);\r\nSDL_Thread *thread = SDL_CreateThread(TestThread, \"TestThread\", (void *)NULL);\r\nSDL_DetachThread(thread);  /* will go away on its own upon completion. */\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nA thread may be \"detached\" to signify that it should not remain until another thread has called [[SDL_WaitThread]]() on it. Detaching a thread is useful for long-running threads that nothing needs to synchronize with or further manage. When a detached thread is done, it simply goes away.\r\n\r\nThere is no way to recover the return code of a detached thread. If you need this, don't detach the thread and instead use [[SDL_WaitThread]]().\r\n\r\nOnce a thread is detached, you should usually assume the SDL_Thread isn't safe to reference again, as it will become invalid immediately upon the detached thread's exit, instead of remaining until someone has called [[SDL_WaitThread]]() to finally clean it up. As such, don't detach the same thread more than once.\r\n\r\nIf a thread has already exited when passed to SDL_!DetachThread(), it will stop waiting for a call to [[SDL_WaitThread]]() and clean up immediately. It is not safe to detach a thread that might be used with [[SDL_WaitThread]]().\r\n\r\nYou may not call [[SDL_WaitThread]]() on a thread that has been detached. Use either that function or this one, but not both, or behavior is undefined.\r\n\r\nIt is safe to pass NULL to this function; it is a no-op.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n== Related Functions ==\r\n . [[SDL_CreateThread]]\r\n . [[SDL_WaitThread]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_Direct3D9GetAdapterIndex",
      "Uri": "https://wiki.libsdl.org/SDL_Direct3D9GetAdapterIndex",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:11:45.0190272-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_Direct3D9GetAdapterIndex =\r\nUse this function to get the !D3D9 adapter index that matches the specified display index.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_Direct3D9GetAdapterIndex(int displayIndex)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the display index for which to get the !D3D9 adapter index||\r\n\r\n\r\n== Return Value ==\r\nReturns the !D3D9 adapter index on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe returned adapter index can be passed to `IDirect3D9::CreateDevice` and controls on which monitor a full screen application will appear.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_DisableScreenSaver",
      "Uri": "https://wiki.libsdl.org/SDL_DisableScreenSaver",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:11:50.3076057-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_DisableScreenSaver =\r\nUse this function to prevent the screen from being blanked by a screen saver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_DisableScreenSaver(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf you disable the screensaver, it is automatically re-enabled when SDL quits.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_EnableScreenSaver]]\r\n .[[SDL_IsScreenSaverEnabled]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_EnableScreenSaver",
      "Uri": "https://wiki.libsdl.org/SDL_EnableScreenSaver",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:12:30.9755757-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_EnableScreenSaver =\r\nUse this function to allow the screen to be blanked by a screen saver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_EnableScreenSaver(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_DisableScreenSaver]]\r\n .[[SDL_IsScreenSaverEnabled]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_EnclosePoints",
      "Uri": "https://wiki.libsdl.org/SDL_EnclosePoints",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:12:31.2241276-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_EnclosePoints =\r\nUse this function to calculate a minimal rectangle enclosing a set of points.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_EnclosePoints(const SDL_Point* points,\r\n                           int              count,\r\n                           const SDL_Rect*  clip,\r\n                           SDL_Rect*        result)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''points'''||an array of [[SDL_Point]] structures representing points to be enclosed||\r\n||'''count'''||the number of structures in the '''points''' array||\r\n||'''clip'''||an [[SDL_Rect]] structure used for clipping or NULL to enclose all points; see [[#Remarks|Remarks]] for details||\r\n||'''result'''||an [[SDL_Rect]] structure filled in with the minimal enclosing rectangle||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if any points were enclosed or SDL_FALSE if all the points were outside of the clipping rectangle.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''clip''' is not NULL then only points inside of the clipping rectangle are considered.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_EventState",
      "Uri": "https://wiki.libsdl.org/SDL_EventState",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:12:31.4708833-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_EventState =\r\nUse this function to set the state of processing events by type.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint8 SDL_EventState(Uint32 type,\r\n                     int    state)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''type'''||the type of event; see [[SDL_EventType]] for details||\r\n||'''state'''||how to process the event; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns SDL_DISABLE or SDL_ENABLE, representing the processing state of the event before this function makes any changes to it.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''state''' may be any of the following:\r\n||-1||SDL_QUERY||returns the current processing state of the specified event||\r\n||0||SDL_IGNORE (aka SDL_DISABLE)||the event will automatically be dropped from the event queue and will not be filtered||\r\n||1||SDL_ENABLE||the event will be processed normally||\r\n\r\n== Related Functions ==\r\n .[[SDL_GetEventState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_FillRect",
      "Uri": "https://wiki.libsdl.org/SDL_FillRect",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:12:31.7156845-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_FillRect =\r\nUse this function to perform a fast fill of a rectangle with a specific color.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_FillRect(SDL_Surface*    dst,\r\n                 const SDL_Rect* rect,\r\n                 Uint32          color)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the [[SDL_Surface]] structure that is the drawing target||\r\n||'''rect'''||the [[SDL_Rect]] structure representing the rectangle to fill, or NULL to fill the entire surface||\r\n||'''color'''||the color to fill with; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* Declaring the surface. */\r\nSDL_Surface *s;\r\n\r\n/* Creating the surface. */\r\ns = SDL_CreateRGBSurface(0, width, height, 32, 0, 0, 0, 0);\r\n\r\n/* Filling the surface with red color. */\r\nSDL_FillRect(s, NULL, SDL_MapRGB(s->format, 255, 0, 0));\r\n}}}\r\n\r\n== Remarks ==\r\n'''color''' should be a pixel of the format used by the surface, and can be generated by [[SDL_MapRGB]]() or [[SDL_MapRGBA]]().  If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place.\r\n\r\nIf there is a clip rectangle set on the destination (set via [[SDL_SetClipRect]]()), then this function will fill based on the intersection of the clip rectangle and '''rect'''.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_FillRects]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_FillRects",
      "Uri": "https://wiki.libsdl.org/SDL_FillRects",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:12:31.9618102-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_FillRects =\r\nUse this function to perform a fast fill of a set of rectangles with a specific color.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_FillRects(SDL_Surface*    dst,\r\n                  const SDL_Rect* rects,\r\n                  int             count,\r\n                  Uint32          color)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the [[SDL_Surface]] structure that is the drawing target||\r\n||'''rects'''||an array of [[SDL_Rect]] structures representing the rectangles to be filled||\r\n||'''count'''||the number of rectangles in the array||\r\n||'''color'''||the color to fill with; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''color''' should be a pixel of the format used by the surface, and can be generated by [[SDL_MapRGB]]() or [[SDL_MapRGBA]]().  If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place.\r\n\r\nIf there is a clip rectangle set on the destination (set via [[SDL_SetClipRect]]()), then this function will fill based on the intersection of the clip rectangle and '''rects'''.\r\n\r\n== Related Functions ==\r\n .[[SDL_FillRect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_FilterEvents",
      "Uri": "https://wiki.libsdl.org/SDL_FilterEvents",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:12:37.2207469-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_FilterEvents =\r\nUse this function to run a specific filter function on the current event queue, removing any events for which the filter returns 0.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FilterEvents(SDL_EventFilter filter,\r\n                      void*           userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''filter'''||the function to call when an event happens; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||a pointer that is passed to '''filter'''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe function prototype for '''filter''' is:\r\n{{{#!highlight cpp\r\nint SDL_EventFilter(void*      userdata,\r\n                    SDL_Event* event)\r\n}}}\r\n . where its parameters are:\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_FilterEvents]]()||\r\n ||`event`||the desired event to pull from the queue||\r\n\r\nSee [[SDL_SetEventFilter]]() for more information. Unlike [[SDL_SetEventFilter]](), this function does not change the filter permanently, it only uses the supplied filter until this function returns.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetEventFilter]]\r\n .[[SDL_SetEventFilter]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_FlushEvent",
      "Uri": "https://wiki.libsdl.org/SDL_FlushEvent",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:12:37.4694774-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_FlushEvent =\r\nUse this function to clear events from the event queue.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FlushEvent(Uint32 type)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''type'''||the type of event to be cleared; see [[SDL_EventType]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis will unconditionally remove any events from the queue that match '''type'''. If you need to remove a range of event types, use [[SDL_FlushEvents]]() instead.\r\n\r\nIt's also normal to just ignore events you don't care about in your event loop without calling this function.\r\n\r\nThis function only affects currently queued events. If you want to make sure that all pending OS events are flushed, you can call [[SDL_PumpEvents]]() on the main thread immediately before the flush call.\r\n\r\n== Related Functions ==\r\n .[[SDL_FlushEvents]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_FlushEvents",
      "Uri": "https://wiki.libsdl.org/SDL_FlushEvents",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:12:37.7173706-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_FlushEvents =\r\nUse this function to clear events from the event queue.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FlushEvents(Uint32 minType,\r\n                     Uint32 maxType)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''minType'''||the minimum event type to be cleared; see [[SDL_EventType]] for details||\r\n||'''maxType'''||the maximum event type to be cleared; see [[SDL_EventType]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis will unconditionally remove any events from the queue that match the specified type range. If you need to remove a single event type, you can use [[SDL_FlushEvent]]() instead.\r\n\r\nIt's also normal to just ignore events you don't care about in your event loop without calling this function.\r\n\r\nThis function only affects currently queued events. If you want to make sure that all pending OS events are flushed, you can call [[SDL_PumpEvents]]() on the main thread immediately before the flush call.\r\n\r\n== Related Functions ==\r\n .[[SDL_FlushEvent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_FreeCursor",
      "Uri": "https://wiki.libsdl.org/SDL_FreeCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:12:37.9578222-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_FreeCursor =\r\nUse this function to free a cursor created with [[SDL_CreateCursor]](), [[SDL_CreateColorCursor]]() or [[SDL_CreateSystemCursor]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FreeCursor(SDL_Cursor* cursor)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''cursor'''||the cursor to free||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateColorCursor]]\r\n .[[SDL_CreateCursor]]\r\n .[[SDL_CreateSystemCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_FreeFormat",
      "Uri": "https://wiki.libsdl.org/SDL_FreeFormat",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:12:38.1856675-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_FreeFormat =\r\nUse this function to free an [[SDL_PixelFormat]] structure allocated by [[SDL_AllocFormat]].\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FreeFormat(SDL_PixelFormat* format)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''format'''||the [[SDL_PixelFormat]] structure to free||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocFormat]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_FreePalette",
      "Uri": "https://wiki.libsdl.org/SDL_FreePalette",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:12:38.4373466-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_FreePalette =\r\nUse this function to free a palette created with [[SDL_AllocPalette]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FreePalette(SDL_Palette* palette)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''palette'''||the [[SDL_Palette]] structure to be freed||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocPalette]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_FreeRW",
      "Uri": "https://wiki.libsdl.org/SDL_FreeRW",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:12:43.6763892-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_FreeRW =\r\nUse this function to free an [[SDL_RWops]] structure allocated by [[SDL_AllocRW]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FreeRW(SDL_RWops* area)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''area'''||the [[SDL_RWops]] structure to be freed||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* this would be your SDL_RWops implementation's \"close\" method. */\r\nvoid close_my_rwops(SDL_RWops *rw)\r\n{\r\n    if (rw != NULL) {\r\n        /* close any other resources. */\r\n        SDL_FreeRW(rw);\r\n    }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nApplications do not need to use this function unless they are providing their own [[SDL_RWops]] implementation. If you just need a SDL_RWops to read/write a common data source, you should use the built-in implementations in SDL, like [[SDL_RWFromFile]]() or [[SDL_RWFromMem]](), etc, and call the '''close''' method on those SDL_RWops pointers when you are done with them.\r\n\r\nOnly use [[SDL_FreeRW]]() on pointers returned by [[SDL_AllocRW]](). The pointer is invalid as soon as this function returns. Any extra memory allocated during creation of the SDL_RWops is not freed by [[SDL_FreeRW]](); the programmer must be responsible for managing that memory in their '''close''' method.\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocRW]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_FreeSurface",
      "Uri": "https://wiki.libsdl.org/SDL_FreeSurface",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:12:43.9099998-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_FreeSurface =\r\nUse this function to free an RGB surface.  \r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FreeSurface(SDL_Surface* surface)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to free||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf the surface was created using [[SDL_CreateRGBSurfaceFrom]]() then the pixel data is not freed.\r\n\r\nIt is safe to pass NULL to this function.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRGBSurface]]\r\n .[[SDL_CreateRGBSurfaceFrom]]\r\n .[[SDL_LoadBMP]]\r\n .[[SDL_LoadBMP_RW]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_FreeWAV",
      "Uri": "https://wiki.libsdl.org/SDL_FreeWAV",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:12:44.1500967-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_FreeWAV =\r\nUse this function to free data previously allocated with [[SDL_LoadWAV]]() or [[SDL_LoadWAV_RW]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_FreeWAV(Uint8* audio_buf)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''audio_buf'''||a pointer to the buffer created by [[SDL_LoadWAV]]() or [[SDL_LoadWAV_RW]]()||\r\n\r\n== Code Examples ==\r\n<<Include(SDL_LoadWAV, , , from=\"== Code Examples ==\", to=\"== Remarks ==\")>>\r\n\r\n== Remarks ==\r\nAfter a WAVE file has been opened with [[SDL_LoadWAV]]() or [[SDL_LoadWAV_RW]]() its data can eventually be freed with [[SDL_FreeWAV]](). It is safe to call this function with a NULL pointer.\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadWAV]]\r\n .[[SDL_LoadWAV_RW]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GL_BindTexture",
      "Uri": "https://wiki.libsdl.org/SDL_GL_BindTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:12:44.3821812-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_GL_BindTexture =\r\nUse this function to bind an OpenGL/ES/ES2 texture to the current context for use with OpenGL instructions when rendering OpenGL primitives directly.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_BindTexture(SDL_Texture* texture,\r\n                       float*       texw,\r\n                       float*       texh)\r\n}}}\r\n== Function Parameters ==\r\n||'''texture''' ||the texture to bind to the current OpenGL/ES/ES2 context ||\r\n||'''texw''' ||a pointer to a float value which will be filled with the texture width or NULL if you don't need that value ||\r\n||'''texh''' ||a pointer to a float value which will be filled with the texture height or NULL if you don't need that value ||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success, or -1 if the operation is not supported; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\nThe following are three examples extracted from the [[http://ignifuga.org|Ignifuga Game Engine]] that show how to integrate [[http://librocket.com|libRocket]] (which uses OpenGL for rendering) with SDL2.\r\n\r\n{{{#!highlight cpp\r\nvoid RocketSDLRenderInterfaceOpenGL::RenderGeometry(Rocket::Core::Vertex* vertices, int num_vertices, int* indices, int num_indices, const Rocket::Core::TextureHandle texture, const Rocket::Core::Vector2f& translation)\r\n{\r\n    // SDL uses shaders that we need to disable here\r\n    render_data.glUseProgramObjectARB(0);\r\n    render_data.glPushMatrix();\r\n    render_data.glTranslatef(translation.x, translation.y, 0);\r\n\r\n    std::vector<Rocket::Core::Vector2f> Positions(num_vertices);\r\n    std::vector<Rocket::Core::Colourb> Colors(num_vertices);\r\n    std::vector<Rocket::Core::Vector2f> TexCoords(num_vertices);\r\n    float texw, texh;\r\n\r\n    SDL_Texture* sdl_texture = NULL;\r\n    if(texture) {\r\n        render_data.glEnableClientState(GL_TEXTURE_COORD_ARRAY);\r\n        sdl_texture = (SDL_Texture *) texture;\r\n        SDL_GL_BindTexture(sdl_texture, &texw, &texh);\r\n    }\r\n\r\n    for (int  i = 0; i < num_vertices; i++) {\r\n        Positions[i] = vertices[i].position;\r\n        Colors[i] = vertices[i].colour;\r\n        if (sdl_texture) {\r\n            TexCoords[i].x = vertices[i].tex_coord.x * texw;\r\n            TexCoords[i].y = vertices[i].tex_coord.y * texh;\r\n        } else {\r\n            TexCoords[i] = vertices[i].tex_coord;\r\n        }\r\n    }\r\n\r\n    render_data.glEnableClientState(GL_VERTEX_ARRAY);\r\n    render_data.glEnableClientState(GL_COLOR_ARRAY);\r\n    render_data.glVertexPointer(2, GL_FLOAT, 0, &Positions[0]);\r\n    render_data.glColorPointer(4, GL_UNSIGNED_BYTE, 0, &Colors[0]);\r\n    render_data.glTexCoordPointer(2, GL_FLOAT, 0, &TexCoords[0]);\r\n\r\n\r\n    render_data.glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);\r\n    render_data.glEnable(GL_BLEND);\r\n    render_data.glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\r\n    render_data.glDrawElements(GL_TRIANGLES, num_indices, GL_UNSIGNED_INT, indices);\r\n    render_data.glDisableClientState(GL_VERTEX_ARRAY);\r\n    render_data.glDisableClientState(GL_COLOR_ARRAY);\r\n\r\n\r\n    if (sdl_texture) {\r\n        SDL_GL_UnbindTexture(sdl_texture);\r\n        render_data.glDisableClientState(GL_TEXTURE_COORD_ARRAY);\r\n    }\r\n\r\n    render_data.glColor4f(1.0, 1.0, 1.0, 1.0);\r\n    render_data.glPopMatrix();\r\n}\r\n\r\n}}}\r\n\r\n{{{#!highlight cpp\r\nvoid RocketSDLRenderInterfaceOpenGLES::RenderGeometry(Rocket::Core::Vertex* vertices, int num_vertices, int* indices, int num_indices, const Rocket::Core::TextureHandle texture, const Rocket::Core::Vector2f& translation)\r\n{\r\n    render_data.glPushMatrix();\r\n    render_data.glTranslatef(translation.x, translation.y, 0);\r\n\r\n    std::vector<Rocket::Core::Vector2f> Positions(num_vertices);\r\n    std::vector<Rocket::Core::Colourb> Colors(num_vertices);\r\n    std::vector<Rocket::Core::Vector2f> TexCoords(num_vertices);\r\n    float texw, texh;\r\n\r\n    SDL_Texture* sdl_texture = NULL;\r\n    if(texture) {\r\n        render_data.glEnableClientState(GL_TEXTURE_COORD_ARRAY);\r\n        sdl_texture = (SDL_Texture *) texture;\r\n        SDL_GL_BindTexture(sdl_texture, &texw, &texh);\r\n    }\r\n\r\n    for (int  i = 0; i < num_vertices; i++) {\r\n        Positions[i] = vertices[i].position;\r\n        Colors[i] = vertices[i].colour;\r\n        if (sdl_texture) {\r\n            TexCoords[i].x = vertices[i].tex_coord.x * texw;\r\n            TexCoords[i].y = vertices[i].tex_coord.y * texh;\r\n        } else {\r\n            TexCoords[i] = vertices[i].tex_coord;\r\n        }\r\n    }\r\n\r\n    unsigned short newIndicies[num_indices];\r\n    for (int i = 0; i < num_indices; i++) {\r\n        newIndicies[i] = (unsigned short) indices[i];\r\n    }\r\n\r\n    render_data.glEnableClientState(GL_VERTEX_ARRAY);\r\n    render_data.glEnableClientState(GL_COLOR_ARRAY);\r\n    render_data.glVertexPointer(2, GL_FLOAT, 0, &Positions[0]);\r\n    render_data.glColorPointer(4, GL_UNSIGNED_BYTE, 0, &Colors[0]);\r\n    render_data.glTexCoordPointer(2, GL_FLOAT, 0, &TexCoords[0]);\r\n\r\n    render_data.glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);\r\n    render_data.glEnable(GL_BLEND);\r\n    render_data.glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\r\n    render_data.glDrawElements(GL_TRIANGLES, num_indices, GL_UNSIGNED_SHORT, newIndicies);\r\n    render_data.glDisableClientState(GL_VERTEX_ARRAY);\r\n    render_data.glDisableClientState(GL_COLOR_ARRAY);\r\n    render_data.glDisableClientState(GL_TEXTURE_COORD_ARRAY);\r\n\r\n    if (sdl_texture) {\r\n        SDL_GL_UnbindTexture(sdl_texture);\r\n        render_data.glDisableClientState(GL_TEXTURE_COORD_ARRAY);\r\n    }\r\n\r\n    render_data.glColor4f(1.0, 1.0, 1.0, 1.0);\r\n    render_data.glPopMatrix();\r\n}\r\n}}}\r\n\r\n{{{#!highlight cpp\r\n    SDL_Texture* sdl_texture = NULL;\r\n    if(texture) render_data.glUseProgram(program_texture_id);\r\n    else render_data.glUseProgram(program_color_id);\r\n    int width, height;\r\n    SDL_Rect rvp;\r\n    SDL_RenderGetViewport(renderer, &rvp);\r\n\r\n    GLfloat projection[4][4];\r\n\r\n    // Prepare an orthographic projection\r\n    projection[0][0] = 2.0f / rvp.w;\r\n    projection[0][1] = 0.0f;\r\n    projection[0][2] = 0.0f;\r\n    projection[0][3] = 0.0f;\r\n    projection[1][0] = 0.0f;\r\n    //if (renderer->target) {\r\n    //    projection[1][1] = 2.0f / height;\r\n    //} else {\r\n        projection[1][1] = -2.0f / rvp.h;\r\n    //}\r\n    projection[1][2] = 0.0f;\r\n    projection[1][3] = 0.0f;\r\n    projection[2][0] = 0.0f;\r\n    projection[2][1] = 0.0f;\r\n    projection[2][2] = 0.0f;\r\n    projection[2][3] = 0.0f;\r\n    projection[3][0] = -1.0f;\r\n    //if (renderer->target) {\r\n    //    projection[3][1] = -1.0f;\r\n    //} else {\r\n        projection[3][1] = 1.0f;\r\n    //}\r\n    projection[3][2] = 0.0f;\r\n    projection[3][3] = 1.0f;\r\n\r\n    // Set the projection matrix\r\n    if (texture) {\r\n        render_data.glUniformMatrix4fv(u_texture_projection, 1, GL_FALSE, (GLfloat *)projection);\r\n        render_data.glUniform2f(u_texture_translation, translation.x, translation.y);\r\n    } else {\r\n        render_data.glUniformMatrix4fv(u_color_projection, 1, GL_FALSE, (GLfloat *)projection);\r\n        render_data.glUniform2f(u_color_translation, translation.x, translation.y);\r\n    }\r\n\r\n    render_data.glEnable(GL_BLEND);\r\n    render_data.glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\r\n\r\n    float texw, texh;\r\n\r\n    unsigned short newIndicies[num_indices];\r\n    for (int i = 0; i < num_indices; i++) {\r\n      newIndicies[i] = (unsigned short) indices[i];\r\n    }\r\n\r\n    glVertexAttribPointer(ROCKETGLUE_ATTRIBUTE_POSITION, 2, GL_FLOAT, GL_FALSE, sizeof(Rocket::Core::Vertex), &vertices[0].position);\r\n    glVertexAttribPointer(ROCKETGLUE_ATTRIBUTE_COLOR, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(Rocket::Core::Vertex), &vertices[0].colour);\r\n    render_data.glEnableVertexAttribArray(ROCKETGLUE_ATTRIBUTE_POSITION);\r\n    render_data.glEnableVertexAttribArray(ROCKETGLUE_ATTRIBUTE_TEXCOORD);\r\n    render_data.glEnableVertexAttribArray(ROCKETGLUE_ATTRIBUTE_COLOR);\r\n\r\n    if (texture) {\r\n        sdl_texture = (SDL_Texture *) texture;\r\n        SDL_GL_BindTexture(sdl_texture, &texw, &texh);\r\n        render_data.glUniform1i(u_texture, 0);\r\n        glVertexAttribPointer(ROCKETGLUE_ATTRIBUTE_TEXCOORD, 2, GL_FLOAT, GL_FALSE, sizeof(Rocket::Core::Vertex), &vertices[0].tex_coord);\r\n    } else {\r\n        render_data.glActiveTexture(GL_TEXTURE0);\r\n        render_data.glDisable(GL_TEXTURE_2D);\r\n        render_data.glDisableVertexAttribArray(ROCKETGLUE_ATTRIBUTE_TEXCOORD);\r\n    }\r\n\r\n    render_data.glDrawElements(GL_TRIANGLES, num_indices, GL_UNSIGNED_SHORT, newIndicies);\r\n\r\n    /* We can disable ROCKETGLUE_ATTRIBUTE_COLOR (2) safely as SDL will reenable the vertex attrib 2 if it is required */\r\n    render_data.glDisableVertexAttribArray(ROCKETGLUE_ATTRIBUTE_COLOR);\r\n\r\n    /* Leave ROCKETGLUE_ATTRIBUTE_POSITION (0) and ROCKETGLUE_ATTRIBUTE_TEXCOORD (1) enabled for compatibility with SDL which\r\n       doesn't re enable them when you call RenderCopy/Ex */\r\n    if(sdl_texture) SDL_GL_UnbindTexture(sdl_texture);\r\n    else render_data.glEnableVertexAttribArray(ROCKETGLUE_ATTRIBUTE_TEXCOORD);\r\n\r\n    /* Reset blending and draw a fake point just outside the screen to let SDL know that it needs to reset its state in case it wants to render a texture */\r\n    render_data.glDisable(GL_BLEND);\r\n    SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_NONE);\r\n    SDL_RenderDrawPoint(renderer, -1, -1);\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nIf provided, '''texw''' and '''texh''' will be filled with the width and height values suitable for the provided texture.\r\nIn most cases, both will be 1.0, however, on systems that support the GL_ARB_texture_rectangle extension, these values will actually be the pixel width and height used to create the texture, so this factor needs to be taken into account when providing texture coordinates to OpenGL.\r\n\r\nYou need a renderer to create a [[SDL_Texture]], therefore you can only use this function with an implicit OpenGL context from [[SDL_CreateRenderer]](), not with your own OpenGL context.\r\nIf you need control over your OpenGL context, you need to write your own texture-loading methods.\r\n\r\nAlso note that SDL may upload RGB textures as BGR (or vice-versa), and re-order the color channels in the shaders phase, so the uploaded texture may have swapped color channels.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_MakeCurrent]]\r\n .[[SDL_GL_UnbindTexture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GL_CreateContext",
      "Uri": "https://wiki.libsdl.org/SDL_GL_CreateContext",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:12:44.6163767-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_GL_CreateContext =\r\nUse this function to create an OpenGL context for use with an OpenGL window, and make it current.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GLContext SDL_GL_CreateContext(SDL_Window* window)\r\n}}}\r\n== Function Parameters ==\r\n||'''window''' ||the window to associate with the context ||\r\n\r\n\r\n== Return Value ==\r\nReturns the OpenGL context associated with '''window''' or NULL on error; call [[SDL_GetError]]() for more details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n// Window mode MUST include SDL_WINDOW_OPENGL for use with OpenGL.\r\nSDL_Window *window = SDL_CreateWindow(\r\n    \"SDL2/OpenGL Demo\", 0, 0, 640, 480, \r\n    SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);\r\n  \r\n// Create an OpenGL context associated with the window.\r\nSDL_GLContext glcontext = SDL_GL_CreateContext(window);\r\n\r\n// now you can make GL calls.\r\nglClearColor(0,0,0,1);\r\nglClear(GL_COLOR_BUFFER_BIT);\r\nSDL_GL_SwapWindow(window);\r\n\r\n// Once finished with OpenGL functions, the SDL_GLContext can be deleted.\r\nSDL_GL_DeleteContext(glcontext);  \r\n}}}\r\n== Remarks ==\r\nWindows users new to OpenGL should note that, for historical reasons, GL functions added after OpenGL version 1.1 are not available by default. Those functions must be loaded at run-time, either with an OpenGL extension-handling library or with [[SDL_GL_GetProcAddress]]() and its related functions.\r\n\r\nSDL_GLContext is an alias for `void *`.\r\n\r\n== Related Functions ==\r\n . [[SDL_GL_DeleteContext]]\r\n . [[SDL_GL_MakeCurrent]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryVideo\r\n"
    },
    {
      "Name": "SDL_GL_DeleteContext",
      "Uri": "https://wiki.libsdl.org/SDL_GL_DeleteContext",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:12:44.8547511-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_DeleteContext =\r\nUse this function to delete an OpenGL context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GL_DeleteContext(SDL_GLContext context)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''context'''||the OpenGL context to be deleted||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_CreateContext]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_ExtensionSupported",
      "Uri": "https://wiki.libsdl.org/SDL_GL_ExtensionSupported",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:12:50.1222996-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_ExtensionSupported =\r\nUse this function to check if an OpenGL extension is supported for the current context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_GL_ExtensionSupported(const char* extension)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''extension'''||the name of the extension to check||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the extension is supported, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n    if (SDL_GL_ExtensionSupported(\"GL_EXT_framebuffer_blit\")) {\r\n        draw_to_the_screen_with_framebuffer_blit();   // faster!\r\n    } else {\r\n        draw_to_the_screen_with_a_textured_quad();  // slower!\r\n    }\r\n\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThis function operates on the current GL context; you must have created a context and it must be current before calling this function. Do not assume that all contexts you create will have the same set of extensions available, or that recreating an existing context will offer the same extensions again.\r\n\r\nWhile it's probably not a massive overhead, this function is not an O(1) operation. Check the extensions you care about after creating the GL context and save that information somewhere instead of calling the function every time you need to know.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_GetAttribute",
      "Uri": "https://wiki.libsdl.org/SDL_GL_GetAttribute",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:30.6573912-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_GetAttribute =\r\nUse this function to get the actual value for an attribute from the current context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_GetAttribute(SDL_GLattr attr,\r\n                        int*       value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''attr'''||the [[SDL_GLattr]] structure to query||\r\n||'''value'''||a pointer filled in with the current value of '''attr'''||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''attr''' may be one of the following:\r\n<<Include(SDL_GLattr, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_ResetAttributes]]\r\n .[[SDL_GL_SetAttribute]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_GetCurrentContext",
      "Uri": "https://wiki.libsdl.org/SDL_GL_GetCurrentContext",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:30.8935861-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GL_GetCurrentContext =\r\nUse this function to get the currently active OpenGL context.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GLContext SDL_GL_GetCurrentContext(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the currently active OpenGL context or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_MakeCurrent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GL_GetCurrentWindow",
      "Uri": "https://wiki.libsdl.org/SDL_GL_GetCurrentWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:31.1310819-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GL_GetCurrentWindow =\r\nUse this function to get the currently active OpenGL window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Window* SDL_GL_GetCurrentWindow(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the currently active OpenGL window on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_GetDrawableSize",
      "Uri": "https://wiki.libsdl.org/SDL_GL_GetDrawableSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:31.3697591-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GL_GetDrawableSize =\r\nUse this function to get the size of a window's underlying drawable in pixels (for use with glViewport).\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GL_GetDrawableSize(SDL_Window* window,\r\n                            int*        w,\r\n                            int*        h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window from which the drawable size should be queried||\r\n||'''w'''||a pointer to variable for storing the width in pixels, may be NULL||\r\n||'''h'''||a pointer to variable for storing the height in pixels, may be NULL||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n\r\nThis may differ from [[SDL_GetWindowSize]]() if we're rendering to a high-DPI drawable, i.e. the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a platform with high-DPI support (Apple calls this \"Retina\"), and not disabled by the [[SDL_HINT_VIDEO_HIGHDPI_DISABLED]] hint.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateWindow]]\r\n .[[SDL_GetWindowSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GL_GetProcAddress",
      "Uri": "https://wiki.libsdl.org/SDL_GL_GetProcAddress",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:31.6081543-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_GetProcAddress =\r\nUse this function to get an OpenGL function by name.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_GL_GetProcAddress(const char* proc)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''proc'''||the name of an OpenGL function||\r\n\r\n== Return Value ==\r\nReturns a pointer to the named OpenGL function.  The returned pointer should be cast to the appropriate function signature.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\ntypedef void (APIENTRY * GL_ActiveTextureARB_Func)(unsigned int);\r\nGL_ActiveTextureARB_Func glActiveTextureARB_ptr = 0;\r\n\r\n/* Get function pointer */\r\nglActiveTextureARB_ptr=(GL_ActiveTextureARB_Func) SDL_GL_GetProcAddress(\"glActiveTextureARB\");\r\n\r\n/* It was your responsibility to make sure this was a valid function to call! */\r\nglActiveTextureARB_ptr(GL_TEXTURE0_ARB);\r\n}}}\r\n\r\n== Remarks ==\r\nIf the GL library is loaded at runtime with [[SDL_GL_LoadLibrary]](), then all GL functions must be retrieved this way. Usually this is used to retrieve function pointers to OpenGL extensions.\r\n\r\nThere are some quirks to looking up OpenGL functions that require some extra care from the application. If you code carefully, you can handle these quirks without any platform-specific code, though:\r\n * On Windows, function pointers are specific to the current GL context; this means you need to have created a GL context and made it current before calling [[SDL_GL_GetProcAddress]](). If you recreate your context or create a second context, you should assume that any existing function pointers aren't valid to use with it. This is (currently) a Windows-specific limitation, and in practice lots of drivers don't suffer this limitation, but it is still the way the wgl API is documented to work and you should expect crashes if you don't respect it. Store a copy of the function pointers that comes and goes with context lifespan.\r\n * On X11, function pointers returned by this function are valid for any context, and can even be looked up before a context is created at all. This means that, for at least some common OpenGL implementations, if you look up a function that doesn't exist, you'll get a non-NULL result that is _NOT_ safe to call. You must always make sure the function is actually available for a given GL context before calling it, by checking for the existence of the appropriate extension with [[SDL_GL_ExtensionSupported]](), or verifying that the version of OpenGL you're using offers the function as core functionality.\r\n * Some OpenGL drivers, on all platforms, ''will'' return NULL if a function isn't supported, but you can't count on this behavior. Check for extensions you use, and if you get a NULL anyway, act as if that extension wasn't available. This is probably a bug in the driver, but you can code defensively for this scenario anyhow.\r\n * Just because you're on Linux/Unix, don't assume you'll be using X11. Next-gen display servers are waiting to replace it, and may or may not make the same promises about function pointers.\r\n * OpenGL function pointers must be declared `APIENTRY` as in the example code. This will ensure the proper calling convention is followed on platforms where this matters (Win32) thereby avoiding stack corruption.\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_ExtensionSupported]]\r\n .[[SDL_GL_LoadLibrary]]\r\n .[[SDL_GL_UnloadLibrary]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_GetSwapInterval",
      "Uri": "https://wiki.libsdl.org/SDL_GL_GetSwapInterval",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:36.8903379-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_GetSwapInterval =\r\nUse this function to get the swap interval for the current OpenGL context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_GetSwapInterval(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns 0 if there is no vertical retrace synchronization, 1 if the buffer swap is synchronized with the vertical retrace, and -1 if late swaps happen immediately instead of waiting for the next retrace; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf the system can't determine the swap interval, or there isn't a valid current context, this function will return 0 as a safe default.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_SetSwapInterval]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_LoadLibrary",
      "Uri": "https://wiki.libsdl.org/SDL_GL_LoadLibrary",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:37.1905134-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_LoadLibrary =\r\nUse this function to dynamically load an OpenGL library.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_LoadLibrary(const char* path)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''path'''||the platform dependent OpenGL library name, or NULL to open the default OpenGL library||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis should be done after initializing the video driver, but before creating any OpenGL windows. If no OpenGL library is loaded, the default library will be loaded upon creation of the first OpenGL window.\r\n\r\nIf you do this, you need to retrieve all of the GL functions used in your program from the dynamic library using [[SDL_GL_GetProcAddress]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_GetProcAddress]]\r\n .[[SDL_GL_UnloadLibrary]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_MakeCurrent",
      "Uri": "https://wiki.libsdl.org/SDL_GL_MakeCurrent",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:37.4780664-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_MakeCurrent =\r\nUse this function to set up an OpenGL context for rendering into an OpenGL window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_MakeCurrent(SDL_Window*   window,\r\n                       SDL_GLContext context)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to associate with the context||\r\n||'''context'''||the OpenGL context to associate with the window||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_CreateContext]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_ResetAttributes",
      "Uri": "https://wiki.libsdl.org/SDL_GL_ResetAttributes",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:37.7587897-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GL_ResetAttributes =\r\nUse this function to reset all previously set OpenGL context attributes to their default values.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GL_ResetAttributes(void)\r\n}}}\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_GetAttribute]]\r\n .[[SDL_GL_SetAttribute]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GL_SetAttribute",
      "Uri": "https://wiki.libsdl.org/SDL_GL_SetAttribute",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:38.0350069-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_SetAttribute =\r\nUse this function to set an OpenGL window attribute before window creation.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_SetAttribute(SDL_GLattr attr,\r\n                        int        value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''attr'''||the OpenGL attribute to set; see [[#Remarks|Remarks]] for details||\r\n||'''value'''||the desired value for the attribute||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Window *window;\r\nSDL_GLContext context;\r\n\r\nSDL_GL_SetAttribute(SDL_GL_RED_SIZE, 5);\r\nSDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);\r\nSDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 5);\r\nSDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);\r\nSDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);\r\n\r\nwindow = SDL_CreateWindow(\"OpenGL Window\", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_OPENGL);\r\nif (!window) {\r\n    fprintf(stderr, \"Couldn't create window: %s\\n\", SDL_GetError());\r\n    return;\r\n}\r\n\r\ncontext = SDL_GL_CreateContext(window);\r\nif (!context) {\r\n    fprintf(stderr, \"Couldn't create context: %s\\n\", SDL_GetError());\r\n    return;\r\n}\r\n\r\nint r, g, b;\r\nSDL_GL_GetAttribute(SDL_GL_RED_SIZE, &r);\r\nSDL_GL_GetAttribute(SDL_GL_GREEN_SIZE, &g);\r\nSDL_GL_GetAttribute(SDL_GL_BLUE_SIZE, &b);\r\n\r\nprintf(\"Red size: %d, Green size: %d, Blue size: %d\\n\", r, g, b);\r\n}}}\r\n\r\n== Remarks ==\r\nThis function sets the OpenGL attribute '''attr''' to '''value'''. The requested attributes should be set before creating an OpenGL window. You should use [[SDL_GL_GetAttribute]]() to check the values after creating the OpenGL context, since the values obtained can differ from the requested ones.\r\n\r\n'''attr''' may be one of the following [[SDL_GLattr]] values:\r\n<<Include(SDL_GLattr, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_GetAttribute]]\r\n .[[SDL_GL_ResetAttributes]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_SetSwapInterval",
      "Uri": "https://wiki.libsdl.org/SDL_GL_SetSwapInterval",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:38.3205147-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_SetSwapInterval =\r\nUse this function to set the swap interval for the current OpenGL context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_SetSwapInterval(int interval)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''interval'''||0 for immediate updates, 1 for updates synchronized with the vertical retrace, -1 for adaptive vsync; see [[#Remarks|Remarks]]||\r\n\r\n== Return Value ==\r\nReturns 0 on success or -1 if setting the swap interval is not supported; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSome systems allow specifying -1 for the interval, to enable adaptive vsync. Adaptive vsync works the same as vsync, but if you've already missed the vertical retrace for a given frame, it swaps buffers immediately, which might be less jarring for the user during occasional framerate drops. If application requests adaptive vsync and the system does not support it, this function will fail and return -1. In such a case, you should probably retry the call with 1 for the interval.\r\n\r\nAdaptive vsync is implemented for some glX drivers with [[http://www.opengl.org/registry/specs/EXT/glx_swap_control_tear.txt|GLX_EXT_swap_control_tear]] and for some Windows drivers with [[http://www.opengl.org/registry/specs/EXT/wgl_swap_control_tear.txt|WGL_EXT_swap_control_tear]].  Read more on the [[https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync|Khronos wiki]]\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_GetSwapInterval]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_SwapWindow",
      "Uri": "https://wiki.libsdl.org/SDL_GL_SwapWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:43.6310196-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_SwapWindow =\r\nUse this function to update a window with OpenGL rendering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GL_SwapWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to change||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\nSDL_Window* window = SDL_CreateWindow(\"SDL2/OpenGL Demo\", 30, 30, 640, 480, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);\r\n      \r\n/* Create an OpenGL context associated with the window. */\r\nSDL_GLContext glcontext = SDL_GL_CreateContext(window);\r\n\r\n/* This makes our buffer swap syncronized with the monitor's vertical refresh */\r\nSDL_GL_SetSwapInterval(1);\r\n\r\n/* Clear context */\r\nglClearColor(0,0,0,1);\r\nglClear(GL_COLOR_BUFFER_BIT);\r\n\r\n/* <Extra drawing functions here> */ \r\n\r\n/* Swap our buffer to display the current contents of buffer on screen */ \r\nSDL_GL_SwapWindow(window);\r\n\r\n\r\n}}}\r\n\r\n== Remarks ==\r\nThis is used with double-buffered OpenGL contexts, which are the default.\r\n\r\nOn Mac OS X make sure you bind 0 to the draw framebuffer before swapping the window, otherwise nothing will happen. See [[http://renderingpipeline.com/2012/05/nsopenglcontext-flushbuffer-might-not-do-what-you-think/|this blog post]] for more info.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GL_UnbindTexture",
      "Uri": "https://wiki.libsdl.org/SDL_GL_UnbindTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:13:43.9411895-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_GL_UnbindTexture =\r\nUse this function to unbind an OpenGL/ES/ES2 texture from the current context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GL_UnbindTexture(SDL_Texture* texture)\r\n}}}\r\n== Function Parameters ==\r\n||'''texture''' ||the texture to unbind from the current OpenGL/ES/ES2 context ||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success, or -1 if the operation is not supported\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Remarks ==\r\nSee [[SDL_GL_BindTexture]]() for examples on how to use these functions\r\n\r\n== Related Functions ==\r\n . [[SDL_GL_BindTexture]]\r\n . [[SDL_GL_MakeCurrent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GL_UnloadLibrary",
      "Uri": "https://wiki.libsdl.org/SDL_GL_UnloadLibrary",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:13:44.2656687-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GL_UnloadLibrary =\r\nUse this function to unload the OpenGL library previously loaded by [[SDL_GL_LoadLibrary]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GL_UnloadLibrary(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_LoadLibrary]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GameControllerAddMapping",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerAddMapping",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:13:44.5480738-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerAddMapping =\r\nUse this function to add support for controllers that SDL is unaware of or to cause an existing controller to have a different binding.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GameControllerAddMapping(const char* mappingString)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''mappingString'''||the mapping string; see below||\r\n\r\n\r\n== Return Value ==\r\nReturns 1 if a new mapping is added, 0 if an existing mapping is updated, -1 on error; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThe mapping string has the format \"GUID,name,mapping\", where GUID is the string value from [[SDL_JoystickGetGUIDString]](), name is the human readable string for the device and mappings are controller mappings to joystick ones.  Under Windows there is a reserved GUID of \"xinput\" that covers all XInput devices.  The mapping format for joystick is:\r\n||bX||a joystick button, index X||\r\n||hX.Y||hat X with value Y||\r\n||aX||axis X of the joystick||\r\nButtons can be used as a controller axes and vice versa.\r\n\r\nThis string shows an example of a valid mapping for a controller:\r\n\"341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7\"\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerMapping]]\r\n .[[SDL_GameControllerMappingForGUID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n"
    },
    {
      "Name": "SDL_GameControllerAddMappingsFromFile",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerAddMappingsFromFile",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:13:44.8335747-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerAddMappingsFromFile =\r\nUse this function to load a set of [[CategoryGameController|Game Controller]] mappings from a file, filtered by the current [[SDL_GetPlatform]]().\r\nA community sourced database of controllers is available [[https://raw.github.com/gabomdq/SDL_GameControllerDB/master/gamecontrollerdb.txt|here|target=\"_blank\"]] (on !GitHub).\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GameControllerAddMappingsFromFile(const char* filename)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''filename'''||the name of the database you want to load||\r\n\r\n\r\n== Return Value ==\r\n<<Include(SDL_GameControllerAddMappingsFromRW, , , from=\"== Return Value ==\", to=\"== Code Examples ==\")>>\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_GameControllerAddMappingsFromFile(\"gamecontrollerdb.txt\");\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n<<Include(SDL_GameControllerAddMappingsFromRW, , , from=\"== Remarks ==\", to=\"== Version ==\")>>\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerAddMapping]]\r\n .[[SDL_GameControllerAddMappingsFromRW]]\r\n .[[SDL_GameControllerMappingForGUID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerAddMappingsFromRW",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerAddMappingsFromRW",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:13:45.1527019-06:00",
      "RawText": "## page was renamed from SDL_GameControllerAddMappingsFromFile\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerAddMappingsFromRW =\r\nUse this function to load a set of [[CategoryGameController|Game Controller]] mappings from a seekable SDL data stream (memory or file), filtered by the current [[SDL_GetPlatform]]().\r\nA community sourced database of controllers is available [[https://raw.github.com/gabomdq/SDL_GameControllerDB/master/gamecontrollerdb.txt|here|target=\"_blank\"]] (on !GitHub).\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GameControllerAddMappingsFromRW(SDL_RWops* rw,\r\n                                        int        freerw)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''rw'''||the data stream for the mappings to be added||\r\n||'''freerw'''||non-zero to close the stream after being read||\r\n\r\n\r\n== Return Value ==\r\nReturns the number of mappings added or -1 on error; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_GameControllerAddMappingsFromRW(SDL_RWFromFile(\"gamecontrollerdb.txt\", \"rb\"), 1);\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nYou can call this function several times if needed to load different database files.\r\n \r\nIf a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.\r\n\r\nMappings not belonging to the current platform or with no platform field specified will be ignored (i.e. mappings for Linux will be ignored in Windows, etc).\r\n\r\nThis function will load the text database entirely in memory before processing it, so take this into consideration if you are in a memory constrained environment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerAddMapping]]\r\n .[[SDL_GameControllerAddMappingsFromFile]]\r\n .[[SDL_GameControllerMappingForGUID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n"
    },
    {
      "Name": "SDL_GameControllerClose",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerClose",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:30.7968919-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerClose  =\r\nUse this function to close a game controller previously opened with [[SDL_GameControllerOpen]]().\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GameControllerClose(SDL_GameController* gamecontroller)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||a game controller identifier previously returned by [[SDL_GameControllerOpen]]()||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* Attempt to open every controller. */\r\nfor (int i = 0; i < SDL_NumJoysticks(); ++i) {\r\n    if (SDL_IsGameController(i)) {\r\n        SDL_GameController *controller = SDL_GameControllerOpen(i);\r\n        if (controller) {\r\n            SDL_GameControllerClose(controller);\r\n        } else {\r\n            fprintf(stderr, \"Could not open gamecontroller %i: %s\\n\", i, SDL_GetError());\r\n        }\r\n    }\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerEventState",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerEventState",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:31.034766-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerEventState =\r\nUse this function to find the current state of, enable, or disable events dealing with Game Controllers. This will not disable Joystick events, which can also be fired by a controller (see [[SDL_JoystickEventState]]()).\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GameControllerEventState(int state)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''state'''||can be one of SDL_QUERY, SDL_IGNORE, or SDL_ENABLE||\r\nNote: You may use -1, 0, or 1 in place of SDL_QUERY, SDL_IGNORE, or SDL_ENABLE respectively.\r\n\r\n\r\n== Return Value ==\r\nReturns the same value passed to the function, with exception to -1 (SDL_QUERY), which will return the current state.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nprintf(\"%i\\n\", SDL_GameControllerEventState(SDL_QUERY));  /* prints 1 */\r\nprintf(\"%i\\n\", SDL_GameControllerEventState(SDL_IGNORE)); /* prints 0 */\r\nprintf(\"%i\\n\", SDL_GameControllerEventState(SDL_QUERY));  /* prints 0 */\r\n}}}\r\n\r\n== Remarks ==\r\nIf controller events are disabled, you must call [[SDL_GameControllerUpdate]]() yourself and check the state of the controller when you want controller information.\r\n\r\nAny number can be passed to [[SDL_GameControllerEventState]](), but only -1, 0, and 1 will have any effect. Other numbers will just be returned.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickEventState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n"
    },
    {
      "Name": "SDL_GameControllerFromInstanceID",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerFromInstanceID",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:31.2738133-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerFromInstanceID =\r\nUse this function to get the SDL_!GameController associated with an instance id.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GameController* SDL_GameControllerFromInstanceID(SDL_JoystickID joyid)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''joyid'''||the instance id to get the SDL_!GameController for||\r\n\r\n\r\n== Return Value ==\r\nReturns an SDL_!GameController on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetAttached",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetAttached",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:31.5112305-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\"style=\"color:#FF0000; ;text-align:center\">DRAFT ||\r\n\r\n\r\n= SDL_GameControllerGetAttached =\r\nUse this function to check if a controller has been opened and is currently connected.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_GameControllerGetAttached(SDL_GameController* gamecontroller)\r\n}}}\r\n== Function Parameters ==\r\n||'''gamecontroller'''||a game controller identifier previously returned by [[SDL_GameControllerOpen]]() ||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the controller has been opened and currently connected, or SDL_FALSE if it has not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerClose]]\r\n .[[SDL_GameControllerOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n"
    },
    {
      "Name": "SDL_GameControllerGetAxis",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetAxis",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:31.7544852-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetAxis =\r\nUse this function to get the current state of an axis control on a game controller.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSint16 SDL_GameControllerGetAxis(SDL_GameController*    gamecontroller,\r\n                                 SDL_GameControllerAxis axis)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||a game controller||\r\n||'''axis'''||an axis index (one of the [[SDL_GameControllerAxis]] values)||\r\n\r\n\r\n== Return Value ==\r\nReturns axis state (including 0) on success or 0 (also) on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe axis indices start at index 0.\r\n\r\nThe state is a value ranging from -32768 to 32767. Triggers, however, range from 0 to 32767 (they never return a negative value).\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetButton]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetAxisFromString",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetAxisFromString",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:31.9905062-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n= SDL_GameControllerGetAxisFromString =\r\nUse this function to convert a string into an enum representation for an [[SDL_GameControllerAxis]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GameControllerAxis SDL_GameControllerGetAxisFromString(const char* pchString)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''pchString'''||string representing a SDL_!GameController axis||\r\n\r\n\r\n== Return Value ==\r\nReturns the [[SDL_GameControllerAxis]] enum corresponding to the input string, or SDL_CONTROLLER_AXIS_INVALID if no match was found.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function is called internally to translate SDL_!GameController mapping strings for the underlying joystick device into the consistent SDL_!GameController mapping.  You do not normally need to call this function unless you are parsing SDL_!GameController mappings in your own code.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetStringForAxis]]\r\n\r\n##Will discuss on the docs list about what related functions to include here.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetBindForAxis",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetBindForAxis",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:38.4356111-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetBindForAxis =\r\nUse this function to get the SDL joystick layer binding for a controller axis mapping.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(SDL_GameController*    gamecontroller,\r\n                                                              SDL_GameControllerAxis axis)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||a game controller||\r\n||'''axis'''||an axis enum value (one of the [[SDL_GameControllerAxis]] values)||\r\n\r\n\r\n== Return Value ==\r\nReturns a [[SDL_GameControllerButtonBind]] describing the bind.<<BR>>\r\nOn failure (like the given Controller axis doesn't exist on the device), its `.bindType` will be `SDL_CONTROLLER_BINDTYPE_NONE`.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Structures ==\r\n .[[SDL_GameControllerButtonBind]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetBindForButton]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetBindForButton",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetBindForButton",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:38.7281823-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetBindForButton =\r\nUse this function to get the SDL joystick layer binding for this controller button mapping.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController*      gamecontroller,\r\n                                                                SDL_GameControllerButton button)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||a game controller||\r\n||'''button'''||a button enum value (one of the [[SDL_GameControllerButton]] values)||\r\n\r\n\r\n== Return Value ==\r\nReturns a [[SDL_GameControllerButtonBind]] describing the bind.<<BR>>\r\nOn failure (like the given Controller button doesn't exist on the device), its `.bindType` will be `SDL_CONTROLLER_BINDTYPE_NONE`.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Structures ==\r\n .[[SDL_GameControllerButtonBind]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetBindForAxis]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetButton",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetButton",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:39.1044662-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetButton =\r\nUse this function to get the current state of a button on a game controller.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint8 SDL_GameControllerGetButton(SDL_GameController*      gamecontroller,\r\n                                  SDL_GameControllerButton button)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||a game controller||\r\n||'''button'''||a button index (one of the [[SDL_GameControllerButton]] values)||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Return Value ==\r\nReturns 1 for pressed state or 0 for not pressed state or error; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe button indices start at index 0.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetAxis]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetButtonFromString",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetButtonFromString",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:39.4568483-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetButtonFromString =\r\nUse this function to turn a string into a button mapping.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GameControllerButton SDL_GameControllerGetButtonFromString(const char* pchString)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''pchString'''||a string||\r\n\r\n\r\n== Return Value ==\r\nReturns a button mapping ([[SDL_GameControllerButton]]) on success or SDL_CONTROLLER_BUTTON_INVALID on failure.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetAxisFromString]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetJoystick",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetJoystick",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:39.731339-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetJoystick =\r\nUse this function to get the Joystick ID from a Game Controller. The game controller builds on the Joystick API, but to be able to use the Joystick's functions with a gamepad, you need to use this first to get the joystick object.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController* gamecontroller)\r\n}}}\r\n\r\n##Fill in the above syntax per the Style Guide, then delete this comment.\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||the game controller object that you want to get a joystick from||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Return Value ==\r\nReturns a SDL_Joystick object; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include <stdio.h> /* for printf() */\r\n\r\n/* ... */\r\n\r\nSDL_GameController *ctrl;\r\nSDL_Joystick *joy;\r\nint i;\r\n\r\nfor(i = 0; i < SDL_NumJoysticks(); ++i) {\r\n    if (SDL_IsGameController(i)) {\r\n        printf(\"Index \\'%i\\' is a compatible controller, named \\'%s\\'\\n\", i, SDL_GameControllerNameForIndex(i));\r\n        ctrl = SDL_GameControllerOpen(i);\r\n        joy = SDL_GameControllerGetJoystick(ctrl);\r\n    } else {\r\n        printf(\"Index \\'%i\\' is not a compatible controller.\\n\", i);\r\n    }\r\n}\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function will give you a SDL_Joystick object, which allows you to use the SDL_Joystick functions with a SDL_!GameController object. This would be useful for getting a joystick's position at any given time, even if it hasn't moved (moving it would produce an event, which would have the axis' value).\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\nThe pointer returned is owned by the SDL_!GameController.  You should not call [[SDL_JoystickClose]]() on it, for example, since doing so will likely cause SDL to crash.\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerGetStringForAxis",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetStringForAxis",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:39.9746047-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetStringForAxis =\r\nUse this function to convert from an axis enum to a string.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''axis'''||an enum value for a given [[SDL_GameControllerAxis]]||\r\n\r\n\r\n== Return Value ==\r\nReturns a string for the given axis, or NULL if an invalid axis is specified.  The string returned is of the format used by SDL_!GameController mapping strings.\r\n##; call [[SDL_GetError]]() for more information.\r\n## Doesn't currently SDL_SetError.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetAxisFromString]]\r\n##At the very least this should refer to its opposite.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n"
    },
    {
      "Name": "SDL_GameControllerGetStringForButton",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerGetStringForButton",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:45.2211174-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerGetStringForButton =\r\nUse this function to turn a button enum into a string mapping.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GameControllerGetStringForButton(SDL_GameControllerButton button)\r\n}}}\r\n\r\n##Fill in the above syntax per the Style Guide, then delete this comment.\r\n\r\n\r\n== Function Parameters ==\r\n||'''button'''||a button enum value (one of the [[SDL_GameControllerButton]] values)||\r\n\r\n\r\n== Return Value ==\r\nReturns a string mapping on success or NULL on failure.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerGetButtonFromString]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerMapping",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerMapping",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:45.4782133-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerMapping =\r\nUse this function to get the current mapping of a Game Controller.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nchar* SDL_GameControllerMapping(SDL_GameController* gamecontroller)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||the game controller you want to get the current mapping for||\r\n\r\n\r\n== Return Value ==\r\nReturns a string that has the controller's mapping or NULL if no mapping is available; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\n/* ... */\r\n\r\nSDL_GameController *ctrl;\r\nint i;\r\n\r\nSDL_Init(SDL_INIT_GAMECONTROLLER);\r\n\r\nfor (i = 0; i < SDL_NumJoysticks(); ++i) {\r\n    if (SDL_IsGameController(i)) {\r\n        char *mapping;\r\n        SDL_Log(\"Index \\'%i\\' is a compatible controller, named \\'%s\\'\", i, SDL_GameControllerNameForIndex(i));\r\n        ctrl = SDL_GameControllerOpen(i);\r\n        mapping = SDL_GameControllerMapping(ctrl);\r\n        SDL_Log(\"Controller %i is mapped as \\\"%s\\\".\", i, mapping);\r\n        SDL_free(mapping);\r\n    } else {\r\n        SDL_Log(\"Index \\'%i\\' is not a compatible controller.\", i);\r\n    }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe returned string must be freed with SDL_free().\r\n\r\nMore information about the mapping can be found on the page for [[SDL_GameControllerAddMapping]]().\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerAddMapping]]\r\n .[[SDL_GameControllerMappingForGUID]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerMappingForGUID",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerMappingForGUID",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:45.7265633-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n= SDL_GameControllerMappingForGUID =\r\nUse this function to get the game controller mapping string for a given GUID.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nchar* SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''guid'''||a structure containing the GUID for which a mapping is desired||\r\n\r\n\r\n== Return Value ==\r\nReturns a mapping string or NULL on error; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe returned string must be freed with SDL_free().\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetDeviceGUID]]\r\n .[[SDL_JoystickGetGUID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerName",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerName",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:14:46.007386-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerName =\r\nUse this function to get the implementation dependent name for an opened game controller.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GameControllerName(SDL_GameController* gamecontroller)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gamecontroller'''||a game controller identifier previously returned by [[SDL_GameControllerOpen]]()||\r\n\r\n\r\n== Return Value ==\r\nReturns the implementation dependent name for the game controller, or NULL if there is no name or the identifier passed is invalid.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_GameController *controller = NULL;\r\nfor (int i = 0; i < SDL_NumJoysticks(); ++i) {\r\n    controller = SDL_GameControllerOpen(i);\r\n    if (controller) {\r\n        break;\r\n    }\r\n}\r\n\r\nif (controller) {\r\n    printf(\"Found a valid controller, named: %s\\n\", SDL_GameControllerName(controller));\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThis is the same name as returned by [[SDL_GameControllerNameForIndex]](), but it takes a controller identifier instead of the (unstable) device index.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerNameForIndex]]\r\n .[[SDL_GameControllerOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerNameForIndex",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerNameForIndex",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:15:26.5426236-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerNameForIndex =\r\nUse this function to get the implementation dependent name for the game controller.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GameControllerNameForIndex(int joystick_index)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''joystick_index'''||the device_index of a device, up to [[SDL_NumJoysticks]]()||\r\n\r\n\r\n== Return Value ==\r\nReturns the implementation dependent name for the game controller, or NULL if there is no name or the index is invalid.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nfor (int i = 0; i < SDL_NumJoysticks(); ++i) {\r\n    const char *name = SDL_GameControllerNameForIndex(i);\r\n    if (name) {\r\n        printf(\"Joystick %i has game controller name '%s'\\n\", i, name);\r\n    } else {\r\n        printf(\"Joystick %i has no game controller name.\\n\", i);\r\n    }\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThis function can be called before any controllers are opened.\r\n\r\n'''joystick_index''' is the same as the `device_index` passed to [[SDL_JoystickOpen]]().\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerName]]\r\n .[[SDL_GameControllerOpen]]\r\n .[[SDL_IsGameController]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GameControllerOpen",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerOpen",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:15:26.7920465-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerOpen =\r\nUse this function to open a gamecontroller for use.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_GameController* SDL_GameControllerOpen(int joystick_index)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick_index'''||the device_index of a device, up to [[SDL_NumJoysticks]]()||\r\n\r\n== Return Value ==\r\nReturns a gamecontroller identifier or NULL if an error occurred; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* Open the first available controller. */\r\nSDL_GameController *controller = NULL;\r\nfor (int i = 0; i < SDL_NumJoysticks(); ++i) {\r\n    if (SDL_IsGameController(i)) {\r\n        controller = SDL_GameControllerOpen(i);\r\n        if (controller) {\r\n            break;\r\n        } else {\r\n            fprintf(stderr, \"Could not open gamecontroller %i: %s\\n\", i, SDL_GetError());\r\n        }\r\n    }\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n'''joystick_index''' is the same as the `device_index` passed to [[SDL_JoystickOpen]]().\r\n\r\nThe index passed as an argument refers to the N'th game controller on the system. This index is not the value which will identify this controller in future controller events.  The joystick's instance id (SDL_JoystickID) will be used there instead.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerClose]]\r\n .[[SDL_GameControllerNameForIndex]]\r\n .[[SDL_IsGameController]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n"
    },
    {
      "Name": "SDL_GameControllerUpdate",
      "Uri": "https://wiki.libsdl.org/SDL_GameControllerUpdate",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:15:32.0291941-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GameControllerUpdate =\r\nUse this function to manually pump game controller updates if not using the loop.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GameControllerUpdate(void)\r\n}}}\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function is called automatically by the event loop if events are enabled.  Under such circumstances, it will not be necessary to call this function.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n"
    },
    {
      "Name": "SDL_GetAssertionHandler",
      "Uri": "https://wiki.libsdl.org/SDL_GetAssertionHandler",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T14:15:32.2856411-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetAssertionHandler =\r\nUse this function to get the current assertion handler.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_AssertionHandler SDL_GetAssertionHandler(void** puserdata)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''puserdata'''||pointer which is filled with the \"userdata\" pointer that was passed to [[SDL_SetAssertionHandler]](); see [[#Remarks|Remarks]] for details||\r\n\r\n\r\n== Return Value ==\r\nReturns the SDL_AssertionHandler that is called when an assert triggers.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis returns the function pointer that is called when an assertion is triggered. This is either the value last passed to [[SDL_SetAssertionHandler]](), or if no application-specified function is set, is equivalent to calling [[SDL_GetDefaultAssertionHandler]]().\r\n\r\nThe parameter '''puserdata''' is a pointer to a void*, which will store the \"userdata\" pointer that was passed to [[SDL_SetAssertionHandler]](). This value will always be NULL for the default handler. If you don't care about this data, it is safe to pass a NULL pointer to this function to ignore it.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n== Related Functions ==\r\n .[[SDL_SetAssertionHandler]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetAssertionReport",
      "Uri": "https://wiki.libsdl.org/SDL_GetAssertionReport",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T14:15:32.5299481-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetAssertionReport =\r\nUse this function to get a list of all assertion failures.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst SDL_AssertData* SDL_GetAssertionReport(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a list of all failed assertions or NULL if the list is empty. This memory should not be modified or freed by the application.\r\n\r\n== Code Examples ==\r\nThe proper way to examine this data looks something like this:\r\n{{{#!highlight cpp\r\nconst SDL_AssertData *item = SDL_GetAssertionReport();\r\nwhile (item) {\r\n     printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n\",\r\n          item->condition, item->function, item->filename,\r\n          item->linenum, item->trigger_count,\r\n          item->always_ignore ? \"yes\" : \"no\");\r\n     item = item->next;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function gets all assertions triggered since the last call to [[SDL_ResetAssertionReport]](), or the start of the program.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_ResetAssertionReport]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_GetAudioDeviceName",
      "Uri": "https://wiki.libsdl.org/SDL_GetAudioDeviceName",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:15:32.786247-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetAudioDeviceName =\r\nUse this function to get the name of a specific audio device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetAudioDeviceName(int index,\r\n                                   int iscapture)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''index'''||the index of the audio device; the value ranges from 0 to [[SDL_GetNumAudioDevices]]() - 1||\r\n||'''iscapture'''||non-zero to specify a device that has recording capability||\r\n\r\n== Return Value ==\r\nReturns the name of the audio device at the requested index, or NULL on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint i, count = SDL_GetNumAudioDevices(0);\r\n\r\nfor (i = 0; i < count; ++i) {\r\n    SDL_Log(\"Audio device %d: %s\", i, SDL_GetAudioDeviceName(i, 0));\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is only valid after successfully initializing the audio subsystem.\r\nThe values returned by this function reflect the latest call to [[SDL_GetNumAudioDevices]](); re-call that function to re-detect available hardware.\r\n\r\nThe string returned by this function is UTF-8 encoded, read-only, and managed internally. You are not to free it. If you need to keep the string for any length of time, you should make your own copy of it, as it will be invalid next time any of several other SDL functions is called.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumAudioDevices]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GetAudioDeviceStatus",
      "Uri": "https://wiki.libsdl.org/SDL_GetAudioDeviceStatus",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:15:33.0331908-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetAudioDeviceStatus =\r\nUse this function to get the current audio state of an audio device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dev'''||the ID of an audio device previously opened with [[SDL_OpenAudioDevice]]()||\r\n\r\n== Return Value ==\r\nReturns the [[SDL_AudioStatus]] of the specified audio device which may be one of the following:\r\n<<Include(SDL_AudioStatus, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Code Examples ==\r\n<<Include(SDL_AudioStatus, , , from=\"== Code Examples ==\", to=\"== Remarks ==\")>>\r\n\r\n== Remarks ==\r\n<<Include(SDL_AudioStatus, , , from=\"== Remarks ==\", to=\"== Related Functions ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_PauseAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GetAudioDriver",
      "Uri": "https://wiki.libsdl.org/SDL_GetAudioDriver",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:15:33.2754577-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetAudioDriver =\r\nUse this function to get the name of a built in audio driver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetAudioDriver(int index)\r\n}}}\r\n== Function Parameters ==\r\n||'''index''' ||the index of the audio driver; the value ranges from 0 to [[SDL_GetNumAudioDrivers]]() - 1 ||\r\n\r\n\r\n== Return Value ==\r\nReturns the name of the audio driver at the requested index, or NULL if an invalid index was specified.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint i;\r\n\r\nfor (i = 0; i < SDL_GetNumAudioDrivers(); ++i) {\r\n    printf(\"Audio driver %d: %s\\n\", i, SDL_GetAudioDriver(i));\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe list of audio drivers is given in the order that they are normally initialized by default; the drivers that seem more reasonable to choose first (as far as the SDL developers believe) are earlier in the list.\r\n\r\nThe names of drivers are all simple, low-ASCII identifiers, like \"alsa\", \"coreaudio\" or \"xaudio2\". These never have Unicode characters, and are not meant to be proper names.\r\n\r\n== Related Functions ==\r\n . [[SDL_GetNumAudioDrivers]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GetAudioStatus",
      "Uri": "https://wiki.libsdl.org/SDL_GetAudioStatus",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:15:38.5146224-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetAudioStatus =\r\nThis function is a legacy means of querying the audio device. New programs might want to use [[SDL_GetAudioDeviceStatus]]() instead.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_AudioStatus SDL_GetAudioStatus(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the [[SDL_AudioStatus]] of the specified audio device which may be one of the following:\r\n<<Include(SDL_AudioStatus, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nvoid printStatus(void)\r\n{\r\n    switch (SDL_GetAudioStatus())\r\n    {\r\n        case SDL_AUDIO_STOPPED: printf(\"stopped\\n\"); break;\r\n        case SDL_AUDIO_PLAYING: printf(\"playing\\n\"); break;\r\n        case SDL_AUDIO_PAUSED: printf(\"paused\\n\"); break;\r\n        default: printf(\"???\"); break;\r\n    }\r\n}\r\n\r\nextern SDL_AudioSpec desired;\r\nextern SDL_AudioSpec obtained;\r\n\r\n// device starts paused\r\nif (SDL_OpenAudio(&desired, &obtained) == 0) {\r\n     printStatus();  // prints \"paused\"\r\n     SDL_PauseAudio(0);\r\n     printStatus();  // prints \"playing\"\r\n     SDL_PauseAudio(1);\r\n     printStatus();  // prints \"paused\"\r\n     SDL_CloseAudio();\r\n     printStatus();  // prints \"stopped\"\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is equivalent to calling\r\n\r\n{{{#!highlight cpp\r\nSDL_GetAudioDeviceStatus(1);\r\n}}}\r\n\r\nand is only useful if you used the legacy [[SDL_OpenAudio]]() function.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAudioDeviceStatus]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GetBasePath",
      "Uri": "https://wiki.libsdl.org/SDL_GetBasePath",
      "Categories": [
        "CategoryAPI",
        "CategoryFilesystem"
      ],
      "LastUpdate": "2021-01-16T14:15:38.7553388-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetBasePath =\r\nUse this function to get the directory where the application was run from.  This is where the application data directory is.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nchar* SDL_GetBasePath(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns an absolute path in UTF-8 encoding to the application data directory. NULL will be returned on error or when the platform doesn't implement this functionality, call [[SDL_GetError]]() for more information.\r\n\r\nThe return path will be guaranteed to end with a path separator ('\\' on Windows, '/' on most other platforms)\r\n\r\nThe pointer returned is owned by you. Please call SDL_free() on the pointer when you are done with it.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\nchar *data_path = NULL;\r\n\r\nvoid InitializeDataPath() {\r\n    char *base_path = SDL_GetBasePath();\r\n    if (base_path) {\r\n        data_path = base_path;\r\n    } else {\r\n        data_path = SDL_strdup(\"./\");\r\n    }\r\n}\r\n\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n\r\nThis is not necessarily a fast call, though, so you should call this once near startup and save the string if you need it.\r\n\r\n'''Mac OS X and iOS Specific Functionality''':\r\nIf the application is in a \".app\" bundle, this function returns the Resource directory (e.g. !MyApp.app/Contents/Resources/). This behaviour can be overridden by adding a property to the Info.plist file. Adding a string key with the name SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the behaviour.\r\n\r\nSupported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an application in /Applications/SDLApp/MyApp.app):\r\n\r\n||''Value''||''Description''||''Example returned path''||\r\n||'''resource'''||the bundle resource directory (the default)||/Applications/SDLApp/MyApp.app/Contents/Resources||\r\n||'''bundle'''||the Bundle directory||/Applications/SDLApp/MyApp.app/||\r\n||'''parent'''||the containing directory of the bundle||/Applications/SDLApp/||\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetPrefPath]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryFilesystem]]\r\n"
    },
    {
      "Name": "SDL_GetCPUCacheLineSize",
      "Uri": "https://wiki.libsdl.org/SDL_GetCPUCacheLineSize",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:15:39.011701-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetCPUCacheLineSize =\r\nUse this function to determine the L1 cache line size of the CPU.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetCPUCacheLineSize(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the L1 cache line size of the CPU, in bytes.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is useful for determining multi-threaded structure padding or SIMD prefetch sizes.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_GetCPUCount",
      "Uri": "https://wiki.libsdl.org/SDL_GetCPUCount",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:15:39.2891248-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetCPUCount =\r\nUse this function to get the number of CPU cores available.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetCPUCount(void)\r\n}}}\r\n== Return Value ==\r\nReturns the total number of logical CPU cores. On CPUs that include technologies such as hyperthreading, the number of logical cores may be more than the number of physical cores.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Log(\"Number of logical CPU cores: %d\", SDL_GetCPUCount());\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_GetClipRect",
      "Uri": "https://wiki.libsdl.org/SDL_GetClipRect",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:15:39.5398458-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetClipRect =\r\nUse this function to get the clipping rectangle for a surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetClipRect(SDL_Surface* surface,\r\n                     SDL_Rect*    rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure representing the surface to be clipped||\r\n||'''rect'''||an [[SDL_Rect]] structure filled in with the clipping rectangle for the surface; see [[#Remarks|Remarks]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen '''surface''' is the destination of a blit, only the area within the clip rectangle is drawn into.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]]\r\n .[[SDL_SetClipRect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_GetClipboardText",
      "Uri": "https://wiki.libsdl.org/SDL_GetClipboardText",
      "Categories": [
        "CategoryAPI",
        "CategoryClipboard"
      ],
      "LastUpdate": "2021-01-16T14:15:39.7875993-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetClipboardText =\r\nUse this function to get UTF-8 text from the clipboard, which must be freed with SDL_free().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nchar* SDL_GetClipboardText(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the clipboard text on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis functions returns NULL if there was not enough memory left for a copy of the clipboard's content.\r\n\r\n== Related Functions ==\r\n .[[SDL_HasClipboardText]]\r\n .[[SDL_SetClipboardText]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryClipboard]]\r\n"
    },
    {
      "Name": "SDL_GetClosestDisplayMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetClosestDisplayMode",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:15:45.0440164-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n= SDL_GetClosestDisplayMode =\r\nUse this function to get the closest match to the requested display mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_DisplayMode* SDL_GetClosestDisplayMode(int                    displayIndex,\r\n                                           const SDL_DisplayMode* mode,\r\n                                           SDL_DisplayMode*       closest)\r\n}}}\r\n== Function Parameters ==\r\n||'''displayIndex''' ||the index of the display to query ||\r\n||'''mode''' ||an [[SDL_DisplayMode]] structure containing the desired display mode ||\r\n||'''closest''' ||an [[SDL_DisplayMode]] structure filled in with the closest match of the available display modes ||\r\n\r\n\r\n== Return Value ==\r\nReturns the passed in value '''closest''' or NULL if no matching video mode was available; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Using SDL2's SDL_GetClosestDisplayMode()\r\n\r\n#include \"SDL.h\"\r\n#include <stdio.h>\r\n\r\nint main(int argc, char* argv[]) {\r\n\r\n  // Declare structures to be filled in.\r\n  SDL_DisplayMode target, closest;\r\n\r\n  SDL_Init(SDL_INIT_VIDEO);\r\n\r\n  // Set the desired resolution, etc.\r\n  target.w = 600;\r\n  target.h = 500;\r\n  target.format = 0;  // don't care\r\n  target.refresh_rate = 0; // don't care\r\n  target.driverdata   = 0; // initialize to 0\r\n  printf(\"Requesting: \\t%dx%dpx @ %dhz \\n\", target.w, target.h, target.refresh_rate);\r\n\r\n  // Pass the display mode structures by reference to SDL_GetClosestDisplay\r\n  // and check whether the result is a null pointer.\r\n  if (SDL_GetClosestDisplayMode(0, &target, &closest) == NULL)\r\n\r\n    // If the returned pointer is null, no match was found.\r\n    printf(\"\\nNo suitable display mode was found!\\n\\n\");\r\n\r\n  else\r\n    // Otherwise, a display mode close to the target is available.\r\n    // Access the SDL_DisplayMode structure to see what was received.\r\n    printf(\"  Received: \\t%dx%dpx @ %dhz \\n\", closest.w, closest.h, closest.refresh_rate);\r\n\r\n  // Clean up and exit the program.\r\n  SDL_Quit();\r\n  return 0;\r\n\r\n}\r\n}}}\r\n== Remarks ==\r\nThe available display modes are scanned and '''closest''' is filled in with the closest mode matching the requested mode and returned. The mode format and refresh rate default to the desktop mode if they are set to 0. The modes are scanned with size being first priority, format being second priority, and finally checking the refresh rate. If all the available modes are too small, then NULL is returned.\r\n\r\n== Related Functions ==\r\n . [[SDL_GetDisplayMode]]\r\n . [[SDL_GetNumDisplayModes]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetColorKey",
      "Uri": "https://wiki.libsdl.org/SDL_GetColorKey",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:16:25.6894082-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetColorKey =\r\nUse this function to get the color key (transparent pixel) for a surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetColorKey(SDL_Surface* surface,\r\n                    Uint32*      key)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to query||\r\n||'''key'''||a pointer filled in with the transparent pixel||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\nIf the surface doesn't have color key enabled this function returns -1.  \r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe color key is a pixel of the format used by the surface, as generated by [[SDL_MapRGB]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]]\r\n .[[SDL_SetColorKey]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_GetCurrentAudioDriver",
      "Uri": "https://wiki.libsdl.org/SDL_GetCurrentAudioDriver",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:16:26.0364892-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetCurrentAudioDriver =\r\nUse this function to get the name of the current audio driver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetCurrentAudioDriver(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the name of the current audio driver or NULL if no driver has been initialized.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nconst char* driver_name = SDL_GetCurrentAudioDriver();\r\n\r\nif (driver_name) {\r\n    printf(\"Audio subsystem initialized; driver = %s.\\n\", driver_name);\r\n} else {\r\n    printf(\"Audio subsystem not initialized.\\n\");\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe returned string points to internal static memory and thus never becomes invalid, even if you quit the audio subsystem and initialize a new driver (although such a case would return a different static string from another call to this function, of course). As such, you should not modify or free the returned string.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_AudioInit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GetCurrentDisplayMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetCurrentDisplayMode",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:26.334254-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetCurrentDisplayMode =\r\nUse this function to get information about the current display mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetCurrentDisplayMode(int              displayIndex,\r\n                              SDL_DisplayMode* mode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of the display to query||\r\n||'''mode'''||an [[SDL_DisplayMode]] structure filled in with the current display mode||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n// Using SDL2's SDL_GetCurrentDisplayMode()\r\n\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  int i;\r\n\r\n  // Declare display mode structure to be filled in.\r\n  SDL_DisplayMode current;\r\n\r\n  SDL_Init(SDL_INIT_VIDEO);\r\n\r\n  // Get current display mode of all displays.\r\n  for(i = 0; i < SDL_GetNumVideoDisplays(); ++i){\r\n\r\n    int should_be_zero = SDL_GetCurrentDisplayMode(i, &current);\r\n\r\n    if(should_be_zero != 0)\r\n      // In case of error...\r\n      SDL_Log(\"Could not get display mode for video display #%d: %s\", i, SDL_GetError());\r\n\r\n    else\r\n      // On success, print the current display mode.\r\n      SDL_Log(\"Display #%d: current display mode is %dx%dpx @ %dhz.\", i, current.w, current.h, current.refresh_rate);\r\n\r\n  }\r\n\r\n  // Clean up and exit the program.\r\n  SDL_Quit();\r\n  return 0;\r\n\r\n}\r\n\r\n}}}\r\n\r\n== Remarks ==\r\nThere's a difference between this function and [[SDL_GetDesktopDisplayMode]]() when SDL runs fullscreen and has changed the resolution. In that case this function will return the current display mode, and not the previous native display mode.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetDesktopDisplayMode]]\r\n .[[SDL_GetDisplayMode]]\r\n .[[SDL_GetNumVideoDisplays]]\r\n .[[SDL_SetWindowDisplayMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetCurrentVideoDriver",
      "Uri": "https://wiki.libsdl.org/SDL_GetCurrentVideoDriver",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:26.6624082-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetCurrentVideoDriver =\r\nUse this function to get the name of the currently initialized video driver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetCurrentVideoDriver(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the name of the current video driver or NULL if no driver has been initialized.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumVideoDrivers]]\r\n .[[SDL_GetVideoDriver]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetCursor",
      "Uri": "https://wiki.libsdl.org/SDL_GetCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:16:26.9879118-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetCursor =\r\nUse this function to get the active cursor.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Cursor* SDL_GetCursor(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the active cursor or NULL if there is no mouse.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function returns a pointer to the current cursor which is owned by the library.  It is not necessary to free the cursor with [[SDL_FreeCursor]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_SetCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_GetDefaultAssertionHandler",
      "Uri": "https://wiki.libsdl.org/SDL_GetDefaultAssertionHandler",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T14:16:32.3293245-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetDefaultAssertionHandler =\r\nUse this function to get the default assertion handler.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_AssertionHandler SDL_GetDefaultAssertionHandler(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the default SDL_AssertionHandler that is called when an assert triggers.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis returns the function pointer that is called by default when an assertion is triggered. This is an internal function provided by SDL, that is used for assertions when [[SDL_SetAssertionHandler]]() hasn't been used to provide a different function.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAssertionHandler]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetDefaultCursor",
      "Uri": "https://wiki.libsdl.org/SDL_GetDefaultCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:16:32.6394136-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetDefaultCursor =\r\nUse this function to get the default cursor.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Cursor* SDL_GetDefaultCursor(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the default cursor on success or NULL on failure.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSystemCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetDesktopDisplayMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetDesktopDisplayMode",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:32.9756812-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetDesktopDisplayMode =\r\nUse this function to get information about the desktop display mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetDesktopDisplayMode(int              displayIndex,\r\n                              SDL_DisplayMode* mode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of the display to query||\r\n||'''mode'''||an [[SDL_DisplayMode]] structure filled in with the current display mode||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_DisplayMode dm;\r\nif (SDL_GetDesktopDisplayMode(0, &dm) != 0) {\r\n    SDL_Log(\"SDL_GetDesktopDisplayMode failed: %s\", SDL_GetError());\r\n    return 1;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThere's a difference between this function and [[SDL_GetCurrentDisplayMode]]() when SDL runs fullscreen and has changed the resolution. In that case this function will return the previous native display mode, and not the current display mode.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetCurrentDisplayMode]]\r\n .[[SDL_GetDisplayMode]]\r\n .[[SDL_SetWindowDisplayMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetDisplayBounds",
      "Uri": "https://wiki.libsdl.org/SDL_GetDisplayBounds",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:33.3398991-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetDisplayBounds =\r\nUse this function to get the desktop area represented by a display, with the primary display located at 0,0.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetDisplayBounds(int       displayIndex,\r\n                         SDL_Rect* rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of the display to query||\r\n||'''rect'''||the [[SDL_Rect]] structure filled in with the display bounds||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Rect r;\r\nif (SDL_GetDisplayBounds(0, &r) != 0) {\r\n    SDL_Log(\"SDL_GetDisplayBounds failed: %s\", SDL_GetError());\r\n    return 1;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumVideoDisplays]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetDisplayDPI",
      "Uri": "https://wiki.libsdl.org/SDL_GetDisplayDPI",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:33.6478776-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetDisplayDPI =\r\nUse this function to get the dots/pixels-per-inch for a display.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetDisplayDPI(int    displayIndex,\r\n                      float* ddpi,\r\n                      float* hdpi,\r\n                      float* vdpi)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of the display from which DPI information should be queried||\r\n||'''ddpi'''||a pointer filled in with the diagonal DPI of the display; may be NULL||\r\n||'''hdpi'''||a pointer filled in with the horizontal DPI of the display; may be NULL||\r\n||'''vdpi'''||a pointer filled in with the vertical DPI of the display; may be NULL||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nDiagonal, horizontal and vertical DPI can all be optionally returned if the parameter is non-NULL.\r\n\r\nA failure of this function usually means that either no DPI information is available or the '''displayIndex''' is out of range.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumVideoDisplays]]\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetDisplayMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetDisplayMode",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:33.9733954-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetDisplayMode =\r\nUse this function to get information about a specific display mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetDisplayMode(int              displayIndex,\r\n                       int              modeIndex,\r\n                       SDL_DisplayMode* mode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of the display to query||\r\n||'''modeIndex'''||the index of the display mode to query||\r\n||'''mode'''||an [[SDL_DisplayMode]] structure filled in with the mode at '''modeIndex'''||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n    int display_count = 0, display_index = 0, mode_index = 0;\r\n    SDL_DisplayMode mode = { SDL_PIXELFORMAT_UNKNOWN, 0, 0, 0, 0 };\r\n\r\n    if ((display_count = SDL_GetNumVideoDisplays()) < 1) {\r\n        SDL_Log(\"SDL_GetNumVideoDisplays returned: %i\", display_count);\r\n        return 1;\r\n    }\r\n\r\n    if (SDL_GetDisplayMode(display_index, mode_index, &mode) != 0) {\r\n        SDL_Log(\"SDL_GetDisplayMode failed: %s\", SDL_GetError());\r\n        return 1;       \r\n    }\r\n    SDL_Log(\"SDL_GetDisplayMode(0, 0, &mode):\\t\\t%i bpp\\t%i x %i\",\r\n    SDL_BITSPERPIXEL(mode.format), mode.w, mode.h);\r\n}}}\r\n\r\n== Remarks ==\r\nThe display modes are sorted in this priority:\r\n\r\n    * width -> largest to smallest\r\n    * height -> largest to smallest\r\n    * bits per pixel -> more colors to fewer colors\r\n    * packed pixel layout -> largest to smallest\r\n    * refresh rate -> highest to lowest\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumDisplayModes]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetDisplayName",
      "Uri": "https://wiki.libsdl.org/SDL_GetDisplayName",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:39.2648524-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetDisplayName =\r\nUse this function to get the name of a display in UTF-8 encoding.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetDisplayName(int displayIndex)\r\n}}}\r\n\r\n##Fill in the above syntax per the Style Guide, then delete this comment.\r\n\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of display from which the name should be queried||\r\n\r\n\r\n== Return Value ==\r\nReturns the name of a display or NULL for an invalid display index or failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumVideoDisplays]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetDisplayUsableBounds",
      "Uri": "https://wiki.libsdl.org/SDL_GetDisplayUsableBounds",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:16:39.5478365-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetDisplayUsableBounds =\r\nUse this function to get the usable desktop area represented by a display, with the primary display located at 0,0.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetDisplayUsableBounds(int       displayIndex,\r\n                               SDL_Rect* rect)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of the display to query the usable bounds from||\r\n||'''rect'''||the [[SDL_Rect]] structure filled in with the display bounds||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis is the same area as [[SDL_GetDisplayBounds]]() reports, but with portions reserved by the system removed. For example, on Apple Mac OS X, this subtracts the area occupied by the menu bar and dock.\r\n\r\nSetting a window to be fullscreen generally bypasses these unusable areas, so these are good guidelines for the maximum space available to a non-fullscreen window.\r\n\r\nThe parameter '''rect''' is ignored if it is NULL.\r\n\r\nThis function also returns -1 if the parameter '''displayIndex''' is out of range.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetDisplayBounds]]\r\n .[[SDL_GetNumVideoDisplays]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetError",
      "Uri": "https://wiki.libsdl.org/SDL_GetError",
      "Categories": [
        "CategoryAPI",
        "CategoryError"
      ],
      "LastUpdate": "2021-01-16T14:16:39.8479718-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetError =\r\nUse this function to retrieve a message about the last error that occurred.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetError(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a message with information about the specific error that occurred, or an empty string if there hasn't been an error message set since the last call to [[SDL_ClearError]](). /* Without calling [[SDL_ClearError]](), the */ The message is only applicable when an SDL function has signaled an error.  You must check the return values of SDL function calls to determine when to appropriately call [[SDL_GetError]]().\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nif (SDL_Init(SDL_INIT_EVERYTHING) < 0) {\r\n    // Unrecoverable error, exit here.\r\n    printf(\"SDL_Init failed: %s\\n\", SDL_GetError());\r\n}\r\n}}}\r\nNote: Although this example uses [[SDL_Init]](), [[SDL_GetError]]() provides an error message for any failed SDL operation which supports error reporting, see the wiki page for each particular SDL function.\r\n\r\n== Remarks ==\r\nIt is possible for multiple errors to occur before calling [[SDL_GetError]]().  Only the last error is returned.\r\n\r\nThe returned string is statically allocated and must not be freed by the application.\r\n\r\n== Related Functions ==\r\n .[[SDL_ClearError]]\r\n .[[SDL_SetError]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryError]]\r\n"
    },
    {
      "Name": "SDL_GetEventFilter",
      "Uri": "https://wiki.libsdl.org/SDL_GetEventFilter",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:17:20.6021721-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetEventFilter =\r\nUse this function to query the current event filter.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_GetEventFilter(SDL_EventFilter* filter,\r\n                            void**           userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''filter'''||the current callback function will be stored here; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||the pointer that is passed to the current event filter will be stored here||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE on success or SDL_FALSE if there is no event filter set.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function can be used to \"chain\" filters, by saving the existing filter before replacing it with a function that will call that saved filter.\r\n\r\n== Related Functions ==\r\n .[[SDL_SetEventFilter]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_GetEventState",
      "Uri": "https://wiki.libsdl.org/SDL_GetEventState",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:17:20.9555828-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetEventState =\r\nUse this macro to query the current processing state of a specified [[SDL_EventType]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint8 SDL_GetEventState(Uint32 type)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''type'''||the [[SDL_EventType]] to query||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_DISABLE or SDL_ENABLE.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_EventState]]\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetGlobalMouseState",
      "Uri": "https://wiki.libsdl.org/SDL_GetGlobalMouseState",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:17:21.265943-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetGlobalMouseState =\r\nUse this function to get the current state of the mouse in relation to the desktop.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetGlobalMouseState(int* x,\r\n                               int* y)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''x'''||filled in with the current X coord relative to the desktop; can be NULL||\r\n||'''y'''||filled in with the current Y coord relative to the desktop; can be NULL||\r\n\r\n\r\n== Return Value ==\r\nReturns the current button state as a bitmask which can be tested using the SDL_BUTTON(X) macros.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis works just like [[SDL_GetMouseState]](), but the coordinates will be reported relative to the top-left of the desktop. This can be useful if you need to track the mouse outside of a specific window and [[SDL_CaptureMouse]]() doesn't fit your needs. For example, it could be useful if you need to track the mouse while dragging a window, where\r\ncoordinates relative to a window might not be in sync at all times.\r\n\r\n{i} Note: [[SDL_GetMouseState]]() returns the mouse position as SDL understands it from the last pump of the event queue. This function, however, queries the OS for the current mouse position, and as such, might be a slightly less efficient function. Unless you know what you're doing and have a good reason to use this function, you probably want [[SDL_GetMouseState]]() instead.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n== Related Functions ==\r\n .[[SDL_CaptureMouse]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetGrabbedWindow",
      "Uri": "https://wiki.libsdl.org/SDL_GetGrabbedWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:17:26.5851233-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetGrabbedWindow =\r\nUse this function to get the window that currently has an input grab enabled.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Window* SDL_GetGrabbedWindow(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the window if input is grabbed or NULL otherwise.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowGrab]]\r\n .[[SDL_SetWindowGrab]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetHint",
      "Uri": "https://wiki.libsdl.org/SDL_GetHint",
      "Categories": [
        "CategoryAPI",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:17:26.9321399-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetHint =\r\nUse this function to get the value of a hint.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetHint(const char* name)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''name'''||the hint to query; see the list of hints on [[CategoryHints#Hints|CategoryHints]] for details||\r\n\r\n== Return Value ==\r\nReturns the string value of a hint or NULL if the hint isn't set.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetHint]]\r\n .[[SDL_SetHintWithPriority]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_GetHintBoolean",
      "Uri": "https://wiki.libsdl.org/SDL_GetHintBoolean",
      "Categories": [
        "CategoryAPI",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:17:27.2340394-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetHintBoolean =\r\nUse this function to get the boolean value of a hint variable.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_GetHintBoolean(const char* name,\r\n                            SDL_bool    default_value)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''name'''||the name of the hint to get the boolean value from ||\r\n||'''default_value'''||the value to return if the hint does not exist||\r\n\r\n\r\n== Return Value ==\r\nReturns the boolean value of a hint or the provided default value if the hint does not exist.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetHint]]\r\n .[[SDL_SetHint]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryHints]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetKeyFromName",
      "Uri": "https://wiki.libsdl.org/SDL_GetKeyFromName",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:17:27.5981354-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetKeyFromName =\r\nUse this function to get a key code from a human-readable name.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Keycode SDL_GetKeyFromName(const char* name)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''name'''||the human-readable key name||\r\n\r\n== Return Value ==\r\nReturns key code, or SDLK_UNKNOWN if the name wasn't recognized; call [[SDL_GetError]]() for more information.\r\n\r\n/* <<Color2(col=green,text=\"Should it refer to SDL_Keycode instead of key code?  Leave error call in?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyFromScancode]]\r\n .[[SDL_GetKeyName]]\r\n .[[SDL_GetScancodeFromName]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetKeyFromScancode",
      "Uri": "https://wiki.libsdl.org/SDL_GetKeyFromScancode",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:17:27.9406832-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetKeyFromScancode =\r\nUse this function to get the key code corresponding to the given scancode according to the current keyboard layout.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''scancode'''||the desired [[SDL_Scancode]] to query||\r\n\r\n== Return Value ==\r\nReturns the [[SDL_Keycode]] that corresponds to the given [[SDL_Scancode]].\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSee [[SDL_Keycode]] for details.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyName]]\r\n .[[SDL_GetScancodeFromKey]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetKeyName",
      "Uri": "https://wiki.libsdl.org/SDL_GetKeyName",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:17:28.2443757-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetKeyName =\r\nUse this function to get a human-readable name for a key.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetKeyName(SDL_Keycode key)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''key'''||the desired [[SDL_Keycode]] to query||\r\n\r\n== Return Value ==\r\nReturns a pointer to a UTF-8 string that stays valid at least until the next call to this function. If you need it around any longer, you must copy it. If the key doesn't have a name, this function returns an empty string (\"\"). /* <<Color2(col=green,text=\"Should key here be bold?  Don't think so.\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSee [[SDL_Scancode]] and [[SDL_Keycode]] for details.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyFromName]]\r\n .[[SDL_GetKeyFromScancode]]\r\n .[[SDL_GetScancodeFromKey]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetKeyboardFocus",
      "Uri": "https://wiki.libsdl.org/SDL_GetKeyboardFocus",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:17:33.6173342-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetKeyboardFocus =\r\nUse this function to get the window which currently has keyboard focus.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Window* SDL_GetKeyboardFocus(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the window with keyboard focus.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetKeyboardState",
      "Uri": "https://wiki.libsdl.org/SDL_GetKeyboardState",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:17:33.951355-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetKeyboardState =\r\nUse this function to get a snapshot of the current state of the keyboard.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst Uint8* SDL_GetKeyboardState(int* numkeys)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''numkeys'''||if non-NULL, receives the length of the returned array||\r\n\r\n== Return Value ==\r\nReturns a pointer to an array of key states. A value of 1 means that the key is pressed and a value of 0 means that it is not. Indexes into this array are obtained by using [[SDL_Scancode]] values. The pointer returned is a pointer to an internal SDL array. It will be valid for the whole lifetime of the application and should not be freed by the caller.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nconst Uint8 *state = SDL_GetKeyboardState(NULL);\r\nif (state[SDL_SCANCODE_RETURN]) {\r\n    printf(\"<RETURN> is pressed.\\n\");\r\n}\r\nif (state[SDL_SCANCODE_RIGHT] && state[SDL_SCANCODE_UP]) {\r\n    printf(\"Right and Up Keys Pressed.\\n\");\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nNote: Use [[SDL_PumpEvents]]() to update the state array.\r\n\r\nNote: This function gives you the current state after all events have been processed, so if a key or button has been pressed and released before you process events, then the pressed state will never show up in the [[SDL_GetKeyboardState]]() calls.\r\n\r\nNote: This function doesn't take into account whether shift has been pressed or not.\r\n\r\n== Related Functions ==\r\n .[[SDL_PumpEvents]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetModState",
      "Uri": "https://wiki.libsdl.org/SDL_GetModState",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:17:34.298101-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetModState =\r\nUse this function to get the current key modifier state for the keyboard.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Keymod SDL_GetModState(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns an OR'd combination of the modifier keys for the keyboard. See [[SDL_Keymod]] for details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyboardState]]\r\n .[[SDL_SetModState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetMouseFocus",
      "Uri": "https://wiki.libsdl.org/SDL_GetMouseFocus",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:17:34.6281051-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetMouseFocus =\r\nUse this function to get the window which currently has mouse focus.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Window* SDL_GetMouseFocus(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the window with mouse focus.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_GetMouseState",
      "Uri": "https://wiki.libsdl.org/SDL_GetMouseState",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:18:15.3401575-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetMouseState =\r\nUse this function to retrieve the current state of the mouse.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetMouseState(int* x,\r\n                         int* y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the x coordinate of the mouse cursor position relative to the focus window||\r\n||'''y'''||the y coordinate of the mouse cursor position relative to the focus window||\r\n\r\n== Return Value ==\r\nReturns a 32-bit button bitmask of the current button state.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_PumpEvents();\r\nif (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_LEFT)) {\r\n    SDL_Log(\"Mouse Button 1 (left) is pressed.\");\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe current button state is returned as a button bitmask, which can be tested using the SDL_BUTTON(X) macros (where X is generally 1 for the left, 2 for middle, 3 for the right button), and '''x''' and '''y''' are set to the mouse cursor position relative to the focus window for the currently selected mouse. You can pass NULL for either '''x''' or '''y'''.\r\n\r\n/* <<Color2(col=green,text=\"Suggest splitting the first sentence into two.  Should the subscripted portion be removed to reflect the lack of multi-mouse support?\")>> */\r\n\r\n== Related Functions ==\r\n .[[SDL_GetGlobalMouseState]]\r\n .[[SDL_GetRelativeMouseState]]\r\n .[[SDL_PumpEvents]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_GetNumAudioDevices",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumAudioDevices",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:18:15.7040209-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetNumAudioDevices =\r\nUse this function to get the number of built-in audio devices.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumAudioDevices(int iscapture)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''iscapture'''||zero to request playback devices, non-zero to request recording devices||\r\n\r\n== Return Value ==\r\nReturns the number of available devices exposed by the current driver or -1 if an explicit list of devices can't be determined. A return value of -1 does not necessarily mean an error condition. See [[#Remarks|Remarks]] for details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint i, count = SDL_GetNumAudioDevices(0);\r\nfor (i = 0; i < count; ++i) {\r\n    printf(\"Audio device %d: %s\\n\", i, SDL_GetAudioDeviceName(i, 0));\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is only valid after successfully initializing the audio subsystem.\r\n\r\nNote that audio capture support is not implemented as of SDL 2.0.4, so the '''iscapture''' parameter is for future expansion and should always be zero for now.\r\n\r\nThis function will return -1 if an explicit list of devices can't be determined. Returning -1 is not an error. For example, if SDL is set up to talk to a remote audio server, it can't list every one available on the Internet, but it will still allow a specific host to be specified in [[SDL_OpenAudioDevice]]().\r\n\r\nIn many common cases, when this function returns a value <= 0, it can still successfully open the default device (NULL for first argument of [[SDL_OpenAudioDevice]]()).\r\n\r\nThis function may trigger a complete redetect of available hardware. It should not be called for each iteration of a loop, but rather once at the start of a loop:\r\n\r\n{{{#!highlight cpp\r\n// Don't do this: for (int i = 0; i < SDL_GetNumAudioDevices(0); i++)\r\n// do this instead:\r\nconst int count = SDL_GetNumAudioDevices(0);\r\nfor (int i = 0; i < count; ++i) { /* do something here. */ }\r\n}}}\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAudioDeviceName]]\r\n .[[SDL_OpenAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GetNumAudioDrivers",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumAudioDrivers",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:18:21.0016393-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetNumAudioDrivers =\r\nUse this function to get the number of built-in audio drivers.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumAudioDrivers(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the number of built-in audio drivers.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint i;\r\n\r\nfor (i = 0; i < SDL_GetNumAudioDrivers(); ++i) {\r\n    printf(\"Audio driver %d: %s\\n\", i, SDL_GetAudioDriver(i));\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function returns a hardcoded number. This never returns a negative value; if there are no drivers compiled into this build of SDL, this function returns zero. The presence of a driver in this list does not mean it will function, it just means SDL is capable of interacting with that interface. For example, a build of SDL might have esound support, but if there's no esound server available, SDL's esound driver would fail if used.\r\n\r\nBy default, SDL tries all drivers, in its preferred order, until one is found to be usable.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAudioDriver]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_GetNumDisplayModes",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumDisplayModes",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:18:21.3123959-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetNumDisplayModes =\r\nUse this function to get the number of available display modes.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumDisplayModes(int displayIndex)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''displayIndex'''||the index of the display to query||\r\n\r\n== Return Value ==\r\nReturns a number >= 1 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n    // For now we consider primary display only\r\n    int numDispModes = SDL_GetNumDisplayModes(0);\r\n\r\n    ...\r\n}}}\r\n\r\n== Remarks ==\r\nThe '''displayIndex''' needs to be in the range from 0 to [[SDL_GetNumVideoDisplays]]() - 1.\r\n\r\nThis allows you to support multiple screens.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetDisplayMode]]\r\n .[[SDL_GetNumVideoDisplays]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetNumRenderDrivers",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumRenderDrivers",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:18:21.637753-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetNumRenderDrivers =\r\nUse this function to get the number of 2D rendering drivers available for the current display.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumRenderDrivers(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a number >= 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nA render driver is a set of code that handles rendering and texture management on a particular display.  Normally there is only one, but some drivers may have several available with different capabilities.\r\n\r\nThere may be none if SDL was compiled without render support.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n .[[SDL_GetRenderDriverInfo]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetNumTouchDevices",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumTouchDevices",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:18:22.0044147-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetNumTouchDevices =\r\nUse this function to get the number of registered touch devices.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumTouchDevices(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the number of registered touch devices.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nOn some platforms SDL first sees the touch device if it was actually used.\r\nTherefore [[SDL_GetNumTouchDevices]]() may return 0 although devices are available.\r\nAfter using all devices at least once the number will be correct.\r\n\r\nThis was fixed for Android in SDL 2.0.1.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTouchDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetNumTouchFingers",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumTouchFingers",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:18:22.3084327-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetNumTouchFingers =\r\nUse this function to get the number of active fingers for a given touch device.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumTouchFingers(SDL_TouchID touchID)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''touchID'''||the ID of a touch device||\r\n\r\n\r\n== Return Value ==\r\nReturns the number of active fingers for a given touch device on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTouchFinger]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetNumVideoDisplays",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumVideoDisplays",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:18:22.6075693-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetNumVideoDisplays =\r\nUse this function to get the number of available video displays.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumVideoDisplays(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a number >= 1 or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetDisplayBounds]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetNumVideoDrivers",
      "Uri": "https://wiki.libsdl.org/SDL_GetNumVideoDrivers",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:18:28.8346502-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetNumVideoDrivers =\r\nUse this function to get the number of video drivers compiled into SDL.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetNumVideoDrivers(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a number >= 1 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetVideoDriver]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetPerformanceCounter",
      "Uri": "https://wiki.libsdl.org/SDL_GetPerformanceCounter",
      "Categories": [
        "CategoryAPI",
        "CategoryTimer"
      ],
      "LastUpdate": "2021-01-16T14:18:29.1646207-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetPerformanceCounter =\r\nUse this function to get the current value of the high resolution counter.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint64 SDL_GetPerformanceCounter(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the current counter value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is typically used for profiling.  \r\n\r\nThe counter values are only meaningful relative to each other.  Differences between values can be converted to times by using [[SDL_GetPerformanceFrequency]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_GetPerformanceFrequency]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryTimer]]\r\n"
    },
    {
      "Name": "SDL_GetPerformanceFrequency",
      "Uri": "https://wiki.libsdl.org/SDL_GetPerformanceFrequency",
      "Categories": [
        "CategoryAPI",
        "CategoryTimer"
      ],
      "LastUpdate": "2021-01-16T14:18:29.4623162-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetPerformanceFrequency =\r\nUse this function to get the count per second of the high resolution counter.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint64 SDL_GetPerformanceFrequency(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a platform-specific count per second.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\n#define DEFAULT_RESOLUTION  1\r\n\r\nstatic int ticks = 0;\r\n\r\nstatic Uint32 SDLCALL\r\nticktock(Uint32 interval, void *param)\r\n{\r\n    ++ticks;\r\n    return (interval);\r\n}\r\n\r\nstatic Uint32 SDLCALL\r\ncallback(Uint32 interval, void *param)\r\n{\r\n    SDL_Log(\"Timer %d : param = %d\", interval, (int) (uintptr_t) param);\r\n    return interval;\r\n}\r\n\r\nint\r\nmain(int argc, char *argv[])\r\n{\r\n    int i, desired;\r\n    SDL_TimerID t1, t2, t3;\r\n    Uint32 start32, now32;\r\n    Uint64 start, now;\r\n\r\n    /* Enable standard application logging */\r\n    SDL_LogSetPriority(SDL_LOG_CATEGORY_APPLICATION, SDL_LOG_PRIORITY_INFO);\r\n\r\n    if (SDL_Init(SDL_INIT_TIMER) < 0) {\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't initialize SDL: %s\", SDL_GetError());\r\n        return (1);\r\n    }\r\n\r\n    /* Start the timer */\r\n    desired = 0;\r\n    if (argv[1]) {\r\n        desired = SDL_atoi(argv[1]);\r\n    }\r\n    if (desired == 0) {\r\n        desired = DEFAULT_RESOLUTION;\r\n    }\r\n    t1 = SDL_AddTimer(desired, ticktock, NULL);\r\n\r\n    /* Wait 10 seconds */\r\n    SDL_Log(\"Waiting 10 seconds\");\r\n    SDL_Delay(10 * 1000);\r\n\r\n    /* Stop the timer */\r\n    SDL_RemoveTimer(t1);\r\n\r\n    /* Print the results */\r\n    if (ticks) {\r\n        SDL_Log(\"Timer resolution: desired = %d ms, actual = %f ms\",\r\n                desired, (double) (10 * 1000) / ticks);\r\n    }\r\n\r\n    /* Test multiple timers */\r\n    SDL_Log(\"Testing multiple timers...\");\r\n    t1 = SDL_AddTimer(100, callback, (void *) 1);\r\n    if (!t1)\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION,\"Could not create timer 1: %s\", SDL_GetError());\r\n    t2 = SDL_AddTimer(50, callback, (void *) 2);\r\n    if (!t2)\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION,\"Could not create timer 2: %s\", SDL_GetError());\r\n    t3 = SDL_AddTimer(233, callback, (void *) 3);\r\n    if (!t3)\r\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION,\"Could not create timer 3: %s\", SDL_GetError());\r\n\r\n    /* Wait 10 seconds */\r\n    SDL_Log(\"Waiting 10 seconds\");\r\n    SDL_Delay(10 * 1000);\r\n\r\n    SDL_Log(\"Removing timer 1 and waiting 5 more seconds\");\r\n    SDL_RemoveTimer(t1);\r\n\r\n    SDL_Delay(5 * 1000);\r\n\r\n    SDL_RemoveTimer(t2);\r\n    SDL_RemoveTimer(t3);\r\n\r\n    start = SDL_GetPerformanceCounter();\r\n    for (i = 0; i < 1000000; ++i) {\r\n        ticktock(0, NULL);\r\n    }\r\n    now = SDL_GetPerformanceCounter();\r\n    SDL_Log(\"1 million iterations of ticktock took %f ms\", (double)((now - start)*1000) / SDL_GetPerformanceFrequency());\r\n\r\n    SDL_Log(\"Performance counter frequency: %\"SDL_PRIu64\"\", (unsigned long long) SDL_GetPerformanceFrequency());\r\n    start32 = SDL_GetTicks();\r\n    start = SDL_GetPerformanceCounter();\r\n    SDL_Delay(1000);\r\n    now = SDL_GetPerformanceCounter();\r\n    now32 = SDL_GetTicks();\r\n    SDL_Log(\"Delay 1 second = %d ms in ticks, %f ms according to performance counter\", (now32-start32), (double)((now - start)*1000) / SDL_GetPerformanceFrequency());\r\n\r\n    SDL_Quit();\r\n    return (0);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetPerformanceCounter]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryTimer]]\r\n"
    },
    {
      "Name": "SDL_GetPixelFormatName",
      "Uri": "https://wiki.libsdl.org/SDL_GetPixelFormatName",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:18:29.7761319-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetPixelFormatName =\r\nUse this function to get the human readable name of a pixel format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetPixelFormatName(Uint32 format)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''format'''||the pixel format to query||\r\n\r\n== Return Value ==\r\nReturns the human readable name of the specified pixel format or `\"SDL_PIXELFORMAT_UNKNOWN\"` if the format isn't recognized.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Surface* surface = ...; // a valid surface from wherever.\r\nSDL_PixelFormat* pixelFormat = surface->format;\r\nUint32 pixelFormatEnum = pixelFormat->format;\r\nconst char* surfacePixelFormatName = SDL_GetPixelFormatName(pixelFormatEnum);\r\nSDL_Log(\"The surface's pixelformat is %s\", surfacePixelFormatName);\r\n// prints something like \"The surface's pixelformat is SDL_PIXELFORMAT_ABGR8888\"\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_GetPlatform",
      "Uri": "https://wiki.libsdl.org/SDL_GetPlatform",
      "Categories": [
        "CategoryAPI",
        "CategoryPlatform"
      ],
      "LastUpdate": "2021-01-16T14:19:10.4978952-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetPlatform =\r\nUse this function to get the name of the platform.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetPlatform(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the name of the platform. If the correct platform name is not available, returns a string beginning with the text \"Unknown\".\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nHere are the names returned for some supported platforms:\r\n * Windows\r\n * Mac OS X\r\n * Linux\r\n * iOS\r\n * Android\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPlatform]]\r\n"
    },
    {
      "Name": "SDL_GetPowerInfo",
      "Uri": "https://wiki.libsdl.org/SDL_GetPowerInfo",
      "Categories": [
        "CategoryAPI",
        "CategoryPower"
      ],
      "LastUpdate": "2021-01-16T14:19:10.8126953-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetPowerInfo =\r\nUse this function to get the current power supply details.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_PowerState SDL_GetPowerInfo(int* secs,\r\n                                int* pct)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''secs'''||seconds of battery life left, you can pass a NULL here if you don't care, will return -1 if we can't determine a value, or we're not running on a battery||\r\n||'''pct'''||percentage of battery life left, between 0 and 100, you can pass a NULL here if you don't care, will return -1 if we can't determine a value, or we're not running on a battery||\r\n\r\n== Return Value ==\r\nReturns the state of the battery, if any.  Return values may be any of the following:\r\n\r\n<<Include(SDL_PowerState, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\nSee [[SDL_PowerState]] for more info.\r\n\r\nBoth parameters will return -1 if a value can't be determined, or if not running on a battery.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint secs, pct;\r\nif (SDL_GetPowerInfo(&secs, &pct) == SDL_POWERSTATE_ON_BATTERY) {\r\n    printf(\"Battery is draining: \");\r\n    if (secs == -1) {\r\n        printf(\"(unknown time left)\\n\");\r\n    } else {\r\n        printf(\"(%d seconds left)\\n\", secs);\r\n    }\r\n\r\n    if (pct == -1) {\r\n        printf(\"(unknown percentage left)\\n\");\r\n    } else {\r\n        printf(\"(%d percent left)\\n\", pct);\r\n    }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nYou should never take a battery status as absolute truth. Batteries (especially failing batteries) are delicate hardware, and the values reported here are best estimates based on what that hardware reports. It's not uncommon for older batteries to lose stored power much faster than it reports, or completely drain when reporting it has 20 percent left, etc.\r\n\r\nBattery status can change at any time; if you are concerned with power state, you should call this function frequently, and perhaps ignore changes until they seem to be stable for a few seconds.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPower]]\r\n"
    },
    {
      "Name": "SDL_GetPrefPath",
      "Uri": "https://wiki.libsdl.org/SDL_GetPrefPath",
      "Categories": [
        "CategoryAPI",
        "CategoryFilesystem"
      ],
      "LastUpdate": "2021-01-16T14:19:16.1110473-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetPrefPath =\r\nUse this function to get the \"pref dir\". This is meant to be where the application can write personal files (Preferences and save games, etc.) that are specific to the application.  This directory is unique per user and per application.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nchar* SDL_GetPrefPath(const char* org,\r\n                      const char* app)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''org'''||the name of your organization||\r\n||'''app'''||the name of your application||\r\n\r\n\r\n== Return Value ==\r\nReturns a UTF-8 string of the user directory in platform-dependent notation. NULL if there's a problem (creating directory failed, etc.).\r\n\r\nThe return path will be guaranteed to end with a path separator ('\\' on Windows, '/' on most other platforms).\r\n\r\nThe pointer returned is owned by you. Please call SDL_free() on the pointer when you are done with it.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nchar *pref_path = NULL;\r\n\r\nvoid InitializePrefPath() {\r\n    char *base_path = SDL_GetPrefPath(\"My Company\", \"My Awesome SDL 2 Game\");\r\n    if (base_path) {\r\n        pref_path = base_path;\r\n    } else {\r\n        /* Do something to disable writing in-game */\r\n    }\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nYou should assume the path returned by this function is the only safe place to write files (and that [[SDL_GetBasePath]](), while it might be writable, or even the parent of the returned path, aren't where you should be writing things).\r\n\r\nBoth the org and app strings may become part of a directory name, so please follow these rules:\r\n\r\n * Try to use the same org string (including case-sensitivity) for all your applications that use this function.\r\n * Always use a unique app string for each one, and make sure it never changes for an app once you've decided on it.\r\n * Unicode characters are legal, as long as it's UTF-8 encoded, but...\r\n * ...only use letters, numbers, and spaces. Avoid punctuation like \"Game Name 2: Bad Guy's Revenge!\" ... \"Game Name 2\" is sufficient.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetBasePath]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryFilesystem]]\r\n"
    },
    {
      "Name": "SDL_GetQueuedAudioSize",
      "Uri": "https://wiki.libsdl.org/SDL_GetQueuedAudioSize",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:19:16.4525865-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetQueuedAudioSize =\r\nUse this function to get the number of bytes of still-queued audio.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''dev'''||the device ID of which we will query queued audio size||\r\n\r\n\r\n== Return Value ==\r\nReturns the number of bytes (not samples!) of queued audio.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis is the number of bytes that have been queued for playback with [[SDL_QueueAudio]](), but have not yet been sent to the hardware.\r\n\r\nOnce we've sent it to the hardware, this function can not decide the exact byte boundary of what has been played. It's possible that we just gave the hardware several kilobytes right before you called this function, but it hasn't played any of it yet, or maybe half of it, etc.\r\n\r\nYou may not queue audio on a device that is using an application-supplied callback; calling this function on such a device always returns 0.\r\nYou have to use the audio callback or queue audio with [[SDL_QueueAudio]](), but not both.\r\n\r\nYou should not call [[SDL_LockAudio]]() on the device before querying; SDL handles locking internally for this function.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_ClearQueuedAudio]]\r\n .[[SDL_QueueAudio]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetRGB",
      "Uri": "https://wiki.libsdl.org/SDL_GetRGB",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:19:16.7826366-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetRGB =\r\nUse this function to get RGB values from a pixel in the specified format. \r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetRGB(Uint32                 pixel,\r\n                const SDL_PixelFormat* format,\r\n                Uint8*                 r, \r\n                Uint8*                 g, \r\n                Uint8*                 b)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''pixel'''||a pixel value||\r\n||'''format'''||an [[SDL_PixelFormat]] structure describing the format of the pixel||\r\n||'''r'''||a pointer filled in with the red component||\r\n||'''g'''||a pointer filled in with the green component||\r\n||'''b'''||a pointer filled in with the blue component||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function uses the entire 8-bit [0..255] range when converting color components from pixel formats with less than 8-bits per RGB component (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff, 0xff, 0xff] not [0xf8, 0xfc, 0xf8]). \r\n\r\n== Related Functions ==\r\n .[[SDL_GetRGBA]]\r\n .[[SDL_MapRGB]]\r\n .[[SDL_MapRGBA]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_GetRGBA",
      "Uri": "https://wiki.libsdl.org/SDL_GetRGBA",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:19:17.0971583-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetRGBA =\r\nUse this function to get RGBA values from a pixel in the specified format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetRGBA(Uint32                 pixel,\r\n                 const SDL_PixelFormat* format,\r\n                 Uint8*                 r,\r\n                 Uint8*                 g,\r\n                 Uint8*                 b,\r\n                 Uint8*                 a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''pixel'''||a pixel value||\r\n||'''format'''||an [[SDL_PixelFormat]] structure describing the format of the pixel||\r\n||'''r'''||a pointer filled in with the red component||\r\n||'''g'''||a pointer filled in with the green component||\r\n||'''b'''||a pointer filled in with the blue component||\r\n||'''a'''||a pointer filled in with the alpha component||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function uses the entire 8-bit [0..255] range when converting color components from pixel formats with less than 8-bits per RGB component (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff, 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\r\n\r\nIf the surface has no alpha component, the alpha will be returned as 0xff (100% opaque).\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRGB]]\r\n .[[SDL_MapRGB]]\r\n .[[SDL_MapRGBA]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_GetRelativeMouseMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetRelativeMouseMode",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:19:18.0542132-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetRelativeMouseMode =\r\nUse this function to query whether relative mouse mode is enabled.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_GetRelativeMouseMode(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if relative mode is enabled or SDL_FALSE if it is disabled.\r\n/* <<Color2(col=green,text=\"Is this right? What does it do if relative mode is not supported?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetRelativeMouseMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_GetRelativeMouseState",
      "Uri": "https://wiki.libsdl.org/SDL_GetRelativeMouseState",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:19:19.2933624-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetRelativeMouseState =\r\nUse this function to retrieve the relative state of the mouse.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetRelativeMouseState(int* x,\r\n                                 int* y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||a pointer filled with the last recorded x coordinate of the mouse||\r\n||'''y'''||a pointer filled with the last recorded y coordinate of the mouse||\r\n\r\n/* <<Color2(col=green,text=\"Should this be an exception to the 'pointer rule'?\")>> */\r\n\r\n== Return Value ==\r\nReturns a 32-bit button bitmask of the relative button state.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe current button state is returned as a button bitmask, which can be tested using the SDL_BUTTON(X) macros (where X is generally 1 for the left, 2 for middle, 3 for the right button), and '''x''' and '''y''' are set to the mouse deltas since the last call to [[SDL_GetRelativeMouseState]]() or since event initialization. You can pass NULL for either '''x''' or '''y'''.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetMouseState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_GetRenderDrawBlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetRenderDrawBlendMode",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:19:24.5856286-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetRenderDrawBlendMode =\r\nUse this function to get the blend mode used for drawing operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetRenderDrawBlendMode(SDL_Renderer*  renderer,\r\n                               SDL_BlendMode* blendMode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''blendMode'''||a pointer filled in with the current [[SDL_BlendMode]]; see [[#blendMode|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(blendMode)>> '''blendMode''' will be filled in with one of the following: <<Include(SDL_BlendMode, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetRenderDrawColor",
      "Uri": "https://wiki.libsdl.org/SDL_GetRenderDrawColor",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:19:24.8880384-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetRenderDrawColor =\r\nUse this function to get the color used for drawing operations (Rect, Line and Clear).\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetRenderDrawColor(SDL_Renderer* renderer,\r\n                           Uint8*        r,\r\n                           Uint8*        g,\r\n                           Uint8*        b,\r\n                           Uint8*        a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''r'''||a pointer filled in with the red value used to draw on the rendering target||\r\n||'''g'''||a pointer filled in with the green value used to draw on the rendering target||\r\n||'''b'''||a pointer filled in with the blue value used to draw on the rendering target||\r\n||'''a'''||a pointer filled in with the alpha value used to draw on the rendering target; usually SDL_ALPHA_OPAQUE (255)||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetRenderDriverInfo",
      "Uri": "https://wiki.libsdl.org/SDL_GetRenderDriverInfo",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:19:25.1779251-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetRenderDriverInfo =\r\nUse this function to get information about a specific 2D rendering driver for the current display.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetRenderDriverInfo(int               index,\r\n                            SDL_RendererInfo* info)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''index'''||the index of the driver to query information about||\r\n||'''info'''||an [[SDL_RendererInfo]] structure to be filled with information on the rendering driver||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n .[[SDL_GetNumRenderDrivers]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetRenderTarget",
      "Uri": "https://wiki.libsdl.org/SDL_GetRenderTarget",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:20:05.857286-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetRenderTarget =\r\nUse this function to get the current render target.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n\r\n\r\n== Return Value ==\r\nReturns the current render target or NULL for the default render target.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe default render target is the window for which the renderer was created.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_SetRenderTarget]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetRenderer",
      "Uri": "https://wiki.libsdl.org/SDL_GetRenderer",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:20:07.1045573-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetRenderer =\r\nUse this function to get the renderer associated with a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Renderer* SDL_GetRenderer(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns the rendering context on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetRendererInfo",
      "Uri": "https://wiki.libsdl.org/SDL_GetRendererInfo",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:20:08.348062-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetRendererInfo =\r\nUse this function to get information about a rendering context.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetRendererInfo(SDL_Renderer*     renderer,\r\n                        SDL_RendererInfo* info)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''info'''||an [[SDL_RendererInfo]] structure filled with information about the current renderer||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateRenderer]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetRendererOutputSize",
      "Uri": "https://wiki.libsdl.org/SDL_GetRendererOutputSize",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:20:13.6203933-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetRendererOutputSize =\r\nUse this function to get the output size in pixels of a rendering context.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetRendererOutputSize(SDL_Renderer* renderer,\r\n                              int*          w,\r\n                              int*          h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''w'''||an int filled with the width||\r\n||'''h'''||an int filled with the height||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRenderer]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetRevision",
      "Uri": "https://wiki.libsdl.org/SDL_GetRevision",
      "Categories": [
        "CategoryAPI",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T14:20:13.8950355-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetRevision =\r\nUse this function to get the code revision of SDL that is linked against your program.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetRevision(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns an arbitrary string, uniquely identifying the exact revision of the SDL library in use.  \r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Include(SDL_REVISION, , , from=\"Start Include here.\", to=\"##End Include here\")>>\r\n\r\nThis value is the revision of the code you are linked with and may be different from the code you are compiling with, which is found in the constant [[SDL_REVISION]].\r\n\r\n== Related Functions ==\r\n .[[SDL_GetVersion]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_GetRevisionNumber",
      "Uri": "https://wiki.libsdl.org/SDL_GetRevisionNumber",
      "Categories": [
        "CategoryAPI",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T14:20:14.141223-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetRevisionNumber =\r\nUse this function to get the revision number of SDL that is linked against your program.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetRevisionNumber(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a number uniquely identifying the exact revision of the SDL library in use. \r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is an incrementing number based on commits to hg.libsdl.org.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRevision]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_GetScancodeFromKey",
      "Uri": "https://wiki.libsdl.org/SDL_GetScancodeFromKey",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:20:14.3752202-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetScancodeFromKey =\r\nUse this function to get the scancode corresponding to the given key code according to the current keyboard layout.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''key'''||the desired [[SDL_Keycode]] to query||\r\n\r\n== Return Value ==\r\nReturns the [[SDL_Scancode]] that corresponds to the given [[SDL_Keycode]].\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSee [[SDL_Scancode]] for details.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyFromScancode]]\r\n .[[SDL_GetScancodeName]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetScancodeFromName",
      "Uri": "https://wiki.libsdl.org/SDL_GetScancodeFromName",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:20:14.6088185-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetScancodeFromName =\r\nUse this function to get a scancode from a human-readable name.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Scancode SDL_GetScancodeFromName(const char* name)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''name'''||the human-readable scancode name||\r\n\r\n== Return Value ==\r\nReturns the [[SDL_Scancode]], or SDL_SCANCODE_UNKNOWN if the name wasn't recognized; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetKeyFromName]]\r\n .[[SDL_GetScancodeFromKey]]\r\n .[[SDL_GetScancodeName]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetScancodeName",
      "Uri": "https://wiki.libsdl.org/SDL_GetScancodeName",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:20:14.8981904-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_GetScancodeName =\r\nUse this function to get a human-readable name for a scancode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetScancodeName(SDL_Scancode scancode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''scancode'''||the desired [[SDL_Scancode]] to query||\r\n\r\n== Return Value ==\r\nReturns a pointer to the name for the scancode. If the scancode doesn't have a name this function returns an empty string (\"\").\r\n\r\n/* <<Color2(col=green,text=\"Should scancode here be bold?  Should the pointer be mentioned?  Any error state?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSee [[SDL_Scancode]] for details.\r\n\r\n/!\\ ''Warning'': The returned name is by design not stable across platforms, e.g. the name for SDL_SCANCODE_LGUI is \"Left GUI\" under Linux but \"Left Windows\" under Microsoft Windows, and some scancodes like SDL_SCANCODE_NONUSBACKSLASH don't have any name at all.  There are even scancodes that share names, e.g. SDL_SCANCODE_RETURN and SDL_SCANCODE_RETURN2 (both called \"Return\").  This function is therefore unsuitable for creating a stable cross-platform two-way mapping between strings and scancodes.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetScancodeFromKey]]\r\n .[[SDL_GetScancodeFromName]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_GetSurfaceAlphaMod",
      "Uri": "https://wiki.libsdl.org/SDL_GetSurfaceAlphaMod",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:20:20.1597323-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetSurfaceAlphaMod =\r\nUse this function to get the additional alpha value used in blit operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetSurfaceAlphaMod(SDL_Surface* surface,\r\n                           Uint8*       alpha)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to query||\r\n||'''alpha'''||a pointer filled in with the current alpha value||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetSurfaceColorMod]]\r\n .[[SDL_SetSurfaceAlphaMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_GetSurfaceBlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetSurfaceBlendMode",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:21:00.8670369-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetSurfaceBlendMode =\r\nUse this function to get the blend mode used for blit operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetSurfaceBlendMode(SDL_Surface*   surface,\r\n                            SDL_BlendMode* blendMode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to query||\r\n||'''blendMode'''||a pointer filled in with the current [[SDL_BlendMode]]; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''blendMode''' will be filled in with one of the following: <<Include(SDL_BlendMode, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_SetSurfaceBlendMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_GetSurfaceColorMod",
      "Uri": "https://wiki.libsdl.org/SDL_GetSurfaceColorMod",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:21:01.1276194-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetSurfaceColorMod =\r\nUse this function to get the additional color value multiplied into blit operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetSurfaceColorMod(SDL_Surface* surface,\r\n                           Uint8*       r,\r\n                           Uint8*       g,\r\n                           Uint8*       b)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to query||\r\n||'''r'''||a pointer filled in with the current red color value||\r\n||'''g'''||a pointer filled in with the current green color value||\r\n||'''b'''||a pointer filled in with the current blue color value||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetSurfaceAlphaMod]]\r\n .[[SDL_SetSurfaceColorMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_GetSystemRAM",
      "Uri": "https://wiki.libsdl.org/SDL_GetSystemRAM",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:21:01.3880531-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetSystemRAM =\r\nUse this function to get the amount of RAM configured in the system.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetSystemRAM(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the amount of RAM configured in the system in MB.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetTextureAlphaMod",
      "Uri": "https://wiki.libsdl.org/SDL_GetTextureAlphaMod",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:21:01.6907947-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetTextureAlphaMod =\r\nUse this function to get the additional alpha value multiplied into render copy operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetTextureAlphaMod(SDL_Texture* texture,\r\n                           Uint8*       alpha)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to query||\r\n||'''alpha'''||a pointer filled in with the current alpha value||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTextureColorMod]]\r\n .[[SDL_SetTextureAlphaMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetTextureBlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetTextureBlendMode",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:21:01.9573152-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetTextureBlendMode =\r\nUse this function to get the blend mode used for texture copy operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetTextureBlendMode(SDL_Texture*   texture,\r\n                            SDL_BlendMode* blendMode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to query||\r\n||'''blendMode'''||a pointer filled in with the current [[SDL_BlendMode]]; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''blendMode''' will be filled in with one of the following: <<Include(SDL_BlendMode, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_SetTextureBlendMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetTextureColorMod",
      "Uri": "https://wiki.libsdl.org/SDL_GetTextureColorMod",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:21:07.2235895-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetTextureColorMod =\r\nUse this function to get the additional color value multiplied into render copy operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetTextureColorMod(SDL_Texture* texture,\r\n                           Uint8*       r,\r\n                           Uint8*       g,\r\n                           Uint8*       b)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to query||\r\n||'''r'''||a pointer filled in with the current red color value||\r\n||'''g'''||a pointer filled in with the current green color value||\r\n||'''b'''||a pointer filled in with the current blue color value||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTextureAlphaMod]]\r\n .[[SDL_SetTextureColorMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_GetThreadID",
      "Uri": "https://wiki.libsdl.org/SDL_GetThreadID",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T14:21:07.5315027-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n\r\n= SDL_GetThreadID =\r\nUse this function to get the thread identifier for the specified thread.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_threadID SDL_GetThreadID(SDL_Thread* thread)\r\n}}}\r\n== Function Parameters ==\r\n||'''thread''' ||the thread to query||\r\n\r\n\r\n== Return Value ==\r\nReturns the ID of the specified thread, or the ID of the current thread if '''thread''' is NULL.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include <stdio.h>\r\n#include \"SDL.h\"\r\n\r\n// Very simple thread - counts 0 to 9 delaying 50ms between increments\r\nint TestThread(void *ptr)\r\n{\r\n    int cnt;\r\n\r\n    for (cnt = 0; cnt < 10; ++cnt) {\r\n        printf(\"\\nThread counter: %d\", cnt);\r\n        SDL_Delay(50);\r\n    }\r\n\r\n    return cnt;\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    SDL_Thread   *thread;\r\n    SDL_threadID threadID;\r\n    int          threadReturnValue;\r\n\r\n    printf(\"\\nSimple SDL_CreateThread test:\");\r\n\r\n    /* Simply create a thread */\r\n    thread = SDL_CreateThread(TestThread, \"TestThread\", (void *)NULL);\r\n\r\n    if (NULL == thread) {\r\n        printf(\"\\nSDL_CreateThread failed: %s\\n\", SDL_GetError());\r\n        exit(-1);\r\n    }\r\n\r\n    /* Retrieve the ID for the newly launched thread */\r\n    threadID = SDL_GetThreadID(thread);\r\n\r\n    /* Wait for the thread to complete and get the return code */\r\n    SDL_WaitThread(thread, &threadReturnValue);\r\n    printf(\"\\nThread returned value: %d\", threadReturnValue);\r\n\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis thread identifier is as reported by the underlying operating system. If SDL is running on a platform that does not support threads the return value will always be zero.\r\n\r\n== Related Functions ==\r\n . [[SDL_ThreadID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_GetThreadName",
      "Uri": "https://wiki.libsdl.org/SDL_GetThreadName",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T14:21:07.8395409-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetThreadName =\r\nUse this function to get the thread name as it was specified in [[SDL_CreateThread]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetThreadName(SDL_Thread* thread)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''thread'''||the thread to query||\r\n\r\n== Return Value ==\r\nReturns a pointer to a UTF-8 string that names the specified thread, or NULL if it doesn't have a name.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is internal memory, not to be freed by the caller, and remains valid until the specified thread is cleaned up by [[SDL_WaitThread]]().\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateThread]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_GetTicks",
      "Uri": "https://wiki.libsdl.org/SDL_GetTicks",
      "Categories": [
        "CategoryAPI",
        "CategoryTimer"
      ],
      "LastUpdate": "2021-01-16T14:21:08.1245948-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetTicks =\r\nUse this function to get the number of milliseconds since the SDL library initialization.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetTicks(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns an unsigned 32-bit value representing the number of milliseconds since the SDL library initialized.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nunsigned int lastTime = 0, currentTime;\r\nwhile (!quit) {\r\n  // do stuff\r\n  // ...\r\n\r\n  // Print a report once per second\r\n  currentTime = SDL_GetTicks();\r\n  if (currentTime > lastTime + 1000) {\r\n    printf(\"Report: %d\\n\", variable);\r\n    lastTime = currentTime;\r\n  }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis value wraps if the program runs for more than ~49 days.\r\n\r\n== Related Functions ==\r\n .[[SDL_TICKS_PASSED]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryTimer]]\r\n"
    },
    {
      "Name": "SDL_GetTouchDevice",
      "Uri": "https://wiki.libsdl.org/SDL_GetTouchDevice",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:21:48.7218436-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetTouchDevice =\r\nUse this function to get the touch ID with the given index.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_TouchID SDL_GetTouchDevice(int index)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''index'''||the touch device index||\r\n\r\n\r\n== Return Value ==\r\nReturns the touch ID with the given index on success or 0 if the index is invalid; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumTouchDevices]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetTouchFinger",
      "Uri": "https://wiki.libsdl.org/SDL_GetTouchFinger",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:21:49.0326515-06:00",
      "RawText": "## page was renamed from SDL_GetTouch\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetTouchFinger =\r\nUse this function to get the finger object for specified touch device ID and finger index.\r\n\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID,\r\n                               int         index)\r\n}}}\r\n\r\n\r\n\r\n== Function Parameters ==\r\n||'''touchID'''||the ID of the requested touch device||\r\n||'''index'''||the index of the requested finger||\r\n\r\n\r\n\r\n== Return Value ==\r\nReturns a pointer to the [[SDL_Finger]] object or NULL if no object at the given ID and index could be found.\r\n\r\n\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n\r\n== Remarks ==\r\nThe returned resource is owned by SDL and should not be deallocated.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_RecordGesture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetVersion",
      "Uri": "https://wiki.libsdl.org/SDL_GetVersion",
      "Categories": [
        "CategoryAPI",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T14:21:54.6488902-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetVersion =\r\nUse this function to get the version of SDL that is linked against your program.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetVersion(SDL_version* ver)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''ver'''||the [[SDL_version]] structure that contains the version information||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_version compiled;\r\nSDL_version linked;\r\n\r\nSDL_VERSION(&compiled);\r\nSDL_GetVersion(&linked);\r\nprintf(\"We compiled against SDL version %d.%d.%d ...\\n\",\r\n       compiled.major, compiled.minor, compiled.patch);\r\nprintf(\"But we are linking against SDL version %d.%d.%d.\\n\",\r\n       linked.major, linked.minor, linked.patch);\r\n}}}\r\n\r\n== Remarks ==\r\nIf you are linking to SDL dynamically, then it is possible that the current version will be different than the version you compiled against.  This function returns the current version, while [[SDL_VERSION]]() is a macro that tells you what version you compiled with.\r\n\r\nThis function may be called safely at any time, even before [[SDL_Init]]().\r\n\r\n== Related Macros ==\r\n .[[SDL_VERSION]]\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRevision]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_GetVideoDriver",
      "Uri": "https://wiki.libsdl.org/SDL_GetVideoDriver",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:21:54.9425989-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetVideoDriver =\r\nUse this function to get the name of a built in video driver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetVideoDriver(int index)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''index'''||the index of a video driver||\r\n\r\n== Return Value ==\r\nReturns the name of the video driver with the given '''index'''. \r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe video drivers are presented in the order in which they are normally checked during initialization. \r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumVideoDrivers]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowBordersSize",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowBordersSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:21:55.239614-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetWindowBordersSize =\r\nUse this function to get the size of a window's borders (decorations) around the client area.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetWindowBordersSize(SDL_Window* window,\r\n                             int*        top,\r\n                             int*        left,\r\n                             int*        bottom,\r\n                             int*        right)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query the size values of the border (decorations) from||\r\n||'''top'''||pointer to variable for storing the size of the top border; NULL is permitted||\r\n||'''left'''||pointer to variable for storing the size of the left border; NULL is permitted||\r\n||'''bottom'''||pointer to variable for storing the size of the bottom border; NULL is permitted||\r\n||'''right'''||pointer to variable for storing the size of the right border; NULL is permitted||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nNote: If this function fails (returns -1), the size values will be initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the window in question was borderless.\r\n\r\nThis function also returns -1 if getting the information is not supported.\r\n\r\nThis function is only supported on X11.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowSize]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetWindowBrightness",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowBrightness",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:21:55.5789696-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetWindowBrightness =\r\nUse this function to get the brightness (gamma multiplier) for the display that owns a given window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nfloat SDL_GetWindowBrightness(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window used to select the display whose brightness will be queried||\r\n\r\n== Return Value ==\r\nReturns the brightness for the display where 0.0 is completely dark and 1.0 is normal brightness.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nDespite the name and signature, this method retrieves the brightness of the entire display, not an individual window. A window is considered to be owned by the display that contains the window's center pixel. (The index of this display can be retrieved using [[SDL_GetWindowDisplayIndex]]().)\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowBrightness]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowData",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowData",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:21:55.9125334-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetWindowData =\r\nUse this function to retrieve the data pointer associated with a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_GetWindowData(SDL_Window* window,\r\n                        const char* name)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n||'''name'''||the name of the pointer||\r\n\r\n== Return Value ==\r\nReturns the value associated with '''name'''.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowData]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowDisplayIndex",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowDisplayIndex",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:21:56.2041882-06:00",
      "RawText": "## page was renamed from SDL_GetWindowDisplay\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetWindowDisplayIndex =\r\nUse this function to get the index of the display associated with a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetWindowDisplayIndex(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns the index of the display containing the center of the window on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetDisplayBounds]]\r\n .[[SDL_GetNumVideoDisplays]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowDisplayMode",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowDisplayMode",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:22:41.8906486-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowDisplayMode =\r\nUse this function to fill in information about the display mode to use when a window is visible at fullscreen.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetWindowDisplayMode(SDL_Window*      window,\r\n                             SDL_DisplayMode* mode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n||'''mode'''||an [[SDL_DisplayMode]] structure filled in with the fullscreen display mode||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.   \r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowDisplayMode]]\r\n .[[SDL_SetWindowFullscreen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowFlags",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowFlags",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:22:42.1992303-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowFlags =\r\nUse this function to get the window flags.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetWindowFlags(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns a mask of the [[SDL_WindowFlags]] associated with '''window'''; see [[#Remarks|Remarks]] for details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe flags may be any of the following OR'd together:\r\n<<Include(SDL_WindowFlags, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateWindow]]\r\n .[[SDL_HideWindow]]\r\n .[[SDL_MaximizeWindow]]\r\n .[[SDL_MinimizeWindow]]\r\n .[[SDL_SetWindowFullscreen]]\r\n .[[SDL_SetWindowGrab]]\r\n .[[SDL_ShowWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowFromID",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowFromID",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:22:42.5052799-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowFromID =\r\nUse this function to get a window from a stored ID.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Window* SDL_GetWindowFromID(Uint32 id)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''id'''||the ID of the window||\r\n\r\n== Return Value ==\r\nReturns the window associated with '''id''' or NULL if it doesn't exist; call [[SDL_GetError]]() for more information. \r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowGammaRamp",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowGammaRamp",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:22:42.8106014-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetWindowGammaRamp =\r\nUse this function to get the gamma ramp for the display that owns a given window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetWindowGammaRamp(SDL_Window* window,\r\n                           Uint16*     red,\r\n                           Uint16*     green,\r\n                           Uint16*     blue)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window used to select the display whose gamma ramp will be queried||\r\n||'''red'''||a 256 element array of 16-bit quantities filled in with the translation table for the red channel, or NULL||\r\n||'''green'''||a 256 element array of 16-bit quantities filled in with the translation table for the green channel, or NULL||\r\n||'''blue'''||a 256 element array of 16-bit quantities filled in with the translation table for the blue channel, or NULL||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nDespite the name and signature, this method retrieves the gamma ramp of the entire display, not an individual window. A window is considered to be owned by the display that contains the window's center pixel. (The index of this display can be retrieved using [[SDL_GetWindowDisplayIndex]]().)\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowGammaRamp]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowGrab",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowGrab",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:22:43.1213451-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetWindowGrab =\r\nUse this function to get a window's input grab mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_GetWindowGrab(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if input is grabbed, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowGrab]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowID",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowID",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:22:43.4125044-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowID =\r\nUse this function to get the numeric ID of a window, for logging purposes.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetWindowID(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns the ID of the window on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowFromID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowMaximumSize",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowMaximumSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:22:48.7206582-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetWindowMaximumSize =\r\nUse this function to get the maximum size of a window's client area.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetWindowMaximumSize(SDL_Window* window,\r\n                              int*        w,\r\n                              int*        h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n||'''w'''||a pointer filled in with the maximum width of the window, may be NULL||\r\n||'''h'''||a pointer filled in with the maximum height of the window, may be NULL||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowMinimumSize]]\r\n .[[SDL_SetWindowMaximumSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetWindowMinimumSize",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowMinimumSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:23:29.3509051-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetWindowMinimumSize =\r\nUse this function to get the minimum size of a window's client area.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetWindowMinimumSize(SDL_Window* window,\r\n                              int*        w,\r\n                              int*        h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n||'''w'''||a pointer filled in with the minimum width of the window, may be NULL||\r\n||'''h'''||a pointer filled in with the minimum height of the window, may be NULL||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowMaximumSize]]\r\n .[[SDL_SetWindowMinimumSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetWindowOpacity",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowOpacity",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:23:29.6339152-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_GetWindowOpacity =\r\nUse this function to get the opacity of a window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_GetWindowOpacity(SDL_Window* window,\r\n                         float*      opacity)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to get the current opacity value from||\r\n||'''opacity'''||the float filled in (0.0f - transparent, 1.0f - opaque)||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nIf transparency isn't supported on this platform, opacity will be reported as 1.0f without error.\r\n\r\nThe parameter '''opacity''' is ignored if it is NULL.\r\n\r\nThis function also returns -1 if an invalid window was provided.\r\n\r\nThis function is only supported on DirectFB, X11, Cocoa (Apple Mac OS X) and Microsoft Windows.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowOpacity]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_GetWindowPixelFormat",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowPixelFormat",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:23:29.9016788-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetWindowPixelFormat =\r\nUse this function to get the pixel format associated with the window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_GetWindowPixelFormat(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns the pixel format of the window on success or SDL_PIXELFORMAT_UNKNOWN on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowPosition",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowPosition",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:23:30.1687057-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowPosition =\r\nUse this function to get the position of a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetWindowPosition(SDL_Window* window,\r\n                           int*        x,\r\n                           int*        y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n||'''x'''||a pointer filled in with the x position of the window, in screen coordinates, may be NULL||\r\n||'''y'''||a pointer filled in with the y position of the window, in screen coordinates, may be NULL||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf you do not need the value for one of the positions a NULL may be passed in the '''x''' or '''y''' parameter.\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowPosition]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowSize",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:23:30.4174007-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowSize =\r\nUse this function to get the size of a window's client area.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_GetWindowSize(SDL_Window* window,\r\n                       int*        w,\r\n                       int*        h)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query the width and height from||\r\n||'''w'''||a pointer filled in with the width of the window, in screen coordinates, may be NULL||\r\n||'''h'''||a pointer filled in with the height of the window, in screen coordinates, may be NULL||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nNULL can safely be passed as the '''w''' or '''h''' parameter if the width or height value is not desired.\r\n\r\nThe window size in screen coordinates may differ from the size in pixels, if the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a platform with high-dpi support (e.g. iOS or OS X). Use [[SDL_GL_GetDrawableSize]](), [[SDL_Vulkan_GetDrawableSize]](), or [[SDL_GetRendererOutputSize]]() to get the real client area size in pixels.\r\n\r\n== Related Functions ==\r\n .[[SDL_GL_GetDrawableSize]]\r\n .[[SDL_Vulkan_GetDrawableSize]]\r\n .[[SDL_SetWindowSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowSurface",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowSurface",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:23:35.726239-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_GetWindowSurface =\r\nUse this function to get the SDL surface associated with the window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_GetWindowSurface(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns the surface associated with the window, or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\" // include SDL header\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    SDL_Surface *screen; // even with SDL2, we can still bring ancient code back\r\n    SDL_Window *window;\r\n    SDL_Surface *image;\r\n\r\n    SDL_Init(SDL_INIT_VIDEO); // init video\r\n\r\n    // create the window like normal\r\n    window = SDL_CreateWindow(\"SDL2 Example\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, 0);\r\n\r\n    // but instead of creating a renderer, we can draw directly to the screen\r\n    screen = SDL_GetWindowSurface(window);\r\n\r\n    // let's just show some classic code for reference\r\n    image = SDL_LoadBMP(\"box.bmp\"); // loads image\r\n    SDL_BlitSurface(image, NULL, screen, NULL); // blit it to the screen\r\n    SDL_FreeSurface(image);\r\n\r\n    // this works just like SDL_Flip() in SDL 1.2\r\n    SDL_UpdateWindowSurface(window);\r\n\r\n    // show image for 2 seconds\r\n    SDL_Delay(2000);\r\n    SDL_DestroyWindow(window);\r\n    SDL_Quit();\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nA new surface will be created with the optimal format for the window, if necessary. This surface will be freed when the window is destroyed. Do not free this surface.\r\n\r\nThis surface will be invalidated if the window is resized. After resizing a window this function must be called again to return a valid surface.\r\n\r\nYou may not combine this with 3D or the rendering API on this window.\r\n\r\nThis function is affected by [[SDL_HINT_FRAMEBUFFER_ACCELERATION]].\r\n\r\n== Related Functions ==\r\n .[[SDL_UpdateWindowSurface]]\r\n .[[SDL_UpdateWindowSurfaceRects]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowTitle",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowTitle",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:24:16.4742757-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowTitle =\r\nUse this function to get the title of a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_GetWindowTitle(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to query||\r\n\r\n== Return Value ==\r\nReturns the title of the window in UTF-8 format or \"\" if there is no title.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SetWindowTitle]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_GetWindowWMInfo",
      "Uri": "https://wiki.libsdl.org/SDL_GetWindowWMInfo",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo",
        "CategorySWM"
      ],
      "LastUpdate": "2021-01-16T14:24:16.8182691-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_GetWindowWMInfo =\r\nUse this function to get driver specific information about a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_GetWindowWMInfo(SDL_Window*    window,\r\n                             SDL_SysWMinfo* info)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window about which information is being requested||\r\n||'''info'''||an [[SDL_SysWMinfo]] structure filled in with window information; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the function is implemented and the `version` member of the '''info''' struct is valid, or SDL_FALSE if the information could not be retrieved; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n#include \"SDL_syswm.h\"\r\n\r\nint main(int argc, char *argv[]) {\r\n  SDL_Window* window;\r\n  SDL_SysWMinfo info;\r\n\r\n  SDL_Init(0);\r\n\r\n  window = SDL_CreateWindow(\"\", 0, 0, 0, 0, SDL_WINDOW_HIDDEN);\r\n\r\n  SDL_VERSION(&info.version); /* initialize info structure with SDL version info */\r\n\r\n  if(SDL_GetWindowWMInfo(window,&info)) { /* the call returns true on success */\r\n    /* success */\r\n    const char *subsystem = \"an unknown system!\";\r\n    switch(info.subsystem) {\r\n      case SDL_SYSWM_UNKNOWN:   break;\r\n      case SDL_SYSWM_WINDOWS:   subsystem = \"Microsoft Windows(TM)\";  break;\r\n      case SDL_SYSWM_X11:       subsystem = \"X Window System\";        break;\r\n#if SDL_VERSION_ATLEAST(2, 0, 3)\r\n      case SDL_SYSWM_WINRT:     subsystem = \"WinRT\";                  break;\r\n#endif\r\n      case SDL_SYSWM_DIRECTFB:  subsystem = \"DirectFB\";               break;\r\n      case SDL_SYSWM_COCOA:     subsystem = \"Apple OS X\";             break;\r\n      case SDL_SYSWM_UIKIT:     subsystem = \"UIKit\";                  break;\r\n#if SDL_VERSION_ATLEAST(2, 0, 2)\r\n      case SDL_SYSWM_WAYLAND:   subsystem = \"Wayland\";                break;\r\n      case SDL_SYSWM_MIR:       subsystem = \"Mir\";                    break;\r\n#endif\r\n#if SDL_VERSION_ATLEAST(2, 0, 4)\r\n      case SDL_SYSWM_ANDROID:   subsystem = \"Android\";                break;\r\n#endif\r\n#if SDL_VERSION_ATLEAST(2, 0, 5)\r\n      case SDL_SYSWM_VIVANTE:   subsystem = \"Vivante\";                break;\r\n#endif\r\n    }\r\n\r\n    SDL_Log(\"This program is running SDL version %d.%d.%d on %s\",\r\n        (int)info.version.major,\r\n        (int)info.version.minor,\r\n        (int)info.version.patch,\r\n        subsystem);\r\n  } else {\r\n    /* call failed */\r\n    SDL_LogError(SDL_LOG_CATEGORY_ERROR, \"Couldn't get window information: %s\", SDL_GetError());\r\n  }\r\n\r\n  SDL_DestroyWindow(window);\r\n  SDL_Quit();\r\n\r\n  return 0;\r\n}\r\n\r\n}}}\r\n\r\n== Remarks ==\r\nYou must include SDL_syswm.h for the declaration of [[SDL_SysWMinfo]].\r\n\r\nThe '''info''' structure must be initialized with the SDL version, and is then filled in with information about the given window, as shown in the [[#Code Examples|Code Example]].\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]], [[CategorySWM]]\r\n\r\n##Actually from SDL_syswm.h header but listed in both categories for the wiki.\r\n"
    },
    {
      "Name": "SDL_HapticClose",
      "Uri": "https://wiki.libsdl.org/SDL_HapticClose",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:24:17.1375267-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticClose =\r\nUse this function to close a haptic device previously opened with [[SDL_HapticOpen]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_HapticClose(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to close||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticDestroyEffect",
      "Uri": "https://wiki.libsdl.org/SDL_HapticDestroyEffect",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:24:17.4642445-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticDestroyEffect =\r\nUse this function to destroy a haptic effect on the device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_HapticDestroyEffect(SDL_Haptic* haptic,\r\n                             int         effect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to destroy the effect on||\r\n||'''effect'''|| /* ID */ identifier of the haptic effect to destroy||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis will stop the effect if it's running. Effects are automatically destroyed when the device is closed.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticEffectSupported",
      "Uri": "https://wiki.libsdl.org/SDL_HapticEffectSupported",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:24:17.7741489-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticEffectSupported =\r\nUse this function to check to see if an effect is supported by a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticEffectSupported(SDL_Haptic*       haptic,\r\n                              SDL_HapticEffect* effect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to check on /* query */ ||\r\n||'''effect'''||the desired effect to check to see if it is supported||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNewEffect]]\r\n .[[SDL_HapticQuery]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticGetEffectStatus",
      "Uri": "https://wiki.libsdl.org/SDL_HapticGetEffectStatus",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:25:03.494648-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticGetEffectStatus =\r\nUse this function to get the status of the current effect on the specified haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticGetEffectStatus(SDL_Haptic* haptic,\r\n                              int         effect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to query for the effect status on||\r\n||'''effect'''||the /* ID */ identifier of the haptic effect to query its status||\r\n\r\n== Return Value ==\r\nReturns 0 if it isn't playing, 1 if it is playing, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nDevice must support the SDL_HAPTIC_STATUS feature.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticRunEffect]]\r\n .[[SDL_HapticStopEffect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticIndex",
      "Uri": "https://wiki.libsdl.org/SDL_HapticIndex",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:25:03.8330962-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticIndex =\r\nUse this function to get the index of a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticIndex(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to get the index of /* query*/ ||\r\n\r\n== Return Value ==\r\nReturns the index of the specified haptic device or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticOpen]]\r\n .[[SDL_HapticOpened]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticName",
      "Uri": "https://wiki.libsdl.org/SDL_HapticName",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:25:04.137406-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticName =\r\nUse this function to get the implementation dependent name of a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_HapticName(int device_index)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''device_index'''||index of the device to get its name /* the name of / to query */ ||\r\n\r\n== Return Value ==\r\nReturns the name of the device or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis can be called before any joysticks are opened.  If no name can be found, this function returns NULL.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_NumHaptics]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticNewEffect",
      "Uri": "https://wiki.libsdl.org/SDL_HapticNewEffect",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:25:04.4470983-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticNewEffect =\r\nUse this function to create a new haptic effect on a specified device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticNewEffect(SDL_Haptic*       haptic,\r\n                        SDL_HapticEffect* effect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||an SDL_Haptic device to create the effect on||\r\n||'''effect'''||an [[SDL_HapticEffect]] structure containing the properties of the effect to create||\r\n\r\n== Return Value ==\r\nReturns the ID of the effect on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticDestroyEffect]]\r\n .[[SDL_HapticRunEffect]]\r\n .[[SDL_HapticUpdateEffect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticNumAxes",
      "Uri": "https://wiki.libsdl.org/SDL_HapticNumAxes",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:25:45.2082033-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticNumAxes =\r\nUse this function to get the number of haptic axes the device has.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticNumAxes(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to query||\r\n\r\n== Return Value ==\r\nReturns the number of axes on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe number of haptic axes might be useful if working with the [[SDL_HapticDirection]] effect.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticNumEffects",
      "Uri": "https://wiki.libsdl.org/SDL_HapticNumEffects",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:25:45.4949629-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticNumEffects =\r\nUse this function to get the number of effects a haptic device can store.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticNumEffects(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to query||\r\n\r\n== Return Value ==\r\nReturns the number of effects the haptic device can store or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nOn some platforms this isn't fully supported, and therefore is an approximation.  Always check to see if your created effect was actually created and do not rely solely on [[SDL_HapticNumEffects]]().\r\n\r\n/* <<Color2(col=green,text=\"Is it important to specify ''how'' to check to see if your effect was created or is listing the query function below sufficient?\")>> */\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNumEffectsPlaying]]\r\n .[[SDL_HapticQuery]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticNumEffectsPlaying",
      "Uri": "https://wiki.libsdl.org/SDL_HapticNumEffectsPlaying",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:25:50.7811061-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticNumEffectsPlaying =\r\nUse this function to get the number of effects a haptic device can play at the same time.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticNumEffectsPlaying(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to query maximum playing effects||\r\n\r\n== Return Value ==\r\nReturns the number of effects the haptic device can play at the same time or a negative error code on failure; call [[SDL_GetError]]() for more information. /* <<Color2(col=green,text=\"Should there be a link to Remarks here?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is not supported on all platforms, but will always return a value. /* ^This function is available/included^ */ Added here for the sake of completeness. /* <<Color2(col=green,text=\"Is it important to note what the value would be if it is not supported?  Would it just be 1 or 0?\")>> */\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticNumEffects]]\r\n .[[SDL_HapticQuery]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticOpen",
      "Uri": "https://wiki.libsdl.org/SDL_HapticOpen",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:27:51.8921924-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticOpen =\r\nUse this function to open a haptic device for use.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Haptic* SDL_HapticOpen(int device_index)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''device_index'''||index of the device to open||\r\n\r\n== Return Value ==\r\nReturns the device identifier or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe index passed as an argument refers to the N'th haptic device on this system.\r\n\r\nWhen opening a haptic device, its gain will be set to maximum and autocenter will be disabled. To modify these values use [[SDL_HapticSetGain]]() and [[SDL_HapticSetAutocenter]]().\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticClose]]\r\n .[[SDL_HapticIndex]]\r\n .[[SDL_HapticOpenFromJoystick]]\r\n .[[SDL_HapticOpenFromMouse]]\r\n .[[SDL_HapticPause]]\r\n .[[SDL_HapticSetAutocenter]]\r\n .[[SDL_HapticSetGain]]\r\n .[[SDL_HapticStopAll]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticOpenFromJoystick",
      "Uri": "https://wiki.libsdl.org/SDL_HapticOpenFromJoystick",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:21.5222341-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticOpenFromJoystick =\r\nUse this function to open a haptic device for use from a joystick device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||the SDL_Joystick to create a haptic device from||\r\n\r\n== Return Value ==\r\nReturns a valid haptic device identifier on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nYou must still close the haptic device separately. It will not be closed with the joystick.\r\n\r\nWhen opened from a joystick you should first close the haptic device before closing the joystick device. If not, on some implementations the haptic device will also get unallocated and you'll be unable to use force feedback on that device.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticClose]]\r\n .[[SDL_HapticOpen]]\r\n .[[SDL_JoystickIsHaptic]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticOpenFromMouse",
      "Uri": "https://wiki.libsdl.org/SDL_HapticOpenFromMouse",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:22.0295336-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticOpenFromMouse =\r\nUse this function to try to open a haptic device from the current mouse.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Haptic* SDL_HapticOpenFromMouse(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the haptic device identifier or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticOpen]]\r\n .[[SDL_MouseIsHaptic]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticOpened",
      "Uri": "https://wiki.libsdl.org/SDL_HapticOpened",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:22.5256011-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticOpened =\r\nUse this function to check if the haptic device at the designated index has been opened.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticOpened(int device_index)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''device_index'''||the index to check to see if it has been opened /* of the device to query */||\r\n\r\n== Return Value ==\r\nReturns 1 if it has been opened, 0 if it hasn't or on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticIndex]]\r\n .[[SDL_HapticOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticPause",
      "Uri": "https://wiki.libsdl.org/SDL_HapticPause",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:22.9903527-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticPause =\r\nUse this function to pause a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticPause(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to pause||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nDevice must support the SDL_HAPTIC_PAUSE feature. Call [[SDL_HapticUnpause]]() to resume playback.\r\n\r\nDo not modify the effects nor add new ones while the device is paused. That can cause all sorts of weird errors.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticUnpause]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticQuery",
      "Uri": "https://wiki.libsdl.org/SDL_HapticQuery",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:23.4757107-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticQuery =\r\nUse this function to get the haptic device's supported features in bitwise manner.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nunsigned int SDL_HapticQuery(SDL_Haptic* haptic)\r\n}}}\r\n/* <<Color2(col=green,text=\"Should that say Uint8 or Uint16 etc instead of \"unsigned int\"?\")>> */\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to query||\r\n\r\n== Return Value ==\r\nReturns a list of supported haptic features in bitwise manner (OR'd), or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n/* <<Color2(col=green,text=\"It seems there is probably a more clear or complete way to describe this...  Is there a struct that should be Included here?  Maybe the [[SDL_HapticEffect]] union?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_Haptic *haptic;\r\nif (SDL_HapticQuery(haptic) & SDL_HAPTIC_CONSTANT) {\r\n    SDL_Log(\"We have constant haptic effect!\");\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticEffectSupported]]\r\n .[[SDL_HapticNumEffects]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticRumbleInit",
      "Uri": "https://wiki.libsdl.org/SDL_HapticRumbleInit",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:28.9240257-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticRumbleInit =\r\nUse this function to initialize the /* a */ haptic device for simple rumble playback.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticRumbleInit(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the haptic device to initialize for simple rumble playback||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticOpen]]\r\n .[[SDL_HapticRumblePlay]]\r\n .[[SDL_HapticRumbleStop]]\r\n .[[SDL_HapticRumbleSupported]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticRumblePlay",
      "Uri": "https://wiki.libsdl.org/SDL_HapticRumblePlay",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:29.4834087-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticRumblePlay =\r\nUse this function to run a simple rumble effect on a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticRumblePlay(SDL_Haptic* haptic,\r\n                         float       strength,\r\n                         Uint32      length)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the haptic device to play the rumble effect on||\r\n||'''strength'''||strength of the rumble to play as a 0-1 float value||\r\n||'''length'''||length of the rumble to play in milliseconds||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticRumbleInit]]\r\n .[[SDL_HapticRumbleStop]]\r\n .[[SDL_HapticRumbleSupported]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticRumbleStop",
      "Uri": "https://wiki.libsdl.org/SDL_HapticRumbleStop",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:29.9632393-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticRumbleStop =\r\nUse this function to stop the simple rumble on a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticRumbleStop(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the haptic device to stop the rumble effect on||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticRumbleInit]]\r\n .[[SDL_HapticRumblePlay]]\r\n .[[SDL_HapticRumbleSupported]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticRumbleSupported",
      "Uri": "https://wiki.libsdl.org/SDL_HapticRumbleSupported",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:30.4268778-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticRumbleSupported =\r\nUse this function to check whether rumble is supported on a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticRumbleSupported(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||haptic device to check for rumble support||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_Haptic* dev;\r\nif (SDL_HapticRumbleSupported(dev)) {\r\n    SDL_HapticRumbleInit(dev);\r\n    SDL_HapticRumblePlay(dev, 1.0f, 3000);\r\n    SDL_Delay(3000);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticRumbleInit]]\r\n .[[SDL_HapticRumblePlay]]\r\n .[[SDL_HapticRumbleStop]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticRunEffect",
      "Uri": "https://wiki.libsdl.org/SDL_HapticRunEffect",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:30.8976082-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticRunEffect =\r\nUse this function to run the haptic effect on its associated haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticRunEffect(SDL_Haptic* haptic,\r\n                        int         effect,\r\n                        Uint32      iterations)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to run the effect on||\r\n||'''effect'''||the /* ID */ identifier of the haptic effect to run||\r\n||'''iterations'''||the number of iterations to run the effect; use SDL_HAPTIC_INFINITY for infinity /* ''-or-'' the number of times to repeat the effect; see [[#Remarks|Remarks]] for details */ ||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''iterations''' are SDL_HAPTIC_INFINITY, it'll run the effect over and over repeating the envelope (attack and fade) every time. If you only want the effect to last forever, set SDL_HAPTIC_INFINITY in the effect's `length` parameter.\r\n\r\n/* ''-or-'' */\r\n\r\n/* To repeat the effect over and over indefinitely, set '''iterations''' to SDL_HAPTIC_INFINITY.  (Repeats the envelope - attack and fade.)  To make one instance of the effect last indefinitely (so the effect does not fade), set the effect's `length` in its structure/union to SDL_HAPTIC_INFINITY instead. */\r\n\r\n/* <<Color2(col=green,text=\"Is it important to say how to end an effect that has an SDL_HAPTIC_INFINITY setting or is it enough to list the destroy function below?\")>> */\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticDestroyEffect]]\r\n .[[SDL_HapticGetEffectStatus]]\r\n .[[SDL_HapticStopEffect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticSetAutocenter",
      "Uri": "https://wiki.libsdl.org/SDL_HapticSetAutocenter",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:31.3672017-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticSetAutocenter =\r\nUse this function to set the global autocenter of the device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticSetAutocenter(SDL_Haptic* haptic,\r\n                            int         autocenter)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to set autocentering on||\r\n||'''autocenter'''||value to set autocenter to (0-100), 0 disables autocentering; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nAutocenter should be between 0 and 100. Setting it to 0 will disable autocentering. /* <<Color2(col=green,text=\"This is redundant w/ the FP section and could all be contained there (as shown). Should it be removed from here?\")>> */\r\n\r\nDevice must support the SDL_HAPTIC_AUTOCENTER feature.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticQuery]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticSetGain",
      "Uri": "https://wiki.libsdl.org/SDL_HapticSetGain",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:36.9200728-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticSetGain =\r\nUse this function to set the global gain of the specified haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticSetGain(SDL_Haptic* haptic,\r\n                      int         gain)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to set the gain on||\r\n||'''gain'''||value to set the gain to, should be between 0 and 100 (0 - 100)||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nDevice must support the SDL_HAPTIC_GAIN feature.\r\n\r\nThe user may specify the maximum gain by setting the environment variable\r\nSDL_HAPTIC_GAIN_MAX which should be between 0 and 100. All calls to [[SDL_HapticSetGain]]() will scale linearly using SDL_HAPTIC_GAIN_MAX as the maximum.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticQuery]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticStopAll",
      "Uri": "https://wiki.libsdl.org/SDL_HapticStopAll",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:45.1960637-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticStopAll =\r\nUse this function to stop all the currently playing effects on a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticStopAll(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to stop||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticStopEffect",
      "Uri": "https://wiki.libsdl.org/SDL_HapticStopEffect",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:45.7417919-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticStopEffect =\r\nUse this function to stop the haptic effect on its associated haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticStopEffect(SDL_Haptic* haptic,\r\n                         int         effect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to stop the effect on||\r\n||'''effect'''||the /* ID */ identifier of the haptic effect to stop||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticDestroyEffect]]\r\n .[[SDL_HapticRunEffect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticUnpause",
      "Uri": "https://wiki.libsdl.org/SDL_HapticUnpause",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:46.3244505-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticUnpause =\r\nUse this function to unpause a haptic device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticUnpause(SDL_Haptic* haptic)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device to unpause||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nCall to unpause after [[SDL_HapticPause]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticPause]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_HapticUpdateEffect",
      "Uri": "https://wiki.libsdl.org/SDL_HapticUpdateEffect",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:36:46.8607906-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_HapticUpdateEffect =\r\nUse this function to update the properties of an effect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_HapticUpdateEffect(SDL_Haptic*       haptic,\r\n                           int               effect,\r\n                           SDL_HapticEffect* data)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''haptic'''||the SDL_Haptic device that has the effect||\r\n||'''effect'''||the identifier of the effect to update||\r\n||'''data'''||an [[SDL_HapticEffect]] structure containing the new effect properties to use||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nCan be used dynamically, although behavior when dynamically changing direction may be strange. Specifically the effect may re-upload itself and start playing from the start. You also cannot change the type either when running [[SDL_HapticUpdateEffect]]().\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticDestroyEffect]]\r\n .[[SDL_HapticNewEffect]]\r\n .[[SDL_HapticRunEffect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_Has3DNow",
      "Uri": "https://wiki.libsdl.org/SDL_Has3DNow",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:36:47.3651893-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Has3DNow =\r\nUse this function to determine whether the CPU has 3DNow! features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_Has3DNow(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has 3DNow! features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasAVX",
      "Uri": "https://wiki.libsdl.org/SDL_HasAVX",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:36:52.9205682-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HasAVX =\r\nUse this function to determine whether the CPU has AVX features.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasAVX(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has AVX features or SDL_FALSE if not.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HasAVX2",
      "Uri": "https://wiki.libsdl.org/SDL_HasAVX2",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:36:53.3923643-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HasAVX2 =\r\nUse this function to determine whether the CPU has AVX2 features.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasAVX2(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has AVX2 features or SDL_FALSE if not.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HasAltiVec",
      "Uri": "https://wiki.libsdl.org/SDL_HasAltiVec",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:36:53.9265941-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasAltiVec =\r\nUse this function to determine whether the CPU has Alti``Vec features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasAltiVec(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has Alti``Vec features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasClipboardText",
      "Uri": "https://wiki.libsdl.org/SDL_HasClipboardText",
      "Categories": [
        "CategoryAPI",
        "CategoryClipboard"
      ],
      "LastUpdate": "2021-01-16T14:36:54.4459091-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HasClipboardText =\r\nUse this function to get a flag indicating whether the clipboard exists and contains a text string that is non-empty.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasClipboardText(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the clipboard has text, or SDL_FALSE if it does not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetClipboardText]]\r\n .[[SDL_SetClipboardText]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryClipboard]]\r\n"
    },
    {
      "Name": "SDL_HasEvent",
      "Uri": "https://wiki.libsdl.org/SDL_HasEvent",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:37:35.5984586-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasEvent =\r\nUse this function to check for the existence of certain event types in the event queue.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasEvent(Uint32 type)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''type'''||the type of event to be queried; see [[SDL_EventType]] for details||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if events matching '''type''' are present, or SDL_FALSE if events matching '''type''' are not present.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf you need to check for a range of event types, use [[SDL_HasEvents]]() instead.\r\n\r\n== Related Functions ==\r\n .[[SDL_HasEvents]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_HasEvents",
      "Uri": "https://wiki.libsdl.org/SDL_HasEvents",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:37:36.1609477-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasEvents =\r\nUse this function to check for the existence of a range of event types in the event queue.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasEvents(Uint32 minType,\r\n                       Uint32 maxType)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''minType'''||the minimum type of event to be queried; see [[SDL_EventType]] for details||\r\n||'''maxType'''||the maximum type of event to be queried; see [[SDL_EventType]] for details||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if events with types in the range between '''minType''' and '''maxType''' are present, or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf you need to check for a single event type, you can use [[SDL_HasEvent]]() instead.\r\n\r\n== Related Functions ==\r\n .[[SDL_HasEvent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_HasIntersection",
      "Uri": "https://wiki.libsdl.org/SDL_HasIntersection",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:37:41.6293038-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasIntersection =\r\nUse this function to determine whether two rectangles intersect.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasIntersection(const SDL_Rect* A,\r\n                             const SDL_Rect* B)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''A'''||an [[SDL_Rect]] structure representing the first rectangle||\r\n||'''B'''||an [[SDL_Rect]] structure representing the second rectangle||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf either pointer is NULL the function will return SDL_FALSE.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_IntersectRect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_HasMMX",
      "Uri": "https://wiki.libsdl.org/SDL_HasMMX",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:37:42.092406-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasMMX =\r\nUse this function to determine whether the CPU has MMX features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasMMX(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has MMX features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasRDTSC",
      "Uri": "https://wiki.libsdl.org/SDL_HasRDTSC",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:37:42.5284366-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasRDTSC =\r\nUse this function to determine whether the CPU has the RDTSC instruction.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasRDTSC(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has the RDTSC instruction or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasSSE",
      "Uri": "https://wiki.libsdl.org/SDL_HasSSE",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:37:42.9770294-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasSSE =\r\nUse this function to determine whether the CPU has SSE features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasSSE(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has SSE features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasSSE2",
      "Uri": "https://wiki.libsdl.org/SDL_HasSSE2",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:37:43.4531091-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HasSSE2 =\r\nUse this function to determine whether the CPU has SSE2 features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasSSE2(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has SSE2 features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasSSE3",
      "Uri": "https://wiki.libsdl.org/SDL_HasSSE3",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:37:43.9684016-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HasSSE3 =\r\nUse this function to determine whether the CPU has SSE3 features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasSSE3(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has SSE3 features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE41]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasSSE41",
      "Uri": "https://wiki.libsdl.org/SDL_HasSSE41",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:37:50.4928898-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HasSSE41 =\r\nUse this function to determine whether the CPU has SSE4.1 features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasSSE41(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has SSE4.1 features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE42]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasSSE42",
      "Uri": "https://wiki.libsdl.org/SDL_HasSSE42",
      "Categories": [
        "CategoryAPI",
        "CategoryCPU"
      ],
      "LastUpdate": "2021-01-16T14:37:51.0243208-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_HasSSE42 =\r\nUse this function to determine whether the CPU has SSE4.2 features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasSSE42(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the CPU has SSE4.2 features or SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Has3DNow]]\r\n .[[SDL_HasAltiVec]]\r\n .[[SDL_HasAVX]]\r\n .[[SDL_HasAVX2]]\r\n .[[SDL_HasMMX]]\r\n .[[SDL_HasRDTSC]]\r\n .[[SDL_HasSSE]]\r\n .[[SDL_HasSSE2]]\r\n .[[SDL_HasSSE3]]\r\n .[[SDL_HasSSE41]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryCPU]]\r\n"
    },
    {
      "Name": "SDL_HasScreenKeyboardSupport",
      "Uri": "https://wiki.libsdl.org/SDL_HasScreenKeyboardSupport",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:37:51.8944173-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_HasScreenKeyboardSupport =\r\nUse this function to check whether the platform has some screen keyboard support.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_HasScreenKeyboardSupport(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the platform has some screen keyboard support or SDL_FALSE if not.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n * [[SDL_StartTextInput]]\r\n * [[SDL_IsScreenKeyboardShown]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_HideWindow",
      "Uri": "https://wiki.libsdl.org/SDL_HideWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:37:52.3573124-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_HideWindow =\r\nUse this function to hide a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_HideWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to hide||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_ShowWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_Init",
      "Uri": "https://wiki.libsdl.org/SDL_Init",
      "Categories": [
        "CategoryAPI",
        "CategoryInit"
      ],
      "LastUpdate": "2021-01-16T14:37:52.8666406-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_Init =\r\nUse this function to initialize the SDL library.  This must be called before using most other SDL functions.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_Init(Uint32 flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''flags'''||subsystem initialization flags; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_AUDIO) != 0) {\r\n        SDL_Log(\"Unable to initialize SDL: %s\", SDL_GetError());\r\n        return 1;\r\n    }\r\n\r\n    /* ... */\r\n\r\n    SDL_Quit();\r\n\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_Init]]() simply forwards to calling [[SDL_InitSubSystem]]().  Therefore, the two may be used interchangeably. Though for readability of your code [[SDL_InitSubSystem]]() might be preferred.\r\n\r\nThe [[CategoryIO|file I/O]] and [[CategoryThread|threading]] subsystems are initialized by default.  You must specifically initialize other subsystems if you use them in your application.\r\n\r\n[[CategoryLog|Logging]] works without initialization, too.\r\n\r\n'''flags''' may be any of the following OR'd together:\r\n\r\n##The following content is included on `SDL_InitSubSystem`.  Any changes between these comments will be reflected there as well.  Please use caution when editing.  Start Include here.\r\n\r\n||'''SDL_INIT_TIMER'''||timer subsystem||\r\n||'''SDL_INIT_AUDIO'''||audio subsystem||\r\n||'''SDL_INIT_VIDEO'''||video subsystem; automatically initializes the events subsystem||\r\n||'''SDL_INIT_JOYSTICK'''||joystick subsystem; automatically initializes the events subsystem||\r\n||'''SDL_INIT_HAPTIC'''||haptic (force feedback) subsystem||\r\n||'''SDL_INIT_GAMECONTROLLER'''||controller subsystem; automatically initializes the joystick subsystem||\r\n||'''SDL_INIT_EVENTS'''||events subsystem||\r\n||'''SDL_INIT_EVERYTHING'''||all of the above subsystems||\r\n||'''SDL_INIT_NOPARACHUTE'''||compatibility; this flag is ignored||\r\n\r\n##End Include here.\r\n\r\nIf you want to initialize subsystems separately you would call [[SDL_Init]](0) followed by [[SDL_InitSubSystem]]() with the desired subsystem flag.\r\n\r\n== Related Functions ==\r\n .[[SDL_InitSubSystem]]\r\n .[[SDL_Quit]]\r\n .[[SDL_SetMainReady]]\r\n .[[SDL_WasInit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryInit]]\r\n"
    },
    {
      "Name": "SDL_InitSubSystem",
      "Uri": "https://wiki.libsdl.org/SDL_InitSubSystem",
      "Categories": [
        "CategoryAPI",
        "CategoryInit"
      ],
      "LastUpdate": "2021-01-16T14:37:53.3889869-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_InitSubSystem =\r\nUse this function to initialize specific SDL subsystems.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_InitSubSystem(Uint32 flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''flags'''||any of the flags used by [[SDL_Init]](); see [[#flags|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* Separating Joystick and Video initialization. */\r\nSDL_Init(SDL_INIT_VIDEO);\r\n\r\nSDL_Window* window = SDL_CreateWindow(\"A Window\",\r\n    SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480,\r\n    SDL_WINDOW_FULLSCREEN);\r\nSDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);\r\n\r\n/* Do Some Video stuff */\r\n\r\n/* Initialize the joystick subsystem */\r\nSDL_InitSubSystem(SDL_INIT_JOYSTICK);\r\n\r\n/* Do some stuff with video and joystick */\r\n\r\n/* Shut them both down */\r\nSDL_Quit();\r\n}}}\r\n\r\n== Remarks ==\r\nAfter SDL has been initialized with [[SDL_Init]]() you may initialize uninitialized subsystems with [[SDL_InitSubSystem]]().\r\n\r\n<<Anchor(flags)>>These are the flags which may be passed to [[SDL_InitSubSystem]]() and may be OR'd together to initialize multiple subsystems simultaneously.\r\n<<Include(SDL_Init, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n[[SDL_Init]]() initializes assertions and crash protection and then calls [[SDL_InitSubSystem]]().  If you want to bypass those protections you can call [[SDL_InitSubSystem]]() directly.\r\n\r\nSubsystem initialization is ref-counted, you must call [[SDL_QuitSubSystem]]() for each SDL_!InitSubSystem() to correctly shutdown a subsystem manually (or call [[SDL_Quit]]() to force shutdown). If a subsystem is already loaded then this call will increase the ref-count and return.\r\n\r\n== Related Functions ==\r\n .[[SDL_Init]]\r\n .[[SDL_Quit]]\r\n .[[SDL_QuitSubSystem]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryInit]]\r\n"
    },
    {
      "Name": "SDL_IntersectRect",
      "Uri": "https://wiki.libsdl.org/SDL_IntersectRect",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:37:58.8834987-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_IntersectRect =\r\nUse this function to calculate the intersection of two rectangles.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_IntersectRect(const SDL_Rect* A,\r\n                           const SDL_Rect* B,\r\n                           SDL_Rect*       result)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''A'''||an [[SDL_Rect]] structure representing the first rectangle||\r\n||'''B'''||an [[SDL_Rect]] structure representing the second rectangle||\r\n||'''result'''||an [[SDL_Rect]] structure filled in with the intersection of rectangles '''A''' and '''B'''||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''result''' is NULL then this function will return SDL_FALSE.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HasIntersection]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_IntersectRectAndLine",
      "Uri": "https://wiki.libsdl.org/SDL_IntersectRectAndLine",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:37:59.3705494-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_IntersectRectAndLine =\r\nUse this function to calculate the intersection of a rectangle and line segment.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_IntersectRectAndLine(const SDL_Rect* rect,\r\n                                  int*            X1,\r\n                                  int*            Y1,\r\n                                  int*            X2,\r\n                                  int*            Y2)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''rect'''||an [[SDL_Rect]] structure representing the rectangle to intersect||\r\n||'''X1'''||a pointer to the starting X-coordinate of the line||\r\n||'''Y1'''||a pointer to the starting Y-coordinate of the line||\r\n||'''X2'''||a pointer to the ending X-coordinate of the line||\r\n||'''Y2'''||a pointer to the ending Y-coordinate of the line||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is used to clip a line segment to a rectangle.  A line segment contained entirely within the rectangle or that does not intersect will remain unchanged.  A line segment that crosses the rectangle at either or both ends will be clipped to the boundary of the rectangle and the new coordinates saved in '''X1''', '''Y1''', '''X2''', and/or '''Y2''' as necessary.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_IsGameController",
      "Uri": "https://wiki.libsdl.org/SDL_IsGameController",
      "Categories": [
        "CategoryAPI",
        "CategoryGameController"
      ],
      "LastUpdate": "2021-01-16T14:37:59.7979927-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_IsGameController =\r\nUse this function to check if the given joystick is supported by the game controller interface.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_IsGameController(int joystick_index)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''joystick_index'''||the device_index of a device, up to [[SDL_NumJoysticks]]()||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the given joystick is supported by the game controller interface, SDL_FALSE if it isn't or it's an invalid index.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nfor (int i = 0; i < SDL_NumJoysticks(); ++i) {\r\n    if (SDL_IsGameController(i)) {\r\n        printf(\"Joystick %i is supported by the game controller interface!\\n\", i);\r\n    }\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n'''joystick_index''' is the same as the `device_index` passed to [[SDL_JoystickOpen]]().\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerNameForIndex]]\r\n .[[SDL_GameControllerOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryGameController]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_IsScreenKeyboardShown",
      "Uri": "https://wiki.libsdl.org/SDL_IsScreenKeyboardShown",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:38:00.2622599-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_IsScreenKeyboardShown =\r\nUse this function to check whether the screen keyboard is shown for given window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_IsScreenKeyboardShown(SDL_Window* window)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window for which screen keyboard should be queried||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if screen keyboard is shown or SDL_FALSE if not.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HasScreenKeyboardSupport]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_IsScreenSaverEnabled",
      "Uri": "https://wiki.libsdl.org/SDL_IsScreenSaverEnabled",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:38:00.7107629-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_IsScreenSaverEnabled =\r\nUse this function to check whether the screensaver is currently enabled.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_IsScreenSaverEnabled(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the screensaver is enabled, SDL_FALSE if it is disabled.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe screensaver is disabled by default since SDL 2.0.2. Before SDL 2.0.2 the screensaver was enabled by default.\r\n\r\nThe default can also be changed using [[SDL_HINT_VIDEO_ALLOW_SCREENSAVER]].\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_DisableScreenSaver]]\r\n .[[SDL_EnableScreenSaver]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_IsTextInputActive",
      "Uri": "https://wiki.libsdl.org/SDL_IsTextInputActive",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:38:01.1313311-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_IsTextInputActive =\r\nUse this function to check whether or not Unicode text input events are enabled.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_IsTextInputActive(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if text input events are enabled else SDL_FALSE.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThere is a [[Tutorials/TextInput|tutorial]].\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_StartTextInput]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_JoystickClose",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickClose",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:47.1661171-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickClose =\r\nUse this function to close a joystick previously opened with [[SDL_JoystickOpen]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_JoystickClose(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickCurrentPowerLevel",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickCurrentPowerLevel",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:47.5553169-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_JoystickCurrentPowerLevel =\r\nUse this function to get the battery level of a joystick as [[SDL_JoystickPowerLevel]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(SDL_Joystick* joystick)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||the SDL_Joystick to query||\r\n\r\n\r\n== Return Value ==\r\nReturns the current battery level as [[SDL_JoystickPowerLevel]] on success or [[SDL_JoystickPowerLevel|SDL_JOYSTICK_POWER_UNKNOWN]] if it is unknown; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_JoystickEventState",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickEventState",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:47.9353803-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickEventState =\r\nUse this function to enable/disable joystick event polling.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_JoystickEventState(int state)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''state'''||can be one of SDL_QUERY, SDL_IGNORE, or SDL_ENABLE||\r\nNote: You may use -1, 0, or 1 in place of SDL_QUERY, SDL_IGNORE, or SDL_ENABLE respectively.\r\n\r\n== Return Value ==\r\nReturns 1 if enabled, 0 if disabled, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\nIf '''state''' is SDL_QUERY then the current state is returned, otherwise the new processing state is returned.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nprintf(\"%i\\n\", SDL_JoystickEventState(SDL_QUERY));  /* prints 1 */\r\nprintf(\"%i\\n\", SDL_JoystickEventState(SDL_IGNORE)); /* prints 0 */\r\nprintf(\"%i\\n\", SDL_JoystickEventState(SDL_QUERY));  /* prints 0 */\r\n}}}\r\n\r\n== Remarks ==\r\nIf joystick events are disabled, you must call [[SDL_JoystickUpdate]]() yourself and manually check the state of the joystick when you want joystick information.\r\n\r\nNote: It is recommended that you leave joystick event handling enabled.\r\n\r\n/!\\ WARNING: Calling this function may delete all events currently in SDL's event queue.\r\n\r\n== Related Functions ==\r\n .[[SDL_GameControllerEventState]]\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickFromInstanceID",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickFromInstanceID",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:48.3238168-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_JoystickFromInstanceID =\r\nUse this function to get the SDL_Joystick associated with an instance id.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Joystick* SDL_JoystickFromInstanceID(SDL_JoystickID joyid)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''joyid'''||the instance id to get the SDL_Joystick for||\r\n\r\n\r\n== Return Value ==\r\nReturns an SDL_Joystick on success or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_JoystickGetAttached",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetAttached",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:48.7095261-06:00",
      "RawText": "## page was renamed from SDL_JoystickOpened\r\n#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickGetAttached =\r\nUse this function to get the status of a specified joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_JoystickGetAttached(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||the joystick to query||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the joystick has been opened, SDL_FALSE if it has not; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickClose]]\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetAxis",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetAxis",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:49.1748383-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickGetAxis =\r\nUse this function to get the current state of an axis control on a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSint16 SDL_JoystickGetAxis(SDL_Joystick* joystick,\r\n                           int           axis)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n||'''axis'''||the axis to query; the axis indices start at index 0; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns a 16-bit signed integer representing the current position of the axis or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\nThe state is a value ranging from -32768 to 32767. /* <<Color2(col=green,text=\"Is this the RV or a Remark?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_Joystick* joy1;\r\nSint16 x_move, y_move;\r\n\r\nx_move = SDL_JoystickGetAxis(joy1, 0);\r\ny_move = SDL_JoystickGetAxis(joy1, 1);\r\n}}}\r\n\r\n== Remarks ==\r\nOn most modern joysticks the X axis is usually represented by '''axis''' 0 and the Y axis by '''axis''' 1. The value returned by [[SDL_JoystickGetAxis]]() is a signed integer (-32768 to 32767) representing the current position of the axis.  It may be necessary to impose certain tolerances on these values to account for jitter.\r\n\r\nSome joysticks use axes 2 and 3 for extra buttons. /* <<Color2(col=green,text=\"Or 3 and 4?\")>> */\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickNumAxes]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetBall",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetBall",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:54.5715583-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickGetBall =\r\nUse this function to get the ball axis change since the last poll.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_JoystickGetBall(SDL_Joystick* joystick,\r\n                        int           ball,\r\n                        int*          dx,\r\n                        int*          dy)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||the SDL_Joystick to query||\r\n||'''ball'''||the ball index to query; ball indices start at index 0||\r\n||'''dx'''||the difference in the x axis position since the last poll||\r\n||'''dy'''||the difference in the y axis position since the last poll||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint delta_x, delta_y;\r\nSDL_Joystick *joy;\r\n.\r\n.\r\n.\r\nSDL_JoystickUpdate();\r\nif(SDL_JoystickGetBall(joy, 0, &delta_x, &delta_y)==-1)\r\n  printf(\"TrackBall Read Error!\\n\");\r\nprintf(\"Trackball Delta- X:%d, Y:%d\\n\", delta_x, delta_y);\r\n}}}\r\n\r\n== Remarks ==\r\nTrackballs can only return relative motion since the last call to [[SDL_JoystickGetBall]](), these motion deltas are placed into '''dx''' and '''dy'''.\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickNumBalls]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetButton",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetButton",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:54.9607809-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickGetButton =\r\nUse this function to get the current state of a button on a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint8 SDL_JoystickGetButton(SDL_Joystick* joystick,\r\n                            int           button)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n||'''button'''||the button index to get the state from; indices start at index 0||\r\n\r\n== Return Value ==\r\nReturns 1 if the specified button is pressed, 0 otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickNumButtons]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetDeviceGUID",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetDeviceGUID",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:55.3145626-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickGetDeviceGUID =\r\nUse this function to get the implementation-dependent GUID for the joystick at a given device index.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''device_index'''||the index of the joystick to query (the N'th joystick on the system||\r\n\r\n\r\n== Return Value ==\r\nReturns the GUID of the selected joystick.  If called on an invalid index, this function returns a zero GUID; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThis function can be called before any joysticks are opened.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetGUID]]\r\n .[[SDL_JoystickGetGUIDString]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetGUID",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetGUID",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:55.7337792-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickGetGUID =\r\nUse this function to get the implementation-dependent GUID for the joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick* joystick)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an open joystick||\r\n\r\n\r\n== Return Value ==\r\nReturns the GUID of the given joystick.  If called on an invalid index, this function returns a zero GUID; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThis function requires an open joystick.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetDeviceGUID]]\r\n .[[SDL_JoystickGetGUIDString]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetGUIDFromString",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetGUIDFromString",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:56.1601646-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n= SDL_JoystickGetGUIDFromString =\r\nUse this function to convert a GUID string into a SDL_JoystickGUID structure.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_JoystickGUID SDL_JoystickGetGUIDFromString(const char* pchGUID)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''pchGUID'''||string containing an ASCII representation of a GUID||\r\n\r\n\r\n== Return Value ==\r\nReturns a SDL_JoystickGUID structure.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nPerforms no error checking.  If this function is given a string containing an invalid GUID, the function will silently succeed, but the GUID generated will not be useful.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetGUIDString]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetGUIDString",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetGUIDString",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:38:56.5367786-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n= SDL_JoystickGetGUIDString =\r\nUse this function to get an ASCII string representation for a given SDL_JoystickGUID.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_JoystickGetGUIDString(SDL_JoystickGUID guid,\r\n                               char*            pszGUID,\r\n                               int              cbGUID)\r\n}}}\r\n\r\n##Fill in the above syntax per the Style Guide, then delete this comment.\r\n\r\n\r\n== Function Parameters ==\r\n||'''guid'''||the SDL_JoystickGUID you wish to convert to string||\r\n||'''pszGUID'''||buffer in which to write the ASCII string||\r\n||'''cbGUID'''||the size of pszGUID||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nYou should supply at least 33 bytes for pszGUID.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetDeviceGUID]]\r\n .[[SDL_JoystickGetGUID]]\r\n .[[SDL_JoystickGetGUIDFromString]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickGetHat",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickGetHat",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:02.8045086-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickGetHat =\r\nUse this function to get the current state of a POV hat on a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint8 SDL_JoystickGetHat(SDL_Joystick* joystick,\r\n                         int           hat)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n||'''hat'''||the hat index to get the state from; hat indices start at index 0||\r\n\r\n\r\n== Return Value ==\r\nReturns one of the following positions:\r\n||SDL_HAT_CENTERED||\r\n||SDL_HAT_UP||\r\n||SDL_HAT_RIGHT||\r\n||SDL_HAT_DOWN||\r\n||SDL_HAT_LEFT||\r\n||SDL_HAT_RIGHTUP||\r\n||SDL_HAT_RIGHTDOWN||\r\n||SDL_HAT_LEFTUP||\r\n||SDL_HAT_LEFTDOWN||\r\n/* <<Color2(col=green,text=\"Should the defines/descriptions for each be included here since the RV is actually a Uint8 or will the user never see those? Should it be a list instead of a table?\")>> */\r\n\r\n/* <<Color2(col=green,text=\"Is this alternative table structure better?\")>> */\r\n||SDL_HAT_LEFTUP||SDL_HAT_UP||SDL_HAT_RIGHTUP||\r\n||SDL_HAT_LEFT||SDL_HAT_CENTERED||SDL_HAT_RIGHT||\r\n||SDL_HAT_LEFTDOWN||SDL_HAT_DOWN||SDL_HAT_RIGHTDOWN||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickNumHats]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickInstanceID",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickInstanceID",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:03.1643806-06:00",
      "RawText": "## page was renamed from SDL_JoystickIndex\r\n#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickInstanceID =\r\nUse this function to get the instance ID of an opened joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n\r\n== Return Value ==\r\nReturns the instance ID of the specified joystick on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickIsHaptic",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickIsHaptic",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:39:03.5421368-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickIsHaptic =\r\nUse this function to check to see if a joystick has haptic features.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_JoystickIsHaptic(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||the SDL_Joystick to test for haptic capabilities||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the joystick is haptic, SDL_FALSE if it isn't, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticOpenFromJoystick]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_JoystickName",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickName",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:03.9144252-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickName =\r\nUse this function to get the implementation dependent name of a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_JoystickName(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||the SDL_Joystick obtained from [[SDL_JoystickOpen]]()||\r\n\r\n== Return Value ==\r\nReturns the name of the selected joystick.  If no name can be found, this function returns NULL; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n\r\n{{{#!highlight cpp\r\n/* Print the names of all attached joysticks */\r\nint num_joy, i;\r\nnum_joy = SDL_NumJoysticks();\r\nprintf(\"%d joysticks found\\n\", num_joy);\r\nfor(i = 0; i < num_joy; i++)\r\n{\r\n  SDL_Joystick *joystick = SDL_JoystickOpen(i);\r\n  printf(\"%s\\n\", SDL_JoystickName(joystick));\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickNameForIndex]]\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickNameForIndex",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickNameForIndex",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:04.2992742-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickNameForIndex =\r\nUse this function to get the implementation dependent name of a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_JoystickNameForIndex(int device_index)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''device_index'''||the index of the joystick to query (the N'th joystick on the system)||\r\n\r\n== Return Value ==\r\nReturns the name of the selected joystick.  If no name can be found, this function returns NULL; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n\r\n{{{#!highlight cpp\r\n/* Print the names of all attached joysticks */\r\nint num_joy, i;\r\nnum_joy = SDL_NumJoysticks();\r\nprintf(\"%d joysticks found\\n\", num_joy);\r\nfor (i = 0; i < num_joy; ++i) {\r\n    printf(\"%s\\n\", SDL_JoystickNameForIndex(i));\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis can be called before any joysticks are opened.\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickName]]\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickNumAxes",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickNumAxes",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:04.6721307-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickNumAxes =\r\nUse this function to get the number of general axis controls on a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_JoystickNumAxes(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n\r\n== Return Value ==\r\nReturns the number of axis controls/number of axes on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n/* <<Color2(col=green,text=\"Is this the number of axes like x y z or the number of pads or sticks that control movement in the 3 axes like a game pad might have two joysticks and a thumb pad?\")>> */\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetAxis]]\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickNumBalls",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickNumBalls",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:10.0799744-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickNumBalls =\r\nUse this function to get the number of trackballs on a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_JoystickNumBalls(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n\r\n== Return Value ==\r\nReturns the number of trackballs on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nJoystick trackballs have only relative motion events associated with them and their state cannot be polled.\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetBall]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickNumButtons",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickNumButtons",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:50.9543544-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickNumButtons =\r\nUse this function to get the number of buttons on a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_JoystickNumButtons(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n\r\n== Return Value ==\r\nReturns the number of buttons on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetButton]]\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickNumHats",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickNumHats",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:51.3310043-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickNumHats =\r\nUse this function to get the number of POV hats on a joystick.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_JoystickNumHats(SDL_Joystick* joystick)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''joystick'''||an SDL_Joystick structure containing joystick information||\r\n\r\n== Return Value ==\r\nReturns the number of POV hats on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickGetHat]]\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickOpen",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickOpen",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:51.7195477-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickOpen =\r\nUse this function to open a joystick for use.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Joystick* SDL_JoystickOpen(int device_index)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''device_index'''||the index of the joystick to query||\r\n\r\n== Return Value ==\r\nReturns a joystick identifier or NULL if an error occurred; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Joystick *joy;\r\n\r\n// Initialize the joystick subsystem\r\nSDL_InitSubSystem(SDL_INIT_JOYSTICK);\r\n\r\n// Check for joystick\r\nif (SDL_NumJoysticks() > 0) {\r\n    // Open joystick\r\n    joy = SDL_JoystickOpen(0);\r\n\r\n    if (joy) {\r\n        printf(\"Opened Joystick 0\\n\");\r\n        printf(\"Name: %s\\n\", SDL_JoystickNameForIndex(0));\r\n        printf(\"Number of Axes: %d\\n\", SDL_JoystickNumAxes(joy));\r\n        printf(\"Number of Buttons: %d\\n\", SDL_JoystickNumButtons(joy));\r\n        printf(\"Number of Balls: %d\\n\", SDL_JoystickNumBalls(joy));\r\n    } else {\r\n        printf(\"Couldn't open Joystick 0\\n\");\r\n    }\r\n\r\n    // Close if opened\r\n    if (SDL_JoystickGetAttached(joy)) {\r\n        SDL_JoystickClose(joy);\r\n    }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe device_index passed as an argument refers to the N'th joystick presently recognized by SDL on the system.  It is '''NOT''' the same as the instance ID used to identify the joystick in future events.  See [[SDL_JoystickInstanceID]]() for more details about instance IDs.\r\n\r\nThe joystick subsystem must be initialized before a joystick can be opened for use.\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickClose]]\r\n .[[SDL_JoystickInstanceID]]\r\n\r\n/* <<Color2(col=green,text=\"There are a number of functions that list this one as a RF based on the old wiki. Do we want them all to be reciprocated here?\")>> */\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_JoystickUpdate",
      "Uri": "https://wiki.libsdl.org/SDL_JoystickUpdate",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:39:52.1147565-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_JoystickUpdate =\r\nUse this function to update the current state of the open joysticks.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_JoystickUpdate(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is called automatically by the event loop if any joystick events are enabled.\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickEventState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_LoadBMP",
      "Uri": "https://wiki.libsdl.org/SDL_LoadBMP",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:39:52.5139604-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LoadBMP =\r\nUse this function to load a surface from a BMP file.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_LoadBMP(const char* file)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''file'''||the file containing a BMP image||\r\n\r\n== Return Value ==\r\n<<Include(SDL_LoadBMP_RW, , , from=\"== Return Value ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Include(SDL_LoadBMP_RW, , , from=\"== Remarks ==\", to=\"== Related Functions ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeSurface]]\r\n .[[SDL_LoadBMP_RW]]\r\n .[[SDL_SaveBMP]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_LoadBMP_RW",
      "Uri": "https://wiki.libsdl.org/SDL_LoadBMP_RW",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:39:57.9286891-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LoadBMP_RW =\r\nUse this function to load a BMP image from a seekable SDL data stream (memory or file).\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_Surface* SDL_LoadBMP_RW(SDL_RWops* src,\r\n                            int        freesrc)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the data stream for the surface||\r\n||'''freesrc'''||non-zero to close the stream after being read||\r\n\r\n== Return Value ==\r\nReturns a pointer to a new [[SDL_Surface]] structure or NULL if there was an error; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe new surface should be freed with [[SDL_FreeSurface]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeSurface]]\r\n .[[SDL_LoadBMP]]\r\n .[[SDL_SaveBMP_RW]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_LoadDollarTemplates",
      "Uri": "https://wiki.libsdl.org/SDL_LoadDollarTemplates",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:39:58.3268374-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_LoadDollarTemplates =\r\nUse this function to load Dollar Gesture templates from a file.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_LoadDollarTemplates(SDL_TouchID touchId,\r\n                            SDL_RWops*  src)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''touchId'''||a touch id||\r\n||'''src'''||a [[SDL_RWops]] to load from||\r\n\r\n\r\n== Return Value ==\r\nReturns the number of loaded templates on success or a negative error code (or 0) on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_SaveAllDollarTemplates]]\r\n .[[SDL_SaveDollarTemplate]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_LoadFunction",
      "Uri": "https://wiki.libsdl.org/SDL_LoadFunction",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:39:58.7309611-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n\r\n= SDL_LoadFunction =\r\nUse this function to look up the address of the named function in the shared object and return it.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_LoadFunction(void*       handle,\r\n                       const char* name)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''handle''' ||a valid shared object handle returned by [[SDL_LoadObject]]()||\r\n||'''name''' ||the name of the function to look up||\r\n\r\n== Return Value ==\r\nReturns a pointer to the function or NULL if there was an error; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\n/* Variable declaration */\r\nvoid* myHandle = NULL;\r\nchar* myFunctionName = \"myFancyFunction\";\r\nvoid (*myFancyFunction)(int anInt);\r\n\r\n/* Dynamically load mylib.so */\r\nmyHandle = SDL_LoadObject(\"mylib.so\");\r\n\r\n/* Load the exported function from mylib.so\r\n * The exported function has the following prototype\r\n * void myFancyFunction(int anInt);\r\n */\r\nmyFancyFunction = (void (*)(int))SDL_LoadFunction(myHandle, myFunctionName);\r\n\r\n/* Call myFancyFunction with a random integer */\r\nif (myFancyFunction != NULL) {\r\n    myFancyFunction(15);\r\n} else {\r\n    /* Error handling here */\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function pointer is no longer valid after calling [[SDL_UnloadObject]]().\r\n\r\nThis function can only look up C function names. Other languages may have name mangling and intrinsic language support that varies from compiler to compiler.\r\n\r\nMake sure you declare your function pointers with the same calling convention as the actual library function. Your code will crash mysteriously if you do not do this.\r\n\r\n\r\n== Related Functions ==\r\n . [[SDL_LoadObject]]\r\n . [[SDL_UnloadObject]]\r\n\r\n----\r\n[[CategoryAPI]], CategorySharedObject\r\n"
    },
    {
      "Name": "SDL_LoadObject",
      "Uri": "https://wiki.libsdl.org/SDL_LoadObject",
      "Categories": [
        "CategoryAPI",
        "CategorySharedObject"
      ],
      "LastUpdate": "2021-01-16T14:39:59.1008223-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LoadObject =\r\nUse this function to dynamically load a shared object and return a pointer to the object handle.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_LoadObject(const char* sofile)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''sofile'''||a system dependent name of the object file||\r\n\r\n== Return Value ==\r\nReturns a pointer to the object handle or NULL if there was an error; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\n/* Dynamically load mylib.so */\r\nSDL_LoadObject(\"mylib.so\");\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadFunction]]\r\n .[[SDL_UnloadObject]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySharedObject]]\r\n"
    },
    {
      "Name": "SDL_LoadWAV",
      "Uri": "https://wiki.libsdl.org/SDL_LoadWAV",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:39:59.4841396-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LoadWAV =\r\nUse this function to load a WAVE from a file.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_AudioSpec* SDL_LoadWAV(const char*    file,\r\n                           SDL_AudioSpec* spec,\r\n                           Uint8**        audio_buf,\r\n                           Uint32*        audio_len)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''file''' ||the name of the file to load ||\r\n||'''spec''' ||an [[SDL_AudioSpec]] structure that will be filled in with the wave file's format details ||\r\n||'''audio_buf''' ||the audio buffer ||\r\n||'''audio_len''' ||the length of the audio buffer in bytes ||\r\n\r\n== Return Value ==\r\n<<Include(SDL_LoadWAV_RW, , , from=\"== Return Value ==\", to=\"== Code Examples\")>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_AudioSpec wav_spec;\r\nUint32 wav_length;\r\nUint8 *wav_buffer;\r\n\r\n/* Load the WAV */\r\nif (SDL_LoadWAV(\"test.wav\", &wav_spec, &wav_buffer, &wav_length) == NULL) {\r\n    fprintf(stderr, \"Could not open test.wav: %s\\n\", SDL_GetError());\r\n} else {\r\n    /* Do stuff with the WAV data, and then... */\r\n    SDL_FreeWAV(wav_buffer);\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nSDL_LoadWAV is a convenience macro that calls [[SDL_LoadWAV_RW]]().\r\n\r\nThis macro exists so you can pass a filename to [[SDL_LoadWAV_RW]]() without having to deal with the [[CategoryIO|RWops]] API.\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeWAV]]\r\n .[[SDL_LoadWAV_RW]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryAudio\r\n"
    },
    {
      "Name": "SDL_LoadWAV_RW",
      "Uri": "https://wiki.libsdl.org/SDL_LoadWAV_RW",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:40:00.6209482-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LoadWAV_RW =\r\nUse this function to load a WAVE from the data source, automatically freeing that source if '''freesrc''' is non-zero.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops*     src,\r\n                              int            freesrc,\r\n                              SDL_AudioSpec* spec,\r\n                              Uint8**        audio_buf,\r\n                              Uint32*        audio_len)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the data source for the wave file; see [[CategoryIO|the RWOPS interface]]() for more info||\r\n||'''freesrc'''||non-zero to automatically free the data source||\r\n||'''spec'''||an [[SDL_AudioSpec]] structure that will be filled in with the wave file's format details||\r\n||'''audio_buf'''||the audio buffer||\r\n||'''audio_len'''||the length of the audio buffer in bytes||\r\n\r\n== Return Value ==\r\nThis function, if successfully called, returns a pointer to an [[SDL_AudioSpec]] structure filled with the audio data format of the wave source data. '''audio_buf''' is filled with a pointer to an allocated buffer containing the audio data, and '''audio_len''' is filled with the length of that audio buffer in bytes.\r\n\r\nThis function returns NULL if the wave file cannot be opened, uses an unknown data format, or is corrupt; call [[SDL_GetError]]() for more information.\r\n\r\nWhen the application is done with the data returned in '''audio_buf''', it should call [[SDL_FreeWAV]]() to dispose of it.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_RWops *myRWops;\r\nSDL_AudioSpec wav_spec;\r\nUint32 wav_length;\r\nUint8 *wav_buffer;\r\n\r\n/* Load the WAV */\r\nif (SDL_LoadWAV_RW(myRWops, 1, &wav_spec, &wav_buffer, &wav_length) == NULL) {\r\n    fprintf(stderr, \"Could not open test.wav: %s\\n\", SDL_GetError());\r\n} else {\r\n    /* Do stuff with the WAV data, and then... */\r\n    SDL_FreeWAV(wav_buffer);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nCurrently raw and MS-ADPCM WAVE files are supported.\r\n\r\nYou need to free the audio buffer with [[SDL_FreeWAV]]() when you are done with it.\r\n\r\n== Related Functions ==\r\n .[[SDL_FreeWAV]]\r\n .[[SDL_LoadWAV]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_LockAudio",
      "Uri": "https://wiki.libsdl.org/SDL_LockAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:40:06.3525212-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LockAudio =\r\nThis function is a legacy means of locking the audio device. New programs might want to use [[SDL_LockAudioDevice]]() instead.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LockAudio(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nvoid MyAudioCallback(void *userdata, Uint8* stream, int len)\r\n{\r\n    printf(\"The audio callback is running!\\n\");\r\n    SDL_memset(stream, 0, len);  // just silence.\r\n    printf(\"The audio callback is done!\\n\");\r\n}\r\n\r\n// don't lock for 2 seconds at a time in real life, please.\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\nSDL_LockAudio();\r\nprintf(\"The audio callback can't be running right now!\\n\");\r\nSDL_Delay(2000);  // callback doesn't run for 2 seconds.\r\nprintf(\"Ok, unlocking!\\n\");\r\nSDL_UnlockAudio();\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is equivalent to calling\r\n\r\n{{{#!highlight cpp\r\nSDL_LockAudioDevice(1);\r\n}}}\r\n\r\nand is only useful if you used the legacy [[SDL_OpenAudio]]() function.\r\n\r\n== Related Functions ==\r\n .[[SDL_LockAudioDevice]]\r\n .[[SDL_UnlockAudio]]\r\n .[[SDL_UnlockAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_LockAudioDevice",
      "Uri": "https://wiki.libsdl.org/SDL_LockAudioDevice",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:40:06.7631026-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LockAudioDevice =\r\nUse this function to lock out the audio callback function for a specified device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LockAudioDevice(SDL_AudioDeviceID dev)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dev'''||the ID of the device to be locked||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nvoid MyAudioCallback(void *userdata, Uint8* stream, int len)\r\n{\r\n    printf(\"The audio callback is running!\\n\");\r\n    SDL_memset(stream, 0, len);  // just silence.\r\n    printf(\"The audio callback is done!\\n\");\r\n}\r\n\r\n// don't lock for 2 seconds at a time in real life, please.\r\nextern SDL_AudioDeviceID devid;\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\nSDL_LockAudioDevice(devid);\r\nprintf(\"The audio callback can't be running right now!\\n\");\r\nSDL_Delay(2000);  // callback doesn't run for 2 seconds.\r\nprintf(\"Ok, unlocking!\\n\");\r\nSDL_UnlockAudioDevice(devid);\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\n}}}\r\n\r\n== Remarks ==\r\nThe lock manipulated by these functions protects the audio callback function specified in [[SDL_OpenAudioDevice]]().  During a [[SDL_LockAudioDevice]]()/[[SDL_UnlockAudioDevice]]() pair, you can be guaranteed that the callback function for that device is not running, even if the device is not paused. While a device is locked, any other unpaused, unlocked devices may still run their callbacks.\r\n\r\nCalling this function from inside your audio callback is unnecessary. SDL obtains this lock before calling your function, and releases it when the function returns.\r\n\r\nYou should not hold the lock longer than absolutely necessary. If you hold it too long, you'll experience dropouts in your audio playback. Ideally, your application locks the device, sets a few variables and unlocks again. Do not do heavy work while holding the lock for a device.\r\n\r\nIt is safe to lock the audio device multiple times, as long as you unlock it an equivalent number of times. The callback will not run until the device has been unlocked completely in this way. If your application fails to unlock the device appropriately, your callback will never run, you might hear repeating bursts of audio, and [[SDL_CloseAudioDevice]]() will probably deadlock.\r\n\r\nInternally, the audio device lock is a mutex; if you lock from two threads at once, not only will you block the audio callback, you'll block the other thread.\r\n\r\n== Related Functions ==\r\n .[[SDL_UnlockAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_LockMutex",
      "Uri": "https://wiki.libsdl.org/SDL_LockMutex",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:40:07.1724253-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LockMutex =\r\nUse this function to lock a mutex created with [[SDL_CreateMutex]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_LockMutex(SDL_mutex* mutex)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''mutex''' ||the mutex to lock||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateMutex, , , from=\"## Begin Mutex Example\", to=\"## End Mutex Example\")>>\r\n\r\n== Remarks ==\r\nCalls to this function will not return while the mutex is locked by another thread. See [[SDL_TryLockMutex]]() to attempt to lock the mutex without blocking.\r\n\r\nSDL mutexes are recursive.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateMutex]]\r\n .[[SDL_DestroyMutex]]\r\n .[[SDL_TryLockMutex]]\r\n .[[SDL_UnlockMutex]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_LockSurface",
      "Uri": "https://wiki.libsdl.org/SDL_LockSurface",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:40:07.5653144-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LockSurface =\r\nUse this function to set up a surface for directly accessing the pixels.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_LockSurface(SDL_Surface* surface)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to be locked||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* Make the pixels pointer valid in the surface */\r\n\r\nSDL_LockSurface(surface);\r\n\r\n/* Surface is locked */\r\n/* Direct pixel access on surface here */\r\n\r\nSDL_UnlockSurface(surface);\r\n\r\n/* Surface is now unlocked */\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nBetween calls to [[SDL_LockSurface]]() / [[SDL_UnlockSurface]](), you can write to and read from `surface->pixels`, using the pixel format stored in `surface->format`. Once you are done accessing the surface, you should use [[SDL_UnlockSurface]]() to release it.\r\n\r\nNot all surfaces require locking. If [[SDL_MUSTLOCK]](surface) evaluates to 0, then you can read and write to the surface at any time, and the pixel format of the surface will not change.\r\n\r\n== Related Functions ==\r\n .[[SDL_MUSTLOCK]]\r\n .[[SDL_UnlockSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_LockTexture",
      "Uri": "https://wiki.libsdl.org/SDL_LockTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:40:07.9615579-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\"style=\"color:#FF0000;      ;text-align:center\">DRAFT ||\r\n\r\n\r\n= SDL_LockTexture =\r\nUse this function to lock a portion of the texture for '''write-only''' pixel access.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_LockTexture(SDL_Texture*    texture,\r\n                    const SDL_Rect* rect,\r\n                    void**          pixels,\r\n                    int*            pitch)\r\n}}}\r\n== Function Parameters ==\r\n||'''texture''' ||the texture to lock for access, which was created with SDL_TEXTUREACCESS_STREAMING ||\r\n||'''rect''' ||an [[SDL_Rect]] structure representing the area to lock for access; NULL to lock the entire texture ||\r\n||'''pixels''' ||this is filled in with a pointer to the locked pixels, appropriately offset by the locked area ||\r\n||'''pitch''' ||this is filled in with the pitch of the locked pixels; the pitch is the length of one row in bytes ||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code if the texture is not valid or was not created with SDL_TEXTUREACCESS_STREAMING; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n== Remarks ==\r\nAs an optimization, the pixels made available for editing don't necessarily contain the old texture data. This is a write-only operation, and if you need to keep a copy of the texture data you should do that at the application level.\r\n\r\nYou must use [[SDL_UnlockTexture]]() to unlock the pixels and apply any changes.\r\n\r\n== Related Functions ==\r\n . [[SDL_UnlockTexture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_Log",
      "Uri": "https://wiki.libsdl.org/SDL_Log",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:40:08.328492-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_Log =\r\nUse this function to log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_Log(const char* fmt,\r\n             ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogVerbose]]\r\n .[[SDL_LogWarn]]\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogCritical",
      "Uri": "https://wiki.libsdl.org/SDL_LogCritical",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:40:13.7685585-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogCritical =\r\nUse this function to log a message with SDL_LOG_PRIORITY_CRITICAL.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogCritical(int         category,\r\n                     const char* fmt,\r\n                     ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogVerbose]]\r\n .[[SDL_LogWarn]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogDebug",
      "Uri": "https://wiki.libsdl.org/SDL_LogDebug",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:40:55.0212103-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogDebug =\r\nUse this function to log a message with SDL_LOG_PRIORITY_DEBUG.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogDebug(int         category, \r\n                  const char* fmt,\r\n                  ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogVerbose]]\r\n .[[SDL_LogWarn]]\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogError",
      "Uri": "https://wiki.libsdl.org/SDL_LogError",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:40:55.4149686-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogError =\r\nUse this function to log a message with SDL_LOG_PRIORITY_ERROR.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogError(int         category,\r\n                  const char* fmt,\r\n                  ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogVerbose]]\r\n .[[SDL_LogWarn]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogGetOutputFunction",
      "Uri": "https://wiki.libsdl.org/SDL_LogGetOutputFunction",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:40:55.8112753-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogGetOutputFunction =\r\nUse this function to get the current log output function.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogGetOutputFunction(SDL_LogOutputFunction* callback,\r\n                              void**                 userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''callback'''||a pointer filled in with the current log callback; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||a pointer filled in with the pointer that is passed to '''callback'''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe function prototype for '''callback''' is:\r\n {{{#!highlight cpp\r\nvoid SDL_LogOutputFunction(void*           userdata,\r\n                           int             category,\r\n                           SDL_LogPriority priority,\r\n                           const char*     message)\r\n}}}\r\n . where its parameters are:\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_LogSetOutputFunction]]()||\r\n ||`category`||the category of the message; see [[#category|Remarks]] for details||\r\n ||`priority`||the priority of the message; see [[#priority|Remarks]] for details||\r\n ||`message`||the message being output||\r\n\r\n <<Anchor(category)>>\r\n The `category` will be one of:\r\n <<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n <<Anchor(priority)>>\r\n The `priority` will be one of:\r\n <<Include(SDL_LogPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_LogSetOutputFunction]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogGetPriority",
      "Uri": "https://wiki.libsdl.org/SDL_LogGetPriority",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:40:56.2861314-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogGetPriority =\r\nUse this function to get the priority of a particular log category.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_LogPriority SDL_LogGetPriority(int category)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category to query; see [[#category|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns the [[SDL_LogPriority]] for the requested category; see [[#priority|Remarks]] for details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n<<Anchor(priority)>>\r\nThe returned priority will be one of:\r\n<<Include(SDL_LogPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_LogSetPriority]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogInfo",
      "Uri": "https://wiki.libsdl.org/SDL_LogInfo",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:40:57.0296429-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogInfo =\r\nUse this function to log a message with SDL_LOG_PRIORITY_INFO.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogInfo(int         category,\r\n                 const char* fmt,\r\n                 ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogVerbose]]\r\n .[[SDL_LogWarn]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogMessage",
      "Uri": "https://wiki.libsdl.org/SDL_LogMessage",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:02.7555807-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogMessage =\r\nUse this function to log a message with the specified category and priority.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogMessage(int             category,\r\n                    SDL_LogPriority priority,\r\n                    const char*     fmt,\r\n                    ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''priority'''||the priority of the message; see [[#priority|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n<<Anchor(priority)>>\r\nThe '''priority''' can be one of:\r\n<<Include(SDL_LogPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogVerbose]]\r\n .[[SDL_LogWarn]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogMessageV",
      "Uri": "https://wiki.libsdl.org/SDL_LogMessageV",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:04.3224986-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogMessageV =\r\nUse this function to log a message with the specified category and priority.  This version of [[SDL_LogMessage]]() uses a stdarg variadic argument list.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogMessageV(int             category,\r\n                     SDL_LogPriority priority,\r\n                     const char*     fmt,\r\n                     va_list         ap)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''priority'''||the priority of the message; see [[#priority|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''ap'''||a variable argument list||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n<<Anchor(priority)>>\r\nThe '''priority''' can be one of:\r\n<<Include(SDL_LogPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogVerbose]]\r\n .[[SDL_LogWarn]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogResetPriorities",
      "Uri": "https://wiki.libsdl.org/SDL_LogResetPriorities",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:05.2288776-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogResetPriorities =\r\nUse this function to reset all priorities to default.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogResetPriorities(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is called in [[SDL_Quit]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_LogSetAllPriority]]\r\n .[[SDL_LogSetPriority]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogSetAllPriority",
      "Uri": "https://wiki.libsdl.org/SDL_LogSetAllPriority",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:06.0326264-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogSetAllPriority =\r\nUse this function to set the priority of all log categories.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogSetAllPriority(SDL_LogPriority priority)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''priority'''||the [[SDL_LogPriority]] to assign; see [[#priority|Remarks]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(priority)>>\r\nThe '''priority''' can be one of:\r\n<<Include(SDL_LogPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_LogSetPriority]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogSetOutputFunction",
      "Uri": "https://wiki.libsdl.org/SDL_LogSetOutputFunction",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:06.8195392-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogSetOutputFunction =\r\nUse this function to replace the default log output function with one of your own.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogSetOutputFunction(SDL_LogOutputFunction callback,\r\n                              void*                 userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''callback'''||the function to call instead of the default; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||a pointer that is passed to '''callback'''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe function prototype for '''callback''' is:\r\n {{{#!highlight cpp\r\nvoid SDL_LogOutputFunction(void*           userdata,\r\n                           int             category,\r\n                           SDL_LogPriority priority,\r\n                           const char*     message)\r\n}}}\r\n . where its parameters are:\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_LogSetOutputFunction]]()||\r\n ||`category`||the category of the message; see [[#category|Remarks]] for details||\r\n ||`priority`||the priority of the message; see [[#priority|Remarks]] for details||\r\n ||`message`||the message being output||\r\n\r\n <<Anchor(category)>>\r\n The `category` will be one of:\r\n <<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n <<Anchor(priority)>>\r\n The `priority` will be one of:\r\n <<Include(SDL_LogPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_LogGetOutputFunction]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogSetPriority",
      "Uri": "https://wiki.libsdl.org/SDL_LogSetPriority",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:07.4128638-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogSetPriority =\r\nUse this function to set the priority of a particular log category.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogSetPriority(int             category,\r\n                        SDL_LogPriority priority)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category to assign a priority to; see [[#category|Remarks]] for details||\r\n||'''priority'''||the [[SDL_LogPriority]] to assign; see [[#priority|Remarks]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n<<Anchor(priority)>>\r\nThe '''priority''' can be one of:\r\n<<Include(SDL_LogPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_LogGetPriority]]\r\n .[[SDL_LogSetAllPriority]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogVerbose",
      "Uri": "https://wiki.libsdl.org/SDL_LogVerbose",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:13.2116937-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogVerbose =\r\nUse this function to log a message with SDL_LOG_PRIORITY_VERBOSE.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogVerbose(int         category, \r\n                    const char* fmt,\r\n                    ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogWarn]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LogWarn",
      "Uri": "https://wiki.libsdl.org/SDL_LogWarn",
      "Categories": [
        "CategoryAPI",
        "CategoryLog"
      ],
      "LastUpdate": "2021-01-16T14:41:13.7288861-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LogWarn =\r\nUse this function to log a message with SDL_LOG_PRIORITY_WARN.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_LogWarn(int         category,\r\n                 const char* fmt,\r\n                 ...)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''category'''||the category of the message; see [[#category|Remarks]] for details||\r\n||'''fmt'''||a printf() style message format string||\r\n||'''...'''||additional parameters matching % tokens in the '''fmt''' string, if any||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(category)>>\r\nThe '''category''' can be one of:\r\n<<Include(SDL_LOG_CATEGORY, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_Log]]\r\n .[[SDL_LogCritical]]\r\n .[[SDL_LogDebug]]\r\n .[[SDL_LogError]]\r\n .[[SDL_LogInfo]]\r\n .[[SDL_LogMessage]]\r\n .[[SDL_LogMessageV]]\r\n .[[SDL_LogVerbose]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryLog]]\r\n"
    },
    {
      "Name": "SDL_LowerBlit",
      "Uri": "https://wiki.libsdl.org/SDL_LowerBlit",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:41:14.1393644-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_LowerBlit =\r\nUse this function to perform low-level surface blitting only.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_LowerBlit(SDL_Surface* src,\r\n                  SDL_Rect*    srcrect,\r\n                  SDL_Surface* dst,\r\n                  SDL_Rect*    dstrect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the [[SDL_Surface]] structure to be copied from||\r\n||'''srcrect'''||the [[SDL_Rect]] structure representing the rectangle to be copied, or NULL to copy the entire surface||\r\n||'''dst'''||the [[SDL_Surface]] structure that is the blit target||\r\n||'''dstrect'''||the [[SDL_Rect]] structure representing the rectangle that is copied into||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is a semi-private blit function and it performs low-level surface blitting, assuming the input rectangles have already been clipped.\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]]\r\n .[[SDL_UpperBlit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_LowerBlitScaled",
      "Uri": "https://wiki.libsdl.org/SDL_LowerBlitScaled",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:41:14.528069-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_LowerBlitScaled =\r\nUse this function to perform low-level surface scaled blitting only.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_LowerBlitScaled(SDL_Surface* src,\r\n                        SDL_Rect*    srcrect,\r\n                        SDL_Surface* dst,\r\n                        SDL_Rect*    dstrect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the [[SDL_Surface]] structure to be copied from||\r\n||'''srcrect'''||the [[SDL_Rect]] structure representing the rectangle to be copied||\r\n||'''dst'''||the [[SDL_Surface]] structure that is the blit target||\r\n||'''dstrect'''||the [[SDL_Rect]] structure representing the rectangle that is copied into||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is a semi-private function and it performs low-level surface blitting, assuming the input rectangles have already been clipped.\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitScaled]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_MUSTLOCK",
      "Uri": "https://wiki.libsdl.org/SDL_MUSTLOCK",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:41:14.9161535-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MUSTLOCK =\r\nUse this function to determine whether a surface must be locked for access.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_MUSTLOCK(SDL_Surface* surface)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to query||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the surface must be locked for access, SDL_FALSE if not.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_LockSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_MapRGB",
      "Uri": "https://wiki.libsdl.org/SDL_MapRGB",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:41:15.3854811-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MapRGB =\r\nUse this function to map an RGB triple to an opaque pixel value for a given pixel format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_MapRGB(const SDL_PixelFormat* format,\r\n                  Uint8                  r, \r\n                  Uint8                  g, \r\n                  Uint8                  b)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''format'''||an [[SDL_PixelFormat]] structure describing the format of the pixel||\r\n||'''r'''||the red component of the pixel in the range 0-255||\r\n||'''g'''||the green component of the pixel in the range 0-255||\r\n||'''b'''||the blue component of the pixel in the range 0-255||\r\n\r\n== Return Value ==\r\nReturns a pixel value; see [[#Remarks|Remarks]] for details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function maps the RGB color value to the specified pixel format and returns the pixel value best approximating the given RGB color value for the given pixel format.\r\n\r\nIf the format has a palette (8-bit) the index of the closest matching color in the palette will be returned.\r\n\r\nIf the specified pixel format has an alpha component it will be returned as all 1 bits (fully opaque).\r\n\r\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused upper bits of the return value can safely be ignored (e.g., with a 16-bpp format the return value can be assigned to a Uint16, and similarly a Uint8 for an 8-bpp format).\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRGB]]\r\n .[[SDL_GetRGBA]]\r\n .[[SDL_MapRGBA]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_MapRGBA",
      "Uri": "https://wiki.libsdl.org/SDL_MapRGBA",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:42:01.9604915-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MapRGBA =\r\nUse this function to map an RGBA quadruple to a pixel value for a given pixel format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_MapRGBA(const SDL_PixelFormat* format,\r\n                   Uint8                  r, \r\n                   Uint8                  g, \r\n                   Uint8                  b,\r\n                   Uint8                  a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''format'''||an [[SDL_PixelFormat]] structure describing the format of the pixel||\r\n||'''r'''||the red component of the pixel in the range 0-255||\r\n||'''g'''||the green component of the pixel in the range 0-255||\r\n||'''b'''||the blue component of the pixel in the range 0-255||\r\n||'''a'''||the alpha component of the pixel in the range 0-255||\r\n\r\n== Return Value ==\r\nReturns a pixel value; see [[#Remarks|Remarks]] for details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function maps the RGBA color value to the specified pixel format and returns the pixel value best approximating the given RGBA color value for the given pixel format.\r\n\r\nIf the specified pixel format has no alpha component the alpha value will be ignored (as it will be in formats with a palette).\r\n\r\nIf the format has a palette (8-bit) the index of the closest matching color in the palette will be returned.\r\n\r\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused upper bits of the return value can safely be ignored (e.g., with a 16-bpp format the return value can be assigned to a Uint16, and similarly a Uint8 for an 8-bpp format). \r\n\r\n== Related Functions ==\r\n .[[SDL_GetRGB]]\r\n .[[SDL_GetRGBA]]\r\n .[[SDL_MapRGB]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_MasksToPixelFormatEnum",
      "Uri": "https://wiki.libsdl.org/SDL_MasksToPixelFormatEnum",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:42:03.4063932-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MasksToPixelFormatEnum =\r\nUse this function to convert a bpp value and RGBA masks to an enumerated pixel format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_MasksToPixelFormatEnum(int    bpp,\r\n                                  Uint32 Rmask,\r\n                                  Uint32 Gmask,\r\n                                  Uint32 Bmask,\r\n                                  Uint32 Amask)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''bpp'''||a bits per pixel value; usually 15, 16, or 32||\r\n||'''Rmask'''||the red mask for the format||\r\n||'''Gmask'''||the green mask for the format||\r\n||'''Bmask'''||the blue mask for the format||\r\n||'''Amask'''||the alpha mask for the format||\r\n\r\n== Return Value ==\r\nReturns one of the following [[SDL_PixelFormatEnum]] values:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_PixelFormatEnumToMasks]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_MaximizeWindow",
      "Uri": "https://wiki.libsdl.org/SDL_MaximizeWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:42:05.4798552-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MaximizeWindow =\r\nUse this function to make a window as large as possible.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_MaximizeWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to maximize||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_MinimizeWindow]]\r\n .[[SDL_RestoreWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_MinimizeWindow",
      "Uri": "https://wiki.libsdl.org/SDL_MinimizeWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:42:06.1030032-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MinimizeWindow =\r\nUse this function to minimize a window to an iconic representation.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_MinimizeWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to minimize||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_MaximizeWindow]]\r\n .[[SDL_RestoreWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_MixAudio",
      "Uri": "https://wiki.libsdl.org/SDL_MixAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:42:06.5298535-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MixAudio =\r\nThis function is a legacy means of mixing audio. New programs might want to use [[SDL_MixAudioFormat]]() instead.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_MixAudio(Uint8*       dst,\r\n                  const Uint8* src,\r\n                  Uint32       len,\r\n                  int          volume)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the destination for the mixed audio||\r\n||'''src'''||the source audio buffer to be mixed||\r\n||'''len'''||the length of the audio buffer in bytes||\r\n||'''volume'''||ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME for full audio volume||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nvoid MyAudioCallback(void *udata, Uint8 *stream, int len)\r\n{\r\n    extern const Uint8 *mixData;\r\n    SDL_memset(stream, 0, len);  // make sure this is silence.\r\n    // mix our audio against the silence, at 50% volume.\r\n    SDL_MixAudio(stream, mixData, len, SDL_MIX_MAXVOLUME / 2);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThis function is equivalent to calling\r\n\r\n{{{#!highlight cpp\r\nSDL_MixAudioFormat(dst, src, format, len, volume);\r\n}}}\r\n\r\nwhere '''format''' is the obtained format of the audio device from the legacy [[SDL_OpenAudio]]() function.\r\n\r\n== Related Functions ==\r\n .[[SDL_MixAudioFormat]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_MixAudioFormat",
      "Uri": "https://wiki.libsdl.org/SDL_MixAudioFormat",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:42:06.9781588-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_MixAudioFormat =\r\nUse this function to mix audio data in a specified format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_MixAudioFormat(Uint8*          dst,\r\n                        const Uint8*    src,\r\n                        SDL_AudioFormat format,\r\n                        Uint32          len,\r\n                        int             volume)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the destination for the mixed audio||\r\n||'''src'''||the source audio buffer to be mixed||\r\n||'''format'''||the [[SDL_AudioFormat]] structure representing the desired audio format||\r\n||'''len'''||the length of the audio buffer in bytes||\r\n||'''volume'''||ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME for full audio volume||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\nvoid MyAudioCallback(void *udata, Uint8 *stream, int len)\r\n{\r\n    extern SDL_AudioFormat deviceFormat;\r\n    extern const Uint8 *mixData;\r\n    SDL_memset(stream, 0, len);  // make sure this is silence.\r\n    // mix our audio against the silence, at 50% volume.\r\n    SDL_MixAudioFormat(stream, mixData, deviceFormat, len, SDL_MIX_MAXVOLUME / 2);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis takes an audio buffer '''src''' of '''len''' bytes of '''format''' data and mixes it into '''dst''', performing addition, volume adjustment, and overflow clipping. The buffer pointed to by '''dst''' must also be '''len''' bytes of '''format''' data.\r\n\r\nThis is provided for convenience -- you can mix your own audio data.\r\n\r\nDo not use this function for mixing together more than two streams of sample data. The output from repeated application of this function may be distorted by clipping, because there is no accumulator with greater range than the input (not to mention this being an inefficient way of doing it). Use mixing functions from [[http://www.libsdl.org/projects/SDL_mixer/|SDL_mixer]], [[http://www.openal.org/|OpenAL]], or write your own mixer instead.\r\n\r\nIt is a common misconception that this function is required to write audio data to an output stream in an audio callback.  While you can do that, [[SDL_MixAudioFormat]]() is really only needed when you're mixing a single audio stream with a volume adjustment.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_MostSignificantBitIndex32",
      "Uri": "https://wiki.libsdl.org/SDL_MostSignificantBitIndex32",
      "Categories": [
        "CategoryAPI",
        "CategoryBits"
      ],
      "LastUpdate": "2021-01-16T14:42:14.4742639-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_MostSignificantBitIndex32 =\r\nUse this function to get the index of the most significant (set) bit in a\r\n32-bit number. This is also the same as the base 2 logarithm of the number.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_MostSignificantBitIndex32(Uint32 x)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''x'''||the number to find the MSB of||\r\n\r\n\r\n== Return Value ==\r\nReturns the index of the most significant bit of x, or -1 if x is 0.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL_bits.h\"\r\n\r\nif (bitmask) {\r\n    int index = SDL_MostSignificantBitIndex32(bitmask);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryBits]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_MouseIsHaptic",
      "Uri": "https://wiki.libsdl.org/SDL_MouseIsHaptic",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:42:14.8341617-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_MouseIsHaptic =\r\nUse this function to get /* determine/find/query */ whether or not the current mouse has haptic capabilities.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_MouseIsHaptic(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the mouse is haptic or SDL_FALSE if it isn't; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticOpenFromMouse]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_NumHaptics",
      "Uri": "https://wiki.libsdl.org/SDL_NumHaptics",
      "Categories": [
        "CategoryAPI",
        "CategoryForceFeedback"
      ],
      "LastUpdate": "2021-01-16T14:42:15.2291457-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_NumHaptics =\r\nUse this function to count the number of haptic devices attached to the system.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_NumHaptics(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the number of haptic devices detected on the system or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_HapticName]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryForceFeedback]]\r\n"
    },
    {
      "Name": "SDL_NumJoysticks",
      "Uri": "https://wiki.libsdl.org/SDL_NumJoysticks",
      "Categories": [
        "CategoryAPI",
        "CategoryJoystick"
      ],
      "LastUpdate": "2021-01-16T14:42:16.1088729-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_NumJoysticks =\r\nUse this function to count the number of joysticks attached to the system.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_NumJoysticks(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns the number of attached joysticks on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_JoystickName]]\r\n .[[SDL_JoystickOpen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryJoystick]]\r\n"
    },
    {
      "Name": "SDL_OpenAudio",
      "Uri": "https://wiki.libsdl.org/SDL_OpenAudio",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:42:16.5366481-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_OpenAudio =\r\nThis function is a legacy means of opening the audio device. New programs might want to use [[SDL_OpenAudioDevice]]() instead.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_OpenAudio(SDL_AudioSpec* desired,\r\n                  SDL_AudioSpec* obtained)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''desired''' ||an [[SDL_AudioSpec]] structure representing the desired output format||\r\n||'''obtained''' ||an [[SDL_AudioSpec]] structure filled in with the actual parameters, or NULL||\r\n\r\n== Return Value ==\r\n\r\nThis function opens the audio device with the desired parameters, and returns 0 if successful, placing the actual hardware parameters in the structure pointed to by '''obtained'''.\r\n\r\nIf '''obtained''' is NULL, the audio data passed to the callback function will be guaranteed to be in the requested format, and will be automatically converted to the actual hardware audio format if necessary. If '''obtained''' is NULL, '''desired''' will have fields modified.\r\n\r\nThis function returns a negative error code on failure to open the audio device or failure to set up the audio thread; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_AudioSpec want, have;\r\n\r\nSDL_memset(&want, 0, sizeof(want)); /* or SDL_zero(want) */\r\nwant.freq = 48000;\r\nwant.format = AUDIO_F32;\r\nwant.channels = 2;\r\nwant.samples = 4096;\r\nwant.callback = MyAudioCallback; /* you wrote this function elsewhere -- see SDL_AudioSpec for details */\r\n\r\nif (SDL_OpenAudio(&want, &have) < 0) {\r\n    SDL_Log(\"Failed to open audio: %s\", SDL_GetError());\r\n} else {\r\n    if (have.format != want.format) {\r\n        SDL_Log(\"We didn't get Float32 audio format.\");\r\n    }\r\n    SDL_PauseAudio(0); /* start audio playing. */\r\n    SDL_Delay(5000); /* let the audio callback play some sound for 5 seconds. */\r\n    SDL_CloseAudio();\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThis function remains for compatibility with SDL 1.2, but also because it's slightly easier to use than the new functions in SDL 2.0. The new, more powerful, and preferred way to do this is [[SDL_OpenAudioDevice]]().\r\n\r\nThis function is roughly equivalent to:\r\n{{{#!highlight cpp\r\nSDL_OpenAudioDevice(NULL, 0, desired, obtained, SDL_AUDIO_ALLOW_ANY_CHANGE);\r\n}}}\r\n\r\nWith two notable exceptions:\r\n * If '''obtained''' is NULL, we use '''desired''' (and allow no changes), which means desired will be modified to have the correct values for silence, etc, and SDL will convert any differences between your app's specific request and the hardware behind the scenes.\r\n * The return value is always success or failure, and not a device ID, which means you can only have one device open at a time with this function.\r\n\r\n== Related Functions ==\r\n .[[SDL_CloseAudio]]\r\n .[[SDL_LockAudio]]\r\n .[[SDL_PauseAudio]]\r\n .[[SDL_UnlockAudio]]\r\n\r\n== Related Structures ==\r\n .[[SDL_AudioSpec]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryAudio\r\n"
    },
    {
      "Name": "SDL_OpenAudioDevice",
      "Uri": "https://wiki.libsdl.org/SDL_OpenAudioDevice",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:42:17.0304985-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_OpenAudioDevice =\r\nUse this function to open a specific audio device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_AudioDeviceID SDL_OpenAudioDevice(const char*          device,\r\n                                      int                  iscapture,\r\n                                      const SDL_AudioSpec* desired,\r\n                                      SDL_AudioSpec*       obtained,\r\n                                      int                  allowed_changes)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''device'''||a UTF-8 string reported by [[SDL_GetAudioDeviceName]](); see [[#device|Remarks]]||\r\n||'''iscapture'''||non-zero to specify a device should be opened for recording, not playback||\r\n||'''desired'''||an [[SDL_AudioSpec]] structure representing the desired output format; see [[SDL_OpenAudio]]() for more information||\r\n||'''obtained'''||an [[SDL_AudioSpec]] structure filled in with the actual output format; see [[SDL_OpenAudio]]() for more information||\r\n||'''allowed_changes'''||0, or one or more flags OR'd together; see [[#allowed|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns a valid device ID that is > 0 on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\nFor compatibility with SDL 1.2, this will never return 1, since SDL reserves that ID for the legacy [[SDL_OpenAudio|SDL_OpenAudio]]() function.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\nSDL_AudioSpec want, have;\r\nSDL_AudioDeviceID dev;\r\n\r\nSDL_memset(&want, 0, sizeof(want)); /* or SDL_zero(want) */\r\nwant.freq = 48000;\r\nwant.format = AUDIO_F32;\r\nwant.channels = 2;\r\nwant.samples = 4096;\r\nwant.callback = MyAudioCallback; /* you wrote this function elsewhere -- see SDL_AudioSpec for details */\r\n\r\ndev = SDL_OpenAudioDevice(NULL, 0, &want, &have, SDL_AUDIO_ALLOW_FORMAT_CHANGE);\r\nif (dev == 0) {\r\n    SDL_Log(\"Failed to open audio: %s\", SDL_GetError());\r\n} else {\r\n    if (have.format != want.format) { /* we let this one thing change. */\r\n        SDL_Log(\"We didn't get Float32 audio format.\");\r\n    }\r\n    SDL_PauseAudioDevice(dev, 0); /* start audio playing. */\r\n    SDL_Delay(5000); /* let the audio callback play some sound for 5 seconds. */\r\n    SDL_CloseAudioDevice(dev);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_OpenAudio]](), unlike this function, always acts on device ID 1. As such, this function will never return a 1 so as not to conflict with the legacy function.\r\n\r\nPlease note that SDL 2.0 before 2.0.5 did not support recording; as such, this function was failing if '''iscapture''' was not zero. Starting with SDL 2.0.5 recording is implemented and this value can be non-zero.\r\n\r\n<<Anchor(device)>> Passing in a '''device''' name of NULL requests the most reasonable default (and is equivalent to what [[SDL_OpenAudio]]() does to choose a device).\r\nThe '''device''' name is a UTF-8 string reported by [[SDL_GetAudioDeviceName]](), but some drivers allow arbitrary and driver-specific strings, such as a hostname/IP address for a remote audio server, or a filename in the diskaudio driver.\r\n\r\n<<Anchor(allowed)>> '''allowed_changes''' can have the following flags OR'd together:\r\n||SDL_AUDIO_ALLOW_FREQUENCY_CHANGE||\r\n||SDL_AUDIO_ALLOW_FORMAT_CHANGE||\r\n||SDL_AUDIO_ALLOW_CHANNELS_CHANGE||\r\n||SDL_AUDIO_ALLOW_ANY_CHANGE||\r\n\r\nThese flags specify how SDL should behave when a device cannot offer a specific feature. If the application requests a feature that the hardware doesn't offer, SDL will always try to get the closest equivalent.\r\n\r\nFor example, if you ask for float32 audio format, but the sound card only supports int16, SDL will set the hardware to int16. If you had set SDL_AUDIO_ALLOW_FORMAT_CHANGE, SDL will change the format in the '''obtained''' structure. If that flag was ''not'' set, SDL will prepare to convert your callback's float32 audio to int16 before feeding it to the hardware and will keep the originally requested format in the '''obtained''' structure.\r\n\r\nIf your application can only handle one specific data format, pass a zero for '''allowed_changes''' and let SDL transparently handle any differences.\r\n\r\nAn opened audio device starts out paused, and should be enabled for playing by calling [[SDL_PauseAudioDevice]](devid, 0) when you are ready for your audio callback function to be called.  Since the audio driver may modify the requested size of the audio buffer, you should allocate any local mixing buffers after you open the audio device.\r\n\r\nThe audio callback runs in a separate thread in most cases; you can prevent race conditions between your callback and other threads without fully pausing playback with [[SDL_LockAudioDevice]](). For more information about the callback, see [[SDL_AudioSpec]].\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CloseAudioDevice]]\r\n .[[SDL_GetAudioDeviceName]]\r\n .[[SDL_LockAudioDevice]]\r\n .[[SDL_OpenAudio]]\r\n .[[SDL_PauseAudioDevice]]\r\n .[[SDL_UnlockAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_PauseAudio",
      "Uri": "https://wiki.libsdl.org/SDL_PauseAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:42:22.681014-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_PauseAudio =\r\nThis function is a legacy means of pausing the audio device. New programs might want to use [[SDL_PauseAudioDevice]]() instead.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_PauseAudio(int pause_on)\r\n}}}\r\n\r\n== Function Parameters ==\r\n\r\n||'''pause_on'''||non-zero to pause, 0 to unpause||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_PauseAudio(1);  // audio callback is stopped when this returns.\r\nSDL_Delay(5000);  // audio device plays silence for 5 seconds\r\nSDL_PauseAudio(0);  // audio callback starts running again.\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is equivalent to calling\r\n\r\n{{{#!highlight cpp\r\nSDL_PauseAudioDevice(1, pause_on);\r\n}}}\r\n\r\nand is only useful if you used the legacy [[SDL_OpenAudio]]() function.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAudioStatus]]\r\n .[[SDL_PauseAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_PauseAudioDevice",
      "Uri": "https://wiki.libsdl.org/SDL_PauseAudioDevice",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:42:23.0604296-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_PauseAudioDevice =\r\nUse this function to pause and unpause audio playback on a specified device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_PauseAudioDevice(SDL_AudioDeviceID dev,\r\n                          int               pause_on)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dev'''||a device opened by [[SDL_OpenAudioDevice]]()||\r\n||'''pause_on'''||non-zero to pause, 0 to unpause||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_AudioDeviceID devid;\r\nSDL_PauseAudioDevice(devid, 1);  // audio callback is stopped when this returns.\r\nSDL_Delay(5000);  // audio device plays silence for 5 seconds\r\nSDL_PauseAudioDevice(devid, 0);  // audio callback starts running again.\r\n}}}\r\n\r\n== Remarks ==\r\nThis function pauses and unpauses the audio callback processing for a given device. Newly-opened audio devices start in the paused state, so you must call this function with '''pause_on'''=0 after opening the specified audio device to start playing sound. This allows you to safely initialize data for your callback function after opening the audio device. Silence will be written to the audio device while paused, and the audio callback is guaranteed to not be called. Pausing one device does not prevent other unpaused devices from running their callbacks.\r\n\r\nPausing state does not stack; even if you pause a device several times, a single unpause will start the device playing again, and vice versa. This is different from how [[SDL_LockAudioDevice]]() works.\r\n\r\nIf you just need to protect a few variables from race conditions vs your callback, you shouldn't pause the audio device, as it will lead to dropouts in the audio playback. Instead, you should use [[SDL_LockAudioDevice]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_LockAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_PeepEvents",
      "Uri": "https://wiki.libsdl.org/SDL_PeepEvents",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:42:23.4854956-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\"style=\"color: rgb(255, 0, 0); text-align: center;\">DRAFT ||\r\n\r\n\r\n= SDL_PeepEvents =\r\nUse this function to check the event queue for messages and optionally return them.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_PeepEvents(SDL_Event*      events,\r\n                   int             numevents,\r\n                   SDL_eventaction action,\r\n                   Uint32          minType,\r\n                   Uint32          maxType)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''events'''    || destination buffer for the retrieved events ||\r\n||'''numevents''' || if action is SDL_ADDEVENT, the number of events to add back to the event queue; if action is SDL_PEEKEVENT or SDL_GETEVENT, the maximum number of events to retrieve  ||\r\n||'''action'''    || action to take; see [[#action|Remarks]] for details ||\r\n||'''minType'''   || minimum value of the event type to be considered; SDL_FIRSTEVENT is a safe choice ||\r\n||'''maxType'''   || maximum value of the event type to be considered; SDL_LASTEVENT is a safe choice ||\r\n\r\n== Return Value ==\r\nReturns the number of events actually stored or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nAdd a code example here.\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(action)>> '''action''' may be any of the following: /* <<Color2(col=green,text=\"(from enum SDL_eventaction which has no page)\")>> */\r\n||SDL_ADDEVENT ||up to '''numevents''' events will be added to the back of the event queue ||\r\n||SDL_PEEKEVENT ||up to '''numevents''' events at the front of the event queue, within the specified minimum and maximum type, will be returned and will not be removed from the queue||\r\n||SDL_GETEVENT ||up to '''numevents''' events at the front of the event queue, within the specified minimum and maximum type, will be returned and will be removed from the queue||\r\n\r\n{i} This function is thread-safe.\r\n\r\nYou may have to call [[SDL_PumpEvents]]() before calling this function. Otherwise, the events may not be ready to be filtered when you call [[SDL_PeepEvents]]().\r\n\r\n== Related Functions ==\r\n . [[SDL_PollEvent]]\r\n . [[SDL_PumpEvents]]\r\n . [[SDL_PushEvent]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryEvents\r\n"
    },
    {
      "Name": "SDL_PixelFormatEnumToMasks",
      "Uri": "https://wiki.libsdl.org/SDL_PixelFormatEnumToMasks",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:42:23.9572771-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_PixelFormatEnumToMasks =\r\nUse this function to convert one of the enumerated pixel formats to a bpp value and RGBA masks.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_PixelFormatEnumToMasks(Uint32  format,\r\n                                    int*    bpp,\r\n                                    Uint32* Rmask,\r\n                                    Uint32* Gmask,\r\n                                    Uint32* Bmask,\r\n                                    Uint32* Amask)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''format'''||one of the [[SDL_PixelFormatEnum]] values; see [[#Remarks|Remarks]] for details||\r\n||'''bpp'''||a bits per pixel value; usually 15, 16, or 32||\r\n||'''Rmask'''||a pointer filled in with the red mask for the format||\r\n||'''Gmask'''||a pointer filled in with the green mask for the format||\r\n||'''Bmask'''||a pointer filled in with the blue mask for the format||\r\n||'''Amask'''||a pointer filled in with the alpha mask for the format||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE on success or SDL_FALSE if the conversion wasn't possible; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''format''' may be one of the following:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"=== Pixel Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_MasksToPixelFormatEnum]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_PointInRect",
      "Uri": "https://wiki.libsdl.org/SDL_PointInRect",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:43:04.9504265-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_PointInRect =\r\nUse this function to check if a point resides inside a rectangle.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_PointInRect(const SDL_Point* p,\r\n                         const SDL_Rect*  r)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''p'''||an [[SDL_Point]] which is the point||\r\n||'''r'''||an [[SDL_Rect]] which is the rectangle||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if point resides inside rectangle or SDL_FALSE if not.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nBoth '''p''' and '''r''' must not be NULL.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_PollEvent",
      "Uri": "https://wiki.libsdl.org/SDL_PollEvent",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:43:05.8884463-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_PollEvent =\r\nUse this function to poll for currently pending events.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_PollEvent(SDL_Event* event)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''event'''||the [[SDL_Event]] structure to be filled with the next event from the queue, or NULL||\r\n\r\n== Return Value ==\r\nReturns 1 if there is a pending event or 0 if there are none available.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nwhile (1) {\r\n    SDL_Event event;\r\n    while (SDL_PollEvent(&event)) {\r\n        /* handle your event here */\r\n    }\r\n    /* do some other stuff here -- draw your app, etc. */\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''event''' is not NULL, the next event is removed from the queue and stored in the [[SDL_Event]] structure pointed to by '''event'''.  The 1 returned refers to this event, immediately stored in the SDL Event structure -- not an event to follow.\r\n\r\nIf '''event''' is NULL, it simply returns 1 if there is an event in the queue, but will not remove it.\r\n\r\nAs this function implicitly calls [[SDL_PumpEvents]](), you can only call this function in the thread that set the video mode.\r\n\r\n[[SDL_PollEvent]]() is the favored way of receiving system events since it can be done from the main loop and does not suspend the main loop while waiting on an event to be posted.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetEventFilter]]\r\n .[[SDL_PeepEvents]]\r\n .[[SDL_PushEvent]]\r\n .[[SDL_SetEventFilter]]\r\n .[[SDL_WaitEvent]]\r\n .[[SDL_WaitEventTimeout]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_PumpEvents",
      "Uri": "https://wiki.libsdl.org/SDL_PumpEvents",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:43:11.5151339-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_PumpEvents =\r\nUse this function to pump the event loop, gathering events from the input devices.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_PumpEvents(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function updates the event queue and internal input device state.\r\n\r\n/!\\ WARNING: This should only be run in the thread that initialized the video subsystem, and for extra safety, you should consider only doing those things on the main thread in any case.\r\n\r\n[[SDL_PumpEvents]]() gathers all the pending input information from devices and places it in the event queue. Without calls to [[SDL_PumpEvents]]() no events would ever be placed on the queue. Often the need for calls to [[SDL_PumpEvents]]() is hidden from the user since [[SDL_PollEvent]]() and [[SDL_WaitEvent]]() implicitly call [[SDL_PumpEvents]](). However, if you are not polling or waiting for events (e.g. you are filtering them), then you must call [[SDL_PumpEvents]]() to force an event queue update.\r\n\r\n== Related Functions ==\r\n .[[SDL_PollEvent]]\r\n .[[SDL_WaitEvent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_PushEvent",
      "Uri": "https://wiki.libsdl.org/SDL_PushEvent",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:43:12.0182977-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_PushEvent =\r\nUse this function to add an event to the event queue.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_PushEvent(SDL_Event* event)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''event'''|| the [[SDL_Event]] to be added to the queue||\r\n\r\n== Return Value ==\r\nReturns 1 on success, 0 if the event was filtered, or a negative error code on failure; call [[SDL_GetError]]() for more information.  A common reason for error is the event queue being full.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n    // Default Usage:\r\n    SDL_Event sdlevent;\r\n    sdlevent.type = SDL_KEYDOWN;\r\n    sdlevent.key.keysym.sym = SDLK_1;\r\n\r\n    SDL_PushEvent(&sdlevent);\r\n}}}\r\n\r\n== Remarks ==\r\nThe event queue can actually be used as a two way communication channel. Not only can events be read from the queue, but the user can also push their own events onto it. '''event''' is a pointer to the event structure you wish to push onto the queue. The event is copied into the queue, and the caller may dispose of the memory pointed to after [[SDL_PushEvent]]() returns.\r\n\r\nNote: Pushing device input events onto the queue doesn't modify the state of the device within SDL.\r\n\r\n{i} This function is thread-safe, and can be called from other threads safely.\r\n\r\nNote: Events pushed onto the queue with [[SDL_PushEvent]]() get passed through the event filter but events added with [[SDL_PeepEvents]]() do not.\r\n\r\nFor pushing application-specific events, please use [[SDL_RegisterEvents]]() to get an event type that does not conflict with other code that also wants its own custom event types.\r\n\r\n== Related Functions ==\r\n .[[SDL_PeepEvents]]\r\n .[[SDL_PollEvent]]\r\n .[[SDL_RegisterEvents]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_QueryTexture",
      "Uri": "https://wiki.libsdl.org/SDL_QueryTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:43:12.373772-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_QueryTexture =\r\nUse this function to query the attributes of a texture.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_QueryTexture(SDL_Texture* texture,\r\n                     Uint32*      format,\r\n                     int*         access,\r\n                     int*         w,\r\n                     int*         h)\r\n}}}\r\n\r\n== Function Parameters ==\r\n\r\n||'''texture'''||the texture to query||\r\n||'''format'''||a pointer filled in with the raw format of the texture; the actual format may differ, but pixel transfers will use this format; see [[#format|Remarks]] for details||\r\n||'''access'''||a pointer filled in with the actual access to the texture (one of the [[SDL_TextureAccess]] values)||\r\n||'''w'''||a pointer filled in with the width of the texture in pixels||\r\n||'''h'''||a pointer filled in with the height of the texture in pixels||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_Texture* source;\r\n\r\n// loading etc ...\r\n\r\nint w, h;\r\nSDL_QueryTexture(source, NULL, NULL, &w, &h);\r\n\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(format)>> '''format''' may be one of the following:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"=== Pixel Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTexture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_QueueAudio",
      "Uri": "https://wiki.libsdl.org/SDL_QueueAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T14:43:12.7390527-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_QueueAudio =\r\nUse this function to queue more audio on non-callback devices.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_QueueAudio(SDL_AudioDeviceID dev,\r\n                   const void*       data,\r\n                   Uint32            len)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''dev'''||the device ID to which we will queue audio||\r\n||'''data'''||the data to queue to the device for later playback||\r\n||'''len'''||the number of bytes (not samples!) to which (data) points||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nIf you are looking to retrieve queued audio from a non-callback capture device, you want [[SDL_DequeueAudio]]() instead.  SDL_!QueueAudio() will return -1 to signify an error if you use it with capture devices.\r\n\r\nSDL offers two ways to feed audio to the device: you can either supply a callback that SDL triggers with some frequency to obtain more audio (pull method), or you can supply no callback, and then SDL will expect you to supply data at regular intervals (push method) with this function.\r\n\r\nThere are no limits on the amount of data you can queue, short of exhaustion of address space. Queued data will drain to the device as necessary without further intervention from you. If the device needs audio but there is not enough queued, it will play silence to make up the difference. This means you will have skips in your audio playback if you aren't routinely queueing sufficient data.\r\n\r\nThis function copies the supplied data, so you are safe to free it when the function returns. This function is thread-safe, but queueing to the same device from two threads at once does not promise which buffer will be queued first.\r\n\r\nYou may not queue audio on a device that is using an application-supplied callback; doing so returns an error. You have to use the audio callback or queue audio with this function, but not both.\r\n\r\nYou should not call [[SDL_LockAudio]]() on the device before queueing; SDL handles locking internally for this function.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_ClearQueuedAudio]]\r\n .[[SDL_GetQueuedAudioSize]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_Quit",
      "Uri": "https://wiki.libsdl.org/SDL_Quit",
      "Categories": [
        "CategoryAPI",
        "CategoryInit"
      ],
      "LastUpdate": "2021-01-16T14:43:13.2613482-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Quit =\r\nUse this function to clean up all initialized subsystems.  You should call it upon all exit conditions.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_Quit(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(int argc, char** argv) {\r\n    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {\r\n        fprintf(stderr, \"Unable to initialize SDL:  %s\\n\", SDL_GetError());\r\n        return 1;\r\n    }\r\n    atexit(SDL_Quit);\r\n\r\n    /* ... */\r\n\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nYou should call this function even if you have already shutdown each initialized subsystem with [[SDL_QuitSubSystem]](). It is safe to call this function even in the case of errors in initialization.\r\n\r\nIf you start a subsystem using a call to that subsystem's init function (for example [[SDL_VideoInit]]()) instead of [[SDL_Init]]() or [[SDL_InitSubSystem]](), then you must use that subsystem's quit function ([[SDL_VideoQuit]]()) to shut it down before calling SDL_Quit().\r\n\r\nYou can use this function with atexit() to ensure that it is run when your application is shutdown, but it is not wise to do this from a library or other dynamically loaded code. \r\n\r\n== Related Functions ==\r\n .[[SDL_Init]]\r\n .[[SDL_QuitSubSystem]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryInit]]\r\n"
    },
    {
      "Name": "SDL_QuitRequested",
      "Uri": "https://wiki.libsdl.org/SDL_QuitRequested",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:43:13.9820988-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_QuitRequested =\r\nUse this function to see whether an SDL_QUIT event is queued.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_QuitRequested(void)\r\n}}}\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if SDL_QUIT is queued or SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is actually a macro that calls [[SDL_PumpEvents]]() followed by [[SDL_PeepEvents]](). Since it pumps the event queue, it can only be used in the main thread.\r\n\r\nIt's perfectly normal for applications to just look for SDL_QUIT in their event loop, too, without using this macro.\r\n\r\n== Related Functions ==\r\n .[[SDL_PollEvent]]\r\n .[[SDL_PumpEvents]]\r\n .[[SDL_WaitEvent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_QuitSubSystem",
      "Uri": "https://wiki.libsdl.org/SDL_QuitSubSystem",
      "Categories": [
        "CategoryAPI",
        "CategoryInit"
      ],
      "LastUpdate": "2021-01-16T14:43:19.4745642-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_QuitSubSystem =\r\nUse this function to shut down specific SDL subsystems.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_QuitSubSystem(Uint32 flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''flags'''||any of the flags used by [[SDL_Init]](); see [[#flags|Remarks]] for details||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\n/* ... */\r\n\r\nint main(int argc, char **argv) {\r\n    int sdl_initialized = 0;\r\n    sdl_initialized = !SDL_Init(0);\r\n\r\n    /* ... console stuff ... */\r\n\r\n    if (sdl_initialized && SDL_InitSubSystem(SDL_INIT_VIDEO)) {\r\n        display_graph();\r\n        SDL_QuitSubSystem(SDL_INIT_VIDEO);\r\n    }\r\n\r\n    /* ... more console stuff ... */\r\n\r\n    if (sdl_initialized) SDL_Quit();\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(flags)>>These are the flags which may be passed to [[SDL_QuitSubSystem]]() and may be OR'd together to quit multiple subsystems simultaneously.\r\n<<Include(SDL_Init, , , from=\"OR'd together:\", to=\"If you want to initialize\")>>\r\n\r\nIf you start a subsystem using a call to that subsystem's init function (for example [[SDL_VideoInit]]()) instead of [[SDL_Init]]() or [[SDL_InitSubSystem]](), [[SDL_QuitSubSystem]]() and [[SDL_WasInit]]() will not work.  You will need to use that subsystem's quit function ([[SDL_VideoQuit]]()) directly instead.\r\n\r\nYou still need to call [[SDL_Quit]]() even if you close all open subsystems with [[SDL_QuitSubSystem]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_InitSubSystem]]\r\n .[[SDL_Quit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryInit]]\r\n"
    },
    {
      "Name": "SDL_REVISION",
      "Uri": "https://wiki.libsdl.org/SDL_REVISION",
      "Categories": [
        "CategoryAPI",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T14:43:19.8729711-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_REVISION =\r\nThis macro is a string describing the source at a particular point in development.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n##The following is included on SDL_GetRevision.  Any changes between these comments will be reflected on those pages.  Please use caution when editing.  Start Include here.\r\nThe revision is a string including sequential revision number that is incremented with each commit, and a hash of the last code change.\r\n . ''Example'':  {{{hg-5344:94189aa89b54}}}\r\n##End Include here\r\n\r\nSDL_revision.h must be included in your program explicitly if you want to use the SDL_REVISION constant.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRevision]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_RWFromConstMem",
      "Uri": "https://wiki.libsdl.org/SDL_RWFromConstMem",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:43:20.3220666-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWFromConstMem =\r\nUse this function to prepare a read-only memory buffer for use with RWops.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_RWops* SDL_RWFromConstMem(const void* mem,\r\n                              int         size)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''mem'''||a pointer to a read-only buffer to feed an [[SDL_RWops]] stream||\r\n||'''size'''||the buffer size, in bytes||\r\n\r\n== Return Value ==\r\nReturns a pointer to a new [[SDL_RWops]] structure, or NULL if it fails; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nchar bitmap[] = {\r\n    66, 77, 86, 2, 0, 0, 0, 0 ...\r\n};\r\nSDL_RWops *rw = SDL_RWFromConstMem(bitmap, sizeof(bitmap));\r\nSDL_Surface *img = SDL_LoadBMP_RW(rw, 1); /* Automatically frees the RWops struct for us */\r\n/* Do something with img... */\r\n}}}\r\n\r\n== Remarks ==\r\nThis function sets up an [[SDL_RWops]] struct based on a memory area of a certain size. It assumes the memory area is not writable.\r\n\r\nAttempting to write to this RWops stream will report an error without writing to the memory buffer.\r\n\r\nThis memory buffer is not copied by the RWops; the pointer you provide must remain valid until you close the stream. Closing the stream will not free the original buffer.\r\n\r\nIf you need to write to a memory buffer, you should use [[SDL_RWFromMem]]() with a writable buffer of memory instead.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWtell]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWFromFP",
      "Uri": "https://wiki.libsdl.org/SDL_RWFromFP",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:43:20.6883133-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWFromFP =\r\nUse this function to create an [[SDL_RWops]] structure from a standard I/O file pointer (stdio.h's `FILE*`).\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_RWops* SDL_RWFromFP(void*    fp,\r\n                        SDL_bool autoclose)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''fp'''||the `FILE*` that feeds the [[SDL_RWops]] stream||\r\n||'''autoclose'''||SDL_TRUE to close the `FILE*` when closing the [[SDL_RWops]], SDL_FALSE to leave the `FILE*` open when the RWops is closed||\r\n\r\n== Return Value ==\r\nReturns a pointer to the [[SDL_RWops]] structure that is created, or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nFILE *fp = fopen(\"myfile.dat\", \"rb\");\r\nSDL_RWops *rw = SDL_RWFromFP(fp, SDL_TRUE);\r\n/* Do things with rw... */\r\nSDL_RWclose(rw); /* Automatically does an fclose(fp) in this case */\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is not available on Windows, since files opened in an application on that platform cannot be used by a dynamically linked library.\r\n\r\nOn some platforms, the first parameter is a `void*`, on others, it's a `FILE*`, depending on what system headers are available to SDL. It is always intended to be the `FILE*` type from the C runtime's stdio.h.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWtell]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWFromFile",
      "Uri": "https://wiki.libsdl.org/SDL_RWFromFile",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:43:21.0456719-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWFromFile =\r\nUse this function to create a new [[SDL_RWops]] structure for reading from and/or writing to a named file.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_RWops* SDL_RWFromFile(const char* file,\r\n                          const char* mode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''file'''||a UTF-8 string representing the filename to open||\r\n||'''mode'''||an ASCII string representing the mode to be used for opening the file; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns a pointer to the [[SDL_RWops]] structure that is created, or NULL on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_RWops *file = SDL_RWFromFile(\"myimage.bmp\", \"rb\");\r\nSDL_Surface *image = SDL_LoadBMP_RW(file, 1); /* 1 to automatically close the RWops. */\r\n/* Do something with image here. */\r\n}}}\r\n\r\n== Remarks ==\r\nThe '''mode''' string is treated roughly the same as in a call to the C library's fopen(), even if SDL doesn't happen to use fopen() behind the scenes.\r\n\r\nAvailable '''mode''' strings:\r\n||r||Open a file for reading. The file must exist.||\r\n||w||Create an empty file for writing. If a file with the same name already exists its content is erased and the file is treated as a new empty file.||\r\n||a||Append to a file. Writing operations append data at the end of the file. The file is created if it does not exist.||\r\n||r+||Open a file for update both reading and writing. The file must exist.||\r\n||w+||Create an empty file for both reading and writing. If a file with the same name already exists its content is erased and the file is treated as a new empty file.||\r\n||a+||Open a file for reading and appending. All writing operations are performed at the end of the file, protecting the previous content to be overwritten. You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations will move it back to the end of file. The file is created if it does not exist.||\r\n\r\n{i} ''NOTE'': In order to open a file as a binary file, a \"b\" character has to be included in the '''mode''' string. This additional \"b\" character can either be appended at the end of the string (thus making the following compound modes: \"rb\", \"wb\", \"ab\", \"r+b\", \"w+b\", \"a+b\") or be inserted between the letter and the \"+\" sign for the mixed modes (\"rb+\", \"wb+\", \"ab+\"). Additional characters may follow the sequence, although they should have no effect. For example, \"t\" is sometimes appended to make explicit the file is a text file.\r\n\r\nThis function supports Unicode filenames, but they must be encoded in UTF-8 format, regardless of the underlying operating system.\r\n\r\nAs a fallback, SDL_RWFromFile() will transparently open a matching filename in Android {{{assets}}}.\r\n\r\nClosing the [[SDL_RWops]] will close the file handle SDL is holding internally.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWtell]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWFromMem",
      "Uri": "https://wiki.libsdl.org/SDL_RWFromMem",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:43:21.6243588-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWFromMem =\r\nUse this function to prepare a read-write memory buffer for use with [[SDL_RWops]].\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_RWops* SDL_RWFromMem(void* mem,\r\n                         int   size)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''mem'''||a pointer to a buffer to feed an [[SDL_RWops]] stream||\r\n||'''size'''||the buffer size, in bytes||\r\n\r\n== Return Value ==\r\nReturns a pointer to a new [[SDL_RWops]] structure, or NULL if it fails; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nchar bitmap[310000];\r\nSDL_RWops *rw = SDL_RWFromMem(bitmap, sizeof(bitmap));\r\nSDL_SaveBMP_RW(screen, rw, 1);  /* closes SDL_RWops, leaves us memory buffer of data */\r\n}}}\r\n\r\n== Remarks ==\r\nThis function sets up an [[SDL_RWops]] struct based on a memory area of a certain size, for both read and write access.\r\n\r\nThis memory buffer is not copied by the RWops; the pointer you provide must remain valid until you close the stream. Closing the stream will not free the original buffer.\r\n\r\nIf you need to make sure the RWops never writes to the memory buffer, you should use [[SDL_RWFromConstMem]]() with a read-only buffer of memory instead.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWtell]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWclose",
      "Uri": "https://wiki.libsdl.org/SDL_RWclose",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:43:27.6890592-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWclose =\r\nUse this function to close and free an allocated [[SDL_RWops]] structure.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RWclose(struct SDL_RWops* context)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''context'''||[[SDL_RWops]] structure to close||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nUint8 buf[256];\r\nSDL_RWops *rw = SDL_RWFromFile(\"test.bin\", \"r\");\r\nif (rw != NULL) {\r\n    SDL_RWread(rw, buf, sizeof (buf), 1);\r\n    SDL_RWclose(rw);\r\n}\r\n// Go on and use the data in buf...\r\n}}}\r\n\r\n== Remarks ==\r\nSDL_RWclose() closes and cleans up the [[SDL_RWops]] stream. It releases any resources used by the stream and frees the SDL_RWops itself with [[SDL_FreeRW]](). This returns 0 on success, or -1 if the stream failed to flush to its output (e.g. to disk).\r\n\r\nNote that if this fails to flush the stream to disk, this function reports an error, but the SDL_RWops is still invalid once this function returns.\r\n\r\nSDL_RWclose() is actually a macro that calls the SDL_RWops's '''close''' method appropriately, to simplify application development.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWread",
      "Uri": "https://wiki.libsdl.org/SDL_RWread",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:09.0631136-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWread =\r\nUse this function to read from a data source.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_RWread(struct SDL_RWops* context,\r\n                  void*             ptr,\r\n                  size_t            size,\r\n                  size_t            maxnum)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''context'''||a pointer to an [[SDL_RWops]] structure||\r\n||'''ptr'''||a pointer to a buffer to read data into||\r\n||'''size'''||the size of each object to read, in bytes||\r\n||'''maxnum'''||the maximum number of objects to be read||\r\n\r\n== Return Value ==\r\nReturns the number of objects read, or 0 at error or end of file; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_RWops *rw = SDL_RWFromFile(\"test.bin\",\"r\");\r\nif (rw != NULL) {\r\n    extern Uint8 buf[256];\r\n    SDL_RWread(rw, buf, sizeof (buf), 1);\r\n    SDL_RWclose(rw);\r\n}\r\n}}}\r\n\r\nRead a complete file in memory (assuming size can be detected) (from [[https://gitlab.com/wikibooks-opengl/modern-tutorials/blob/master/common-sdl2/shader_utils.cpp|OpenGL WikiBook]]):\r\n{{{#!highlight cpp\r\nchar* file_read(const char* filename) {\r\n\tSDL_RWops *rw = SDL_RWFromFile(filename, \"rb\");\r\n\tif (rw == NULL) return NULL;\r\n\r\n\tSint64 res_size = SDL_RWsize(rw);\r\n\tchar* res = (char*)malloc(res_size + 1);\r\n\r\n\tSint64 nb_read_total = 0, nb_read = 1;\r\n\tchar* buf = res;\r\n\twhile (nb_read_total < res_size && nb_read != 0) {\r\n\t\tnb_read = SDL_RWread(rw, buf, 1, (res_size - nb_read_total));\r\n\t\tnb_read_total += nb_read;\r\n\t\tbuf += nb_read;\r\n\t}\r\n\tSDL_RWclose(rw);\r\n\tif (nb_read_total != res_size) {\r\n\t\tfree(res);\r\n\t\treturn NULL;\r\n\t}\r\n\r\n\tres[nb_read_total] = '\\0';\r\n\treturn res;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function reads up to '''maxnum''' objects each of size '''size''' from the data source to the area pointed at by '''ptr'''. This function may read less objects than requested. It will return zero when there has been an error or the data stream is completely read.\r\n\r\nSDL_RWread() is actually a macro that calls the [[SDL_RWops]]'s '''read''' method appropriately, to simplify application development.\r\n\r\n'''More Examples'''\r\n{{{#! highlight cpp\r\nUint32 buffer[10];\r\nSDL_RWread(rwop, buffer, sizeof(Uint32), 10);\r\n}}}\r\nThis will read 40 bytes of data, and put it into 'buffer', which is intended to hold 32-bit integers. Each Uint32 is 4 bytes, or 32-bits.\r\n\r\n\r\n\r\n{{{#! highlight cpp\r\nUint64 buffer[10];\r\nSDL_RWread(rwop, buffer, sizeof(Uint64), 10);\r\n}}}\r\nThis will read 80 bytes of data, and place them into 'buffer', which is now designed for 64-bit integers (Uint64 values). Each Uint64 (long) is 8 bytes, and we are reading 10 of them (as shown by buffer[10] when we make it).\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWseek",
      "Uri": "https://wiki.libsdl.org/SDL_RWseek",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:09.8317588-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWseek =\r\nUse this function to seek within an [[SDL_RWops]] data stream.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSint64 SDL_RWseek(SDL_RWops* context,\r\n                  Sint64     offset,\r\n                  int        whence)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''context'''||a pointer to an [[SDL_RWops]] structure||\r\n||'''offset'''||an offset in bytes, relative to '''whence''' location; can be negative||\r\n||'''whence'''||any of RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END; see [[#whence|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns the final offset in the data stream after the seek or -1 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_RWops *rw = SDL_RWFromFile(\"myfile.bin\", \"rb\");\r\nif (rw != NULL) {\r\n    /* Seek to 0 bytes from the end of the file */\r\n    Sint64 length = SDL_RWseek(rw, 0, RW_SEEK_END);\r\n    SDL_RWclose(rw);\r\n    if (length < 0) {\r\n        printf(\"Could not seek inside myfile.bin\\n\");\r\n    } else {\r\n        printf(\"myfile.bin is %d bytes long\\n\", length);\r\n    }\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function seeks to '''offset''' relative to '''whence'''\r\n\r\n<<Anchor(whence)>>'''whence''' may be any of the following values:\r\n||RW_SEEK_SET||seek from the beginning of data||\r\n||RW_SEEK_CUR||seek relative to current read point||\r\n||RW_SEEK_END||seek relative to the end of data||\r\n\r\nIf this stream can not seek, it will return -1.\r\n\r\nSDL_RWseek() is actually a macro that calls the [[SDL_RWops]]'s '''seek''' method appropriately, to simplify application development.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWtell]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWsize",
      "Uri": "https://wiki.libsdl.org/SDL_RWsize",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:10.2361993-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RWsize =\r\nUse this macro to get the size of the data stream in an [[SDL_RWops]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSint64 SDL_RWsize(SDL_RWops* context)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''context'''||the [[SDL_RWops]] to get the size of the data stream from||\r\n\r\n\r\n== Return Value ==\r\nReturns the size of the data stream in the [[SDL_RWops]] on success, -1 if unknown or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RWtell",
      "Uri": "https://wiki.libsdl.org/SDL_RWtell",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:10.6392907-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RWtell =\r\nUse this function to determine the current read/write offset in an [[SDL_RWops]] data stream.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSint64 SDL_RWtell(struct SDL_RWops* context)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''context''' ||a [[SDL_RWops]] data stream object from which to get the current offset||\r\n\r\n== Return Value ==\r\nReturns the current offset in the stream, or -1 if the information can not be determined.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nextern SDL_RWops *rw;\r\nprintf(\"Current position in stream: %lld\\n\", (long long) SDL_RWtell(rw));\r\nif (SDL_RWseek(rw, 0, RW_SEEK_END) != -1) {\r\n    printf(\"Final position in stream: %lld\\n\", (long long) SDL_RWtell(rw));\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nSDL_RWtell is actually a macro that calls the [[SDL_RWops]]'s '''seek''' method, with an offset of 0 bytes from RW_SEEK_CUR, to simplify application development.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n .[[SDL_RWwrite]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RWwrite",
      "Uri": "https://wiki.libsdl.org/SDL_RWwrite",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:11.1554607-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RWwrite =\r\nUse this function to write to an [[SDL_RWops]] data stream.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_RWwrite(struct SDL_RWops* context,\r\n                   const void*       ptr,\r\n                   size_t            size,\r\n                   size_t            num)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''context'''||a pointer to an [[SDL_RWops]] structure||\r\n||'''ptr'''||a pointer to a buffer containing data to write||\r\n||'''size'''||the size of an object to write, in bytes||\r\n||'''num'''||the number of objects to write||\r\n\r\n== Return Value ==\r\nReturns the number of objects written, which will be less than '''num''' on error; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_RWops *rw = SDL_RWFromFile(\"hello.txt\", \"w\");\r\nif(rw != NULL) {\r\n    const char *str = \"Hello World\";\r\n    size_t len = SDL_strlen(str);\r\n    if (SDL_RWwrite(rw, str, 1, len) != len) {\r\n        printf(\"Couldn't fully write string\\n\");\r\n    } else {\r\n        printf(\"Wrote %d 1-byte blocks\\n\", len);\r\n    }\r\n    SDL_RWclose(rw);\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function writes exactly '''num''' objects each of size '''size''' from the area pointed at by '''ptr''' to the stream. If this fails for any reason, it'll return less than '''num''' to demonstrate how far the write progressed. On success, it returns '''num'''.\r\n\r\nSDL_RWwrite is actually a macro that calls the [[SDL_RWops]]'s '''write''' method appropriately, to simplify application development.\r\n\r\n== Related Functions ==\r\n .[[SDL_RWclose]]\r\n .[[SDL_RWFromConstMem]]\r\n .[[SDL_RWFromFile]]\r\n .[[SDL_RWFromFP]]\r\n .[[SDL_RWFromMem]]\r\n .[[SDL_RWread]]\r\n .[[SDL_RWseek]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_RaiseWindow",
      "Uri": "https://wiki.libsdl.org/SDL_RaiseWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:44:18.4748243-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RaiseWindow =\r\nUse this function to raise a window above other windows and set the input focus.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_RaiseWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to raise||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_ReadBE16",
      "Uri": "https://wiki.libsdl.org/SDL_ReadBE16",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:19.5270607-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ReadBE16 =\r\nUse this function to read 16 bits of big-endian data from an [[SDL_RWops]] and return in native format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint16 SDL_ReadBE16(SDL_RWops* src)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the stream from which to read data||\r\n\r\n== Return Value ==\r\nReturns 16 bits of data in the native byte order of the platform.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the data returned will be in the native byte order.\r\n\r\n== Related Functions ==\r\n .[[SDL_ReadLE16]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_ReadBE32",
      "Uri": "https://wiki.libsdl.org/SDL_ReadBE32",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:20.9202018-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ReadBE32 =\r\nUse this function to read 32 bits of big-endian data from an [[SDL_RWops]] and return in native format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_ReadBE32(SDL_RWops* src)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the stream from which to read data||\r\n\r\n== Return Value ==\r\nReturns 32 bits of data in the native byte order of the platform.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the data returned will be in the native byte order.\r\n\r\n== Related Functions ==\r\n .[[SDL_ReadLE32]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_ReadBE64",
      "Uri": "https://wiki.libsdl.org/SDL_ReadBE64",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:22.2691684-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ReadBE64 =\r\nUse this function to read 64 bits of big-endian data from an [[SDL_RWops]] and return in native format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint64 SDL_ReadBE64(SDL_RWops* src)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the stream from which to read data||\r\n\r\n== Return Value ==\r\nReturns 64 bits of data in the native byte order of the platform.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the data returned will be in the native byte order.\r\n\r\n== Related Functions ==\r\n .[[SDL_ReadLE64]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_ReadLE16",
      "Uri": "https://wiki.libsdl.org/SDL_ReadLE16",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:22.7860836-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ReadLE16 =\r\nUse this function to read 16 bits of little-endian data from an [[SDL_RWops]] and return in native format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint16 SDL_ReadLE16(SDL_RWops* src)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the stream from which to read data||\r\n\r\n== Return Value ==\r\nReturns 16 bits of data in the native byte order of the platform.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the data returned will be in the native byte order.\r\n\r\n== Related Functions ==\r\n .[[SDL_ReadBE16]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_ReadLE32",
      "Uri": "https://wiki.libsdl.org/SDL_ReadLE32",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:23.3968563-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ReadLE32 =\r\nUse this function to read 32 bits of little-endian data from an [[SDL_RWops]] and return in native format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_ReadLE32(SDL_RWops* src)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the stream from which to read data||\r\n\r\n== Return Value ==\r\nReturns 32 bits of data in the native byte order of the platform.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the data returned will be in the native byte order.\r\n\r\n== Related Functions ==\r\n .[[SDL_ReadBE32]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_ReadLE64",
      "Uri": "https://wiki.libsdl.org/SDL_ReadLE64",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:28.8521707-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_ReadLE64 =\r\nUse this function to read 64 bits of little-endian data from an [[SDL_RWops]] and return in native format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint64 SDL_ReadLE64(SDL_RWops* src)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''src'''||the stream from which to read data||\r\n\r\n== Return Value ==\r\nReturns 64 bits of data in the native byte order of the platform.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the data returned will be in the native byte order.\r\n\r\n== Related Functions ==\r\n .[[SDL_ReadBE64]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_ReadU8",
      "Uri": "https://wiki.libsdl.org/SDL_ReadU8",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T14:44:29.2392559-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_ReadU8 =\r\nUse this function to read a byte from an [[SDL_RWops]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint8 SDL_ReadU8(SDL_RWops* src)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''src'''||the [[SDL_RWops]] to read from||\r\n\r\n\r\n== Return Value ==\r\nReturns the read byte on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_WriteU8]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RecordGesture",
      "Uri": "https://wiki.libsdl.org/SDL_RecordGesture",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:44:29.6706882-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RecordGesture =\r\nUse this function to begin recording a gesture on a specified touch device or all touch devices.\r\n\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RecordGesture(SDL_TouchID touchId)\r\n}}}\r\n\r\n\r\n\r\n== Function Parameters ==\r\n||'''touchId'''||the touch device id, or -1 for all touch devices||\r\n\r\n\r\n\r\n\r\n== Return Value ==\r\nReturns 1 on success or 0 if the specified device could not be found.\r\n\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n\r\n== Remarks ==\r\nIf the parameter '''touchId''' is -1 (i.e., all devices), this function will always return 1, regardless of whether there actually are any devices.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTouchDevice]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RectEmpty",
      "Uri": "https://wiki.libsdl.org/SDL_RectEmpty",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:45:11.3687545-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RectEmpty =\r\nUse this function to check whether a rectangle has no area.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_RectEmpty(const SDL_Rect* r)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''r'''||the [[SDL_Rect]] structure representing the rectangle to check||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the rectangle has no area or SDL_FALSE if it does; see [[#Remarks|Remarks]] for details.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf the rectangle defined by '''r''' is NULL or has a width or height <= 0 it has no area and this function returns SDL_TRUE.  If both width and height are > 0 the rectangle has area and this function returns SDL_FALSE.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_RectEquals",
      "Uri": "https://wiki.libsdl.org/SDL_RectEquals",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T14:47:57.8549646-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RectEquals =\r\nUse this function to check whether two rectangles are equal.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_RectEquals(const SDL_Rect* a,\r\n                        const SDL_Rect* b)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''a'''||an [[SDL_Rect]] structure representing the first rectangle||\r\n||'''b'''||an [[SDL_Rect]] structure representing the second rectangle||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the two rectangles are exactly the same, SDL_FALSE otherwise; see [[#Remarks|Remarks]] for details.  \r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function compares the width, height, and location (X and Y) values for each of the two rectangles and returns SDL_TRUE if all corresponding values are equal.  If any value does not match or either rectangle is NULL it returns SDL_FALSE.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_RegisterEvents",
      "Uri": "https://wiki.libsdl.org/SDL_RegisterEvents",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:47:58.2611308-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RegisterEvents =\r\nUse this function to allocate a set of user-defined events, and return the beginning event number for that set of events.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_RegisterEvents(int numevents)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''numevents'''||the number of events to be allocated||\r\n\r\n== Return Value ==\r\nThe beginning event number, or (Uint32)-1 if there are not enough user-defined events left.\r\n\r\n== Code Examples ==\r\n<<Include(SDL_UserEvent, , , from=\"== Code Examples ==\", to=\"== Remarks ==\")>>\r\n\r\n== Remarks ==\r\nCalling this function with '''numevents''' <= 0 is an error and will return (Uint32)-1.\r\n\r\nNote, (Uint32)-1 means the maximum unsigned 32-bit integer value (or 0xFFFFFFFF), but is clearer to write.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_PushEvent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_RemoveTimer",
      "Uri": "https://wiki.libsdl.org/SDL_RemoveTimer",
      "Categories": [
        "CategoryAPI",
        "CategoryTimer"
      ],
      "LastUpdate": "2021-01-16T14:48:03.955299-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RemoveTimer =\r\nUse this function to remove a timer created with [[SDL_AddTimer]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_RemoveTimer(SDL_TimerID id)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''id'''||the ID of the timer to remove||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the timer is removed or SDL_FALSE if the timer wasn't found.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nUint32 delay = (33 / 10) * 10;  /* To round it down to the nearest 10 ms */\r\n\r\n/* ... */\r\n\r\nSDL_TimerID my_timer_id = SDL_AddTimer(delay, my_callbackfunc, my_callback_param);\r\n\r\n/* ... */\r\n\r\nSDL_RemoveTimer(my_timer_id);\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AddTimer]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryTimer]]\r\n"
    },
    {
      "Name": "SDL_RenderClear",
      "Uri": "https://wiki.libsdl.org/SDL_RenderClear",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:04.3277533-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderClear =\r\nUse this function to clear the current rendering target with the drawing color.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderClear(SDL_Renderer* renderer)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n        SDL_Window* window;\r\n        SDL_Renderer* renderer;\r\n\r\n        /* Initialize SDL. */\r\n        if (SDL_Init(SDL_INIT_VIDEO) < 0)\r\n                return 1;\r\n\r\n        /* Create the window where we will draw. */\r\n        window = SDL_CreateWindow(\"SDL_RenderClear\",\r\n                        SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,\r\n                        512, 512,\r\n                        0);\r\n\r\n        /* We must call SDL_CreateRenderer in order for draw calls to affect this window. */\r\n        renderer = SDL_CreateRenderer(window, -1, 0);\r\n\r\n        /* Select the color for drawing. It is set to red here. */\r\n        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\r\n\r\n        /* Clear the entire screen to our selected color. */\r\n        SDL_RenderClear(renderer);\r\n\r\n        /* Up until now everything was drawn behind the scenes.\r\n           This will show the new, red contents of the window. */\r\n        SDL_RenderPresent(renderer);\r\n\r\n        /* Give us time to see the window. */\r\n        SDL_Delay(5000);\r\n\r\n        /* Always be sure to clean up */\r\n        SDL_Quit();\r\n        return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function clears the entire rendering target, ignoring the viewport and the clip rectangle.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderCopy",
      "Uri": "https://wiki.libsdl.org/SDL_RenderCopy",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:48:05.9649726-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_RenderCopy =\r\nUse this function to copy a portion of the texture to the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderCopy(SDL_Renderer*   renderer,\r\n                   SDL_Texture*    texture,\r\n                   const SDL_Rect* srcrect,\r\n                   const SDL_Rect* dstrect)\r\n}}}\r\n== Function Parameters ==\r\n||'''renderer''' ||the rendering context ||\r\n||'''texture''' ||the source texture; see [[#Remarks|Remarks]] for details ||\r\n||'''srcrect''' ||the source [[SDL_Rect]] structure or NULL for the entire texture ||\r\n||'''dstrect''' ||the destination [[SDL_Rect]] structure or NULL for the entire rendering target; the texture will be stretched to fill the given rectangle ||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n#include \"SDL.h\"\r\n#define SHAPE_SIZE 16\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n  SDL_Window* Main_Window;\r\n  SDL_Renderer* Main_Renderer;\r\n  SDL_Surface* Loading_Surf;\r\n  SDL_Texture* Background_Tx;\r\n  SDL_Texture* BlueShapes;\r\n\r\n  /* Rectangles for drawing which will specify source (inside the texture)\r\n  and target (on the screen) for rendering our textures. */\r\n  SDL_Rect SrcR;\r\n  SDL_Rect DestR;\r\n\r\n  SrcR.x = 0;\r\n  SrcR.y = 0;\r\n  SrcR.w = SHAPE_SIZE;\r\n  SrcR.h = SHAPE_SIZE;\r\n\r\n  DestR.x = 640 / 2 - SHAPE_SIZE / 2;\r\n  DestR.y = 580 / 2 - SHAPE_SIZE / 2;\r\n  DestR.w = SHAPE_SIZE;\r\n  DestR.h = SHAPE_SIZE;\r\n\r\n\r\n  /* Before we can render anything, we need a window and a renderer */\r\n  Main_Window = SDL_CreateWindow(\"SDL_RenderCopy Example\",\r\n  SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 580, 0);\r\n  Main_Renderer = SDL_CreateRenderer(Main_Window, -1, SDL_RENDERER_ACCELERATED);\r\n\r\n  /* The loading of the background texture. Since SDL_LoadBMP() returns\r\n  a surface, we convert it to a texture afterwards for fast accelerated\r\n  blitting. */\r\n  Loading_Surf = SDL_LoadBMP(\"Background.bmp\");\r\n  Background_Tx = SDL_CreateTextureFromSurface(Main_Renderer, Loading_Surf);\r\n  SDL_FreeSurface(Loading_Surf); /* we got the texture now -> free surface */\r\n\r\n  /* Load an additional texture */\r\n  Loading_Surf = SDL_LoadBMP(\"Blueshapes.bmp\");\r\n  BlueShapes = SDL_CreateTextureFromSurface(Main_Renderer, Loading_Surf);\r\n  SDL_FreeSurface(Loading_Surf);\r\n\r\n  /* now onto the fun part.\r\n  This will render a rotating selection of the blue shapes\r\n  in the middle of the screen */\r\n  int i;\r\n  int n;\r\n  for (i = 0; i < 2; ++i) {\r\n    for(n = 0; n < 4; ++n) {\r\n      SrcR.x = SHAPE_SIZE * (n % 2);\r\n      if (n > 1) {\r\n        SrcR.y = SHAPE_SIZE;\r\n      } else {\r\n        SrcR.y = 0;\r\n      }\r\n\r\n      /* render background, whereas NULL for source and destination\r\n      rectangles just means \"use the default\" */\r\n      SDL_RenderCopy(Main_Renderer, Background_Tx, NULL, NULL);\r\n\r\n      /* render the current animation step of our shape */\r\n      SDL_RenderCopy(Main_Renderer, BlueShapes, &SrcR, &DestR);\r\n      SDL_RenderPresent(Main_Renderer);\r\n      SDL_Delay(500);\r\n    }\r\n  }\r\n\r\n\r\n  /* The renderer works pretty much like a big canvas:\r\n  when you RenderCopy() you are adding paint, each time adding it\r\n  on top.\r\n  You can change how it blends with the stuff that\r\n  the new data goes over.\r\n  When your 'picture' is complete, you show it\r\n  by using SDL_RenderPresent(). */\r\n\r\n  /* SDL 1.2 hint: If you're stuck on the whole renderer idea coming\r\n  from 1.2 surfaces and blitting, think of the renderer as your\r\n  main surface, and SDL_RenderCopy() as the blit function to that main\r\n  surface, with SDL_RenderPresent() as the old SDL_Flip() function.*/\r\n\r\n  SDL_DestroyTexture(BlueShapes);\r\n  SDL_DestroyTexture(Background_Tx);\r\n  SDL_DestroyRenderer(Main_Renderer);\r\n  SDL_DestroyWindow(Main_Window);\r\n  SDL_Quit();\r\n\r\n\r\n  return 0;\r\n}\r\n}}}\r\n== Remarks ==\r\nThe texture is blended with the destination based on its blend mode set with [[SDL_SetTextureBlendMode]]().\r\n\r\nThe texture color is affected based on its color modulation set by [[SDL_SetTextureColorMod]]().\r\n\r\nThe texture alpha is affected based on its alpha modulation set by [[SDL_SetTextureAlphaMod]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderCopyEx]]\r\n .[[SDL_SetTextureAlphaMod]]\r\n .[[SDL_SetTextureBlendMode]]\r\n .[[SDL_SetTextureColorMod]]\r\n\r\n----\r\n\r\n[[CategoryAPI]], CategoryRender\r\n"
    },
    {
      "Name": "SDL_RenderCopyEx",
      "Uri": "https://wiki.libsdl.org/SDL_RenderCopyEx",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:07.2415751-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderCopyEx =\r\nUse this function to copy a portion of the texture to the current rendering target, optionally rotating it by angle around the given center and also flipping it top-bottom and/or left-right.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderCopyEx(SDL_Renderer*          renderer,\r\n                     SDL_Texture*           texture,\r\n                     const SDL_Rect*        srcrect,\r\n                     const SDL_Rect*        dstrect,\r\n                     const double           angle,\r\n                     const SDL_Point*       center,\r\n                     const SDL_RendererFlip flip)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''texture'''||the source texture; see [[#Remarks|Remarks]] for details||\r\n||'''srcrect'''||the source [[SDL_Rect]] structure or NULL for the entire texture||\r\n||'''dstrect'''||the destination [[SDL_Rect]] structure or NULL for the entire rendering target||\r\n||'''angle'''||an angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction||\r\n||'''center'''||a pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around dstrect.w/2, dstrect.h/2)||\r\n||'''flip'''||a [[SDL_RendererFlip]] value stating which flipping actions should be performed on the texture||\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe texture is blended with the destination based on its blend mode set with [[SDL_SetTextureBlendMode]]().\r\n\r\nThe texture color is affected based on its color modulation set by [[SDL_SetTextureColorMod]]().\r\n\r\nThe texture alpha is affected based on its alpha modulation set by [[SDL_SetTextureAlphaMod]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderCopy]]\r\n .[[SDL_SetTextureAlphaMod]]\r\n .[[SDL_SetTextureBlendMode]]\r\n .[[SDL_SetTextureColorMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderDrawLine",
      "Uri": "https://wiki.libsdl.org/SDL_RenderDrawLine",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:07.8093338-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderDrawLine =\r\nUse this function to draw a line on the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderDrawLine(SDL_Renderer* renderer,\r\n                       int           x1,\r\n                       int           y1,\r\n                       int           x2,\r\n                       int           y2)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''x1'''||the x coordinate of the start point||\r\n||'''y1'''||the y coordinate of the start point||\r\n||'''x2'''||the x coordinate of the end point||\r\n||'''y2'''||the y coordinate of the end point||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    if (SDL_Init(SDL_INIT_VIDEO) == 0) {\r\n        SDL_Window* window = NULL;\r\n        SDL_Renderer* renderer = NULL;\r\n\r\n        if (SDL_CreateWindowAndRenderer(640, 480, 0, &window, &renderer) == 0) {\r\n            SDL_bool done = SDL_FALSE;\r\n\r\n            while (!done) {\r\n                SDL_Event event;\r\n\r\n                SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);\r\n                SDL_RenderClear(renderer);\r\n\r\n                SDL_SetRenderDrawColor(renderer, 255, 255, 255, SDL_ALPHA_OPAQUE);\r\n                SDL_RenderDrawLine(renderer, 320, 200, 300, 240);\r\n                SDL_RenderDrawLine(renderer, 300, 240, 340, 240);\r\n                SDL_RenderDrawLine(renderer, 340, 240, 320, 200);\r\n                SDL_RenderPresent(renderer);\r\n\r\n                while (SDL_PollEvent(&event)) {\r\n                    if (event.type == SDL_QUIT) {\r\n                        done = SDL_TRUE;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (renderer) {\r\n            SDL_DestroyRenderer(renderer);\r\n        }\r\n        if (window) {\r\n            SDL_DestroyWindow(window);\r\n        }\r\n    }\r\n    SDL_Quit();\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_RenderDrawLine]]() draws the line to include both end points.  If you want to draw multiple, connecting lines use [[SDL_RenderDrawLines]]() instead.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderDrawLines",
      "Uri": "https://wiki.libsdl.org/SDL_RenderDrawLines",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:08.2072653-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderDrawLines =\r\nUse this function to draw a series of connected lines on the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderDrawLines(SDL_Renderer*    renderer,\r\n                        const SDL_Point* points,\r\n                        int              count)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''points'''||an array of [[SDL_Point]] structures representing points along the lines||\r\n||'''count'''||the number of points, drawing count-1 lines||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\n#define POINTS_COUNT 4\r\n\r\nstatic SDL_Point points[POINTS_COUNT] = {\r\n    {320, 200},\r\n    {300, 240},\r\n    {340, 240},\r\n    {320, 200}\r\n};\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    if (SDL_Init(SDL_INIT_VIDEO) == 0) {\r\n        SDL_Window* window = NULL;\r\n        SDL_Renderer* renderer = NULL;\r\n\r\n        if (SDL_CreateWindowAndRenderer(640, 480, 0, &window, &renderer) == 0) {\r\n            SDL_bool done = SDL_FALSE;\r\n\r\n            while (!done) {\r\n                SDL_Event event;\r\n\r\n                SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);\r\n                SDL_RenderClear(renderer);\r\n\r\n                SDL_SetRenderDrawColor(renderer, 255, 255, 255, SDL_ALPHA_OPAQUE);\r\n                SDL_RenderDrawLines(renderer, points, POINTS_COUNT);\r\n                SDL_RenderPresent(renderer);\r\n\r\n                while (SDL_PollEvent(&event)) {\r\n                    if (event.type == SDL_QUIT) {\r\n                        done = SDL_TRUE;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (renderer) {\r\n            SDL_DestroyRenderer(renderer);\r\n        }\r\n        if (window) {\r\n            SDL_DestroyWindow(window);\r\n        }\r\n    }\r\n    SDL_Quit();\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderDrawPoint",
      "Uri": "https://wiki.libsdl.org/SDL_RenderDrawPoint",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:13.7580104-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderDrawPoint =\r\nUse this function to draw a point on the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderDrawPoint(SDL_Renderer* renderer,\r\n                        int           x, \r\n                        int           y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''x'''||the x coordinate of the point||\r\n||'''y'''||the y coordinate of the point||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n[[SDL_RenderDrawPoint]]() draws a single point.  If you want to draw multiple, use [[SDL_RenderDrawPoints]]() instead.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderDrawPoints",
      "Uri": "https://wiki.libsdl.org/SDL_RenderDrawPoints",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:14.1263626-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderDrawPoints =\r\nUse this function to draw multiple points on the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderDrawPoints(SDL_Renderer*    renderer,\r\n                         const SDL_Point* points,\r\n                         int              count)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''points'''||an array of [[SDL_Point]] structures that represent the points to draw||\r\n||'''count'''||the number of points to draw||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderDrawRect",
      "Uri": "https://wiki.libsdl.org/SDL_RenderDrawRect",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:14.5847729-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderDrawRect =\r\nUse this function to draw a rectangle on the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderDrawRect(SDL_Renderer*   renderer,\r\n                       const SDL_Rect* rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''rect'''||an [[SDL_Rect]] structure representing the rectangle to draw, or NULL to outline the entire rendering target||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderDrawRects",
      "Uri": "https://wiki.libsdl.org/SDL_RenderDrawRects",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:14.9746605-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderDrawRects =\r\nUse this function to draw some number of rectangles on the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderDrawRects(SDL_Renderer*   renderer,\r\n                        const SDL_Rect* rects,\r\n                        int             count)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''rects'''||an array of [[SDL_Rect]] structures representing the rectangles to be drawn||\r\n||'''count'''||the number of rectangles||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderFillRect",
      "Uri": "https://wiki.libsdl.org/SDL_RenderFillRect",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:15.6983367-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderFillRect =\r\nUse this function to fill a rectangle on the current rendering target with the drawing color.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderFillRect(SDL_Renderer*   renderer,\r\n                       const SDL_Rect* rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''rect'''||the [[SDL_Rect]] structure representing the rectangle to fill, or NULL for the entire rendering target||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe current drawing color is set by [[SDL_SetRenderDrawColor]](), and the color's alpha value is ignored unless blending is enabled with the appropriate call to [[SDL_SetRenderDrawBlendMode]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_RenderPresent]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderFillRects",
      "Uri": "https://wiki.libsdl.org/SDL_RenderFillRects",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:56.5365652-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderFillRects =\r\nUse this function to fill some number of rectangles on the current rendering target with the drawing color.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderFillRects(SDL_Renderer*   renderer,\r\n                        const SDL_Rect* rects,\r\n                        int             count)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''rects'''||an array of [[SDL_Rect]] structures representing the rectangles to be filled||\r\n||'''count'''||the number of rectangles||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderPresent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderGetClipRect",
      "Uri": "https://wiki.libsdl.org/SDL_RenderGetClipRect",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:48:56.9227225-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderGetClipRect =\r\nUse this function to get the clip rectangle for the current target.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_RenderGetClipRect(SDL_Renderer* renderer,\r\n                           SDL_Rect*     rect)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context from which clip rectangle should be queried||\r\n||'''rect'''||an [[SDL_Rect]] structure filled in with the current clipping area or an empty rectangle if clipping is disabled||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderIsClipEnabled]]\r\n .[[SDL_RenderSetClipRect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderGetD3D9Device",
      "Uri": "https://wiki.libsdl.org/SDL_RenderGetD3D9Device",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:49:02.3301707-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderGetD3D9Device =\r\nUse this function to get the D3D device associated with a renderer.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nIDirect3DDevice9* SDL_RenderGetD3D9Device(SDL_Renderer* renderer)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the renderer from which to get the associated D3D device||\r\n\r\n\r\n== Return Value ==\r\nReturns the D3D device associated with given renderer or NULL if it is not a D3D renderer; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nOnce you are done using the device, you should release it to avoid a resource leak.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RenderGetIntegerScale",
      "Uri": "https://wiki.libsdl.org/SDL_RenderGetIntegerScale",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:02.7311148-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderGetIntegerScale =\r\nUse this function to get whether integer scales are forced for resolution-independent rendering.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_RenderGetIntegerScale(SDL_Renderer* renderer)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the renderer from which integer scaling should be queried||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if integer scales are forced or SDL_FALSE if not and on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderSetIntegerScale]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RenderGetLogicalSize",
      "Uri": "https://wiki.libsdl.org/SDL_RenderGetLogicalSize",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:03.2909003-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderGetLogicalSize =\r\nUse this function to get device independent resolution for rendering.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_RenderGetLogicalSize(SDL_Renderer* renderer,\r\n                              int*          w,\r\n                              int*          h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||a rendering context||\r\n||'''w'''||an int to be filled with the width||\r\n||'''h'''||an int to be filled with the height||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nIf this function is called on an SDL_Renderer who never had its logical size set by [[SDL_RenderSetLogicalSize]](), this function sets both '''w''' and '''h''' to 0.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderSetLogicalSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RenderGetScale",
      "Uri": "https://wiki.libsdl.org/SDL_RenderGetScale",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:03.8488469-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderGetScale =\r\nUse this function to get the drawing scale for the current target.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_RenderGetScale(SDL_Renderer* renderer,\r\n                        float*        scaleX,\r\n                        float*        scaleY)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the renderer from which drawing scale should be queried||\r\n||'''scaleX'''||a pointer filled in with the horizontal scaling factor||\r\n||'''scaleY'''||a pointer filled in with the vertical scaling factor||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderSetScale]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RenderGetViewport",
      "Uri": "https://wiki.libsdl.org/SDL_RenderGetViewport",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:04.3311592-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RenderGetViewport =\r\nUse this function to get the drawing area for the current target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_RenderGetViewport(SDL_Renderer* renderer,\r\n                           SDL_Rect*     rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''rect'''||an [[SDL_Rect]] structure filled in with the current drawing area||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderSetViewport]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderIsClipEnabled",
      "Uri": "https://wiki.libsdl.org/SDL_RenderIsClipEnabled",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:04.7426-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderIsClipEnabled =\r\nUse this function to get whether clipping is enabled on the given renderer.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_RenderIsClipEnabled(SDL_Renderer* renderer)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the renderer from which clip state should be queried||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if clipping is enabled or SDL_FALSE if not; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderGetClipRect]]\r\n .[[SDL_RenderSetClipRect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RenderPresent",
      "Uri": "https://wiki.libsdl.org/SDL_RenderPresent",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:10.1650441-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderPresent =\r\nUse this function to update the screen with any rendering performed since the previous call.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_RenderPresent(SDL_Renderer* renderer)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n\r\n== Code Examples ==\r\n<<Include(SDL_RenderClear, , , from=\"== Code Examples ==\", to=\"== Remarks ==\")>>\r\n\r\n== Remarks ==\r\nSDL's rendering functions operate on a backbuffer; that is, calling a rendering function such as [[SDL_RenderDrawLine]]() does not directly put a line on the screen, but rather updates the backbuffer. As such, you compose your entire scene and ''present'' the composed backbuffer to the screen as a complete picture.\r\n\r\nTherefore, when using SDL's rendering API, one does all drawing intended for the frame, and then calls this function once per frame to present the final drawing to the user.\r\n\r\nThe backbuffer should be considered invalidated after each present; do not assume that previous contents will exist between frames. You are strongly encouraged to call [[SDL_RenderClear]]() to initialize the backbuffer before starting each new frame's drawing, even if you plan to overwrite every pixel.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderClear]]\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n .[[SDL_SetRenderDrawBlendMode]]\r\n .[[SDL_SetRenderDrawColor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderReadPixels",
      "Uri": "https://wiki.libsdl.org/SDL_RenderReadPixels",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:10.9771835-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RenderReadPixels =\r\nUse this function to read pixels from the current rendering target to an array of pixels.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderReadPixels(SDL_Renderer*   renderer,\r\n                         const SDL_Rect* rect,\r\n                         Uint32          format,\r\n                         void*           pixels,\r\n                         int             pitch)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''rect'''||an [[SDL_Rect]] structure representing the area to read, or NULL for the entire render target||\r\n||'''format'''||the desired format of the pixel data, or 0 to use the format of the rendering target; see [[#format|Remarks]] for details||\r\n||'''pixels'''||a pointer to the pixel data to copy into||\r\n||'''pitch'''||the pitch of the '''pixels''' parameter; see [[#pitch|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n/!\\ WARNING: This is a very slow operation, and should not be used frequently.\r\n\r\n<<Anchor(pitch)>> '''pitch''' specifies the number of bytes between rows in the destination '''pixels''' data.\r\nThis allows you to write to a subrectangle or have padded rows in the destination.\r\nGenerally, '''pitch''' should equal the ''number of pixels per row'' in the '''pixels''' data times the ''number of bytes per pixel'', but it might contain additional padding (for example, 24bit RGB Windows Bitmap data pads all rows to multiples of 4 bytes).\r\n\r\n<<Anchor(format)>> '''format''' may be one of the following:\r\n<<Include(SDL_PixelFormatEnum, , , from=\"=== Pixel Format Values ===\", to=\"== Code Examples ==\")>>\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderSetClipRect",
      "Uri": "https://wiki.libsdl.org/SDL_RenderSetClipRect",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:11.7911491-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderSetClipRect =\r\nUse this function to set the clip rectangle for rendering on the specified target.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderSetClipRect(SDL_Renderer*   renderer,\r\n                          const SDL_Rect* rect)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context for which clip rectangle should be set||\r\n||'''rect'''||an [[SDL_Rect]] structure representing the clip area, or NULL to disable clipping||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderGetClipRect]]\r\n .[[SDL_RenderIsClipEnabled]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderSetIntegerScale",
      "Uri": "https://wiki.libsdl.org/SDL_RenderSetIntegerScale",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:12.1515852-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderSetIntegerScale =\r\nUse this function to set whether to force integer scales for resolution-independent rendering.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderSetIntegerScale(SDL_Renderer* renderer,\r\n                              SDL_bool      enable)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the renderer for which integer scaling should be set||\r\n||'''enable'''||enable or disable the integer scaling for rendering||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function restricts the logical viewport to integer values - that is, when a resolution is between two multiples of a logical size, the viewport size is rounded down to the lower multiple.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderGetIntegerScale]]\r\n .[[SDL_RenderSetLogicalSize]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RenderSetLogicalSize",
      "Uri": "https://wiki.libsdl.org/SDL_RenderSetLogicalSize",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:52.9874661-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderSetLogicalSize =\r\nUse this function to set a device independent resolution for rendering.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderSetLogicalSize(SDL_Renderer* renderer,\r\n                             int           w,\r\n                             int           h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the renderer for which resolution should be set||\r\n||'''w'''||the width of the logical resolution||\r\n||'''h'''||the height of the logical resolution||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderGetLogicalSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderSetScale",
      "Uri": "https://wiki.libsdl.org/SDL_RenderSetScale",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:53.3830739-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderSetScale =\r\nUse this function to set the drawing scale for rendering on the current target.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderSetScale(SDL_Renderer* renderer,\r\n                       float         scaleX,\r\n                       float         scaleY)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||a rendering context||\r\n||'''scaleX'''||the horizontal scaling factor||\r\n||'''scaleY'''||the vertical scaling factor||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe drawing coordinates are scaled by the x/y scaling factors before they are used by the renderer. This allows resolution independent drawing with a single coordinate system.\r\n\r\nIf this results in scaling or subpixel drawing by the rendering backend, it will be handled using the appropriate quality hints. For best results use integer scaling factors.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderGetScale]]\r\n .[[SDL_RenderSetLogicalSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_RenderSetViewport",
      "Uri": "https://wiki.libsdl.org/SDL_RenderSetViewport",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:58.7828562-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_RenderSetViewport =\r\nUse this function to set the drawing area for rendering on the current target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_RenderSetViewport(SDL_Renderer*   renderer,\r\n                          const SDL_Rect* rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''rect'''||the [[SDL_Rect]] structure representing the drawing area, or NULL to set the viewport to the entire target||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen the window is resized, the current viewport is automatically centered within the new window size.\r\n\r\n== Related Functions ==\r\n .[[SDL_RenderGetViewport]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_RenderTargetSupported",
      "Uri": "https://wiki.libsdl.org/SDL_RenderTargetSupported",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:49:59.2790444-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_RenderTargetSupported =\r\nUse this function to determine whether a window supports the use of render targets.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_RenderTargetSupported(SDL_Renderer* renderer)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the renderer that will be checked||\r\n\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if supported or SDL_FALSE if not.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_SetRenderTarget]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_ResetAssertionReport",
      "Uri": "https://wiki.libsdl.org/SDL_ResetAssertionReport",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T14:49:59.9577167-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ResetAssertionReport =\r\nUse this function to clear the list of all assertion failures.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_ResetAssertionReport(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_assert(1+1 == 3);  // trigger an assertion.\r\nprintf(\"%p\\n\", SDL_GetAssertionReport());  // not NULL.\r\nSDL_ResetAssertionReport();\r\nprintf(\"%p\\n\", SDL_GetAssertionReport());  // NULL.\r\n}}}\r\n\r\n== Remarks ==\r\nThis function will clear the list of all assertions triggered up to that point. Immediately following this call, [[SDL_GetAssertionReport]] will return no items. In addition, any previously-triggered assertions will be reset to a trigger_count of zero, and their always_ignore state will be false.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAssertionReport]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_RestoreWindow",
      "Uri": "https://wiki.libsdl.org/SDL_RestoreWindow",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:50:00.3538485-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_RestoreWindow =\r\nUse this function to restore the size and position of a minimized or maximized window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_RestoreWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window''' ||the window to restore||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n . [[SDL_MaximizeWindow]]\r\n . [[SDL_MinimizeWindow]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryVideo\r\n"
    },
    {
      "Name": "SDL_SaveAllDollarTemplates",
      "Uri": "https://wiki.libsdl.org/SDL_SaveAllDollarTemplates",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:50:00.731308-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SaveAllDollarTemplates =\r\nUse this function to save all currently loaded Dollar Gesture templates.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SaveAllDollarTemplates(SDL_RWops* dst)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''dst'''||a [[SDL_RWops]] to save to||\r\n\r\n== Return Value ==\r\nReturns the number of saved templates on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadDollarTemplates]]\r\n .[[SDL_SaveDollarTemplate]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SaveBMP",
      "Uri": "https://wiki.libsdl.org/SDL_SaveBMP",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:50:01.1694784-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SaveBMP =\r\nUse this function to save a surface to a BMP file.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SaveBMP(SDL_Surface* surface,\r\n                const char*  file)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure containing the image to be saved||\r\n||'''file'''||the file to be saved to||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n    ...\r\n\r\n    SDL_Surface *sfc = ...\r\n\r\n    ...\r\n  \r\n    if(SDL_SaveBMP(sfc, \"somefile.bmp\") != 0)\r\n    {\r\n        // Error saving bitmap\r\n        printf(\"SDL_SaveBMP failed: %s\\n\", SDL_GetError());\r\n    }\r\n}}}\r\n\r\n== Remarks ==\r\nSurfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the BMP directly.  Other RGB formats with 8-bit or higher get converted to a 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit surface before they are saved.  YUV and paletted 1-bit and 4-bit formats are not supported.\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadBMP]]\r\n .[[SDL_SaveBMP_RW]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SaveBMP_RW",
      "Uri": "https://wiki.libsdl.org/SDL_SaveBMP_RW",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:50:06.6203678-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SaveBMP_RW =\r\nUse this function to save a surface to a seekable SDL data stream (memory or file) in BMP format.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SaveBMP_RW(SDL_Surface* surface,\r\n                   SDL_RWops*   dst,\r\n                   int          freedst)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure containing the image to be saved||\r\n||'''dst'''||a data stream to save to||\r\n||'''freedst'''||non-zero to close the stream after being written||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSurfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the BMP directly.  Other RGB formats with 8-bit or higher get converted to a 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit surface before they are saved.  YUV and paletted 1-bit and 4-bit formats are not supported.\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadBMP_RW]]\r\n .[[SDL_SaveBMP]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SaveDollarTemplate",
      "Uri": "https://wiki.libsdl.org/SDL_SaveDollarTemplate",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:50:06.9889325-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SaveDollarTemplate =\r\nUse this function to save a currently loaded Dollar Gesture template.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SaveDollarTemplate(SDL_GestureID gestureId,\r\n                           SDL_RWops*    dst)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''gestureId'''||a gesture id||\r\n||'''dst'''||a [[SDL_RWops]] to save to||\r\n\r\n\r\n== Return Value ==\r\nReturns 1 on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadDollarTemplates]]\r\n .[[SDL_SaveAllDollarTemplates]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SemPost",
      "Uri": "https://wiki.libsdl.org/SDL_SemPost",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:50:07.3657827-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SemPost =\r\nUse this function to atomically increment a semaphore's value and wake waiting threads.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SemPost(SDL_sem* sem)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''sem'''||the semaphore to increment||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure ; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateSemaphore, , , from=\"## Begin Semaphore Example\", to=\"## End Semaphore Example\")>>\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSemaphore]]\r\n .[[SDL_DestroySemaphore]]\r\n .[[SDL_SemTryWait]]\r\n .[[SDL_SemValue]]\r\n .[[SDL_SemWait]]\r\n .[[SDL_SemWaitTimeout]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_SemTryWait",
      "Uri": "https://wiki.libsdl.org/SDL_SemTryWait",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:51:31.0487927-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SemTryWait =\r\nUse this function to see if a semaphore has a positive value and decrement it if it does.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SemTryWait(SDL_sem* sem)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''sem'''||the semaphore to wait on||\r\n\r\n== Return Value ==\r\nReturns 0 if the wait succeeds, SDL_MUTEX_TIMEDOUT if the wait would block, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_atomic_t done;\r\nSDL_sem *sem;\r\n\r\nSDL_AtomicSet(&done, 0);\r\nsem = SDL_CreateSemaphore(0);\r\n.\r\n.\r\nThread A:\r\n    while (!SDL_AtomicGet(&done)) {\r\n        add_data_to_queue();\r\n        SDL_SemPost(sem);\r\n    }\r\n\r\nThread B:\r\n    while (!SDL_AtomicGet(&done)) {\r\n        if (SDL_SemTryWait(sem) == 0 && data_available()) {\r\n            get_data_from_queue();\r\n        }\r\n        ... do other processing\r\n    }\r\n.\r\n.\r\nSDL_AtomicSet(&done, 1);\r\nSDL_SemPost(sem);\r\nwait_for_threads();\r\nSDL_DestroySemaphore(sem);\r\n}}}\r\n\r\n== Remarks ==\r\nThis function checks to see if the semaphore pointed to by '''sem''' has a positive value and atomically decrements the semaphore value if it does.  If the semaphore doesn't have a positive value, the function immediately returns SDL_MUTEX_TIMEDOUT.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSemaphore]]\r\n .[[SDL_DestroySemaphore]]\r\n .[[SDL_SemPost]]\r\n .[[SDL_SemValue]]\r\n .[[SDL_SemWait]]\r\n .[[SDL_SemWaitTimeout]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_SemValue",
      "Uri": "https://wiki.libsdl.org/SDL_SemValue",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:51:31.4258429-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SemValue =\r\nUse this function to get the current value of a semaphore.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_SemValue(SDL_sem* sem)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''sem'''||the semaphore to query||\r\n\r\n== Return Value ==\r\nReturns the current value of the semaphore.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSemaphore]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_SemWait",
      "Uri": "https://wiki.libsdl.org/SDL_SemWait",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:51:31.820618-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SemWait =\r\nUse this function to wait until a semaphore has a positive value and then decrements it.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SemWait(SDL_sem* sem)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''sem'''||the semaphore wait on||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateSemaphore, , , from=\"## Begin Semaphore Example\", to=\"## End Semaphore Example\")>>\r\n\r\n== Remarks ==\r\nThis function suspends the calling thread until either the semaphore pointed to by '''sem''' has a positive value or the call is interrupted by a signal or error. If the call is successful it will atomically decrement the semaphore value.\r\n\r\nThis function is the equivalent of calling [[SDL_SemWaitTimeout]]() with a time length of SDL_MUTEX_MAXWAIT.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSemaphore]]\r\n .[[SDL_DestroySemaphore]]\r\n .[[SDL_SemPost]]\r\n .[[SDL_SemTryWait]]\r\n .[[SDL_SemValue]]\r\n .[[SDL_SemWait]]\r\n .[[SDL_SemWaitTimeout]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_SemWaitTimeout",
      "Uri": "https://wiki.libsdl.org/SDL_SemWaitTimeout",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T14:51:37.2616724-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SemWaitTimeout =\r\nUse this function to wait until a semaphore has a positive value and then decrements it.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SemWaitTimeout(SDL_sem* sem,\r\n                       Uint32   ms)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''sem'''||the semaphore to wait on||\r\n||'''ms'''||the length of the timeout in milliseconds||\r\n\r\n== Return Value ==\r\nReturns 0 if the wait succeeds, SDL_MUTEX_TIMEDOUT if the wait does not succeed in the allotted time, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_atomic_t done;\r\nSDL_sem *sem;\r\n\r\nSDL_AtomicSet(&done, 0);\r\nsem = SDL_CreateSemaphore(0);\r\n.\r\n.\r\nThread A:\r\n    while (!SDL_AtomicGet(&done)) {\r\n        add_data_to_queue();\r\n        SDL_SemPost(sem);\r\n    }\r\n\r\nThread B:\r\n    const Uint32 timeout = 1000; /* wake up every second */\r\n\r\n    while (!SDL_AtomicGet(&done)) {\r\n        if (SDL_SemWaitTimeout(sem, timeout) == 0 && data_available()) {\r\n            get_data_from_queue();\r\n        }\r\n        ... do other processing\r\n    }\r\n.\r\n.\r\nSDL_AtomicSet(&done, 1);\r\nSDL_SemPost(sem);\r\nwait_for_threads();\r\nSDL_DestroySemaphore(sem);\r\n}}}\r\n\r\n== Remarks ==\r\nThis function suspends the calling thread until either the semaphore pointed to by '''sem''' has a positive value, the call is interrupted by a signal or error, or the specified time has elapsed. If the call is successful it will atomically decrement the semaphore value.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateSemaphore]]\r\n .[[SDL_DestroySemaphore]]\r\n .[[SDL_SemPost]]\r\n .[[SDL_SemTryWait]]\r\n .[[SDL_SemValue]]\r\n .[[SDL_SemWait]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_SetAssertionHandler",
      "Uri": "https://wiki.libsdl.org/SDL_SetAssertionHandler",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T14:51:37.6628884-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetAssertionHandler =\r\nUse this function to set an application-defined assertion handler.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetAssertionHandler(SDL_AssertionHandler handler,\r\n                             void*                userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''handler'''||the function to call when an assertion fails or NULL for the default handler; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||a pointer that is passed to '''handler'''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function allows an application to show its own assertion UI and/or force the response to an assertion failure. If the application doesn't provide this, SDL will try to do the right thing, popping up a system-specific GUI dialog, and probably minimizing any fullscreen windows.\r\n\r\nThe function prototype for '''handler''' is:\r\n{{{#!highlight cpp\r\nSDL_AssertState YourAssertionHandler(const SDL_AssertData* data,\r\n                                     void*                 userdata)\r\n}}}\r\n . where `YourAssertionHandler` is the name of your function and its parameters are:\r\n ||`data`||a pointer to the [[SDL_AssertData]] structure corresponding to the current assertion||\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_SetAssertionHandler]]()||\r\n\r\n .This callback should return an [[SDL_AssertState]] value indicating how to handle the assertion failure.\r\n\r\nThis callback may fire from any thread, but it runs wrapped in a mutex, so it will only fire from one thread at a time.\r\n\r\nThis callback is NOT reset to SDL's internal handler upon [[SDL_Quit]]()!\r\n\r\n== Related Functions ==\r\n .[[SDL_GetAssertionHandler]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_SetClipRect",
      "Uri": "https://wiki.libsdl.org/SDL_SetClipRect",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:51:38.0423498-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetClipRect =\r\nUse this function to set the clipping rectangle for a surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_SetClipRect(SDL_Surface*    surface,\r\n                         const SDL_Rect* rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to be clipped||\r\n||'''rect'''||the [[SDL_Rect]] structure representing the clipping rectangle, or NULL to disable clipping||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the rectangle intersects the surface, otherwise SDL_FALSE and blits will be completely clipped.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen '''surface''' is the destination of a blit, only the area within the clip rectangle is drawn into.\r\n\r\nNote that blits are automatically clipped to the edges of the source and destination surfaces.\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]]\r\n .[[SDL_GetClipRect]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SetClipboardText",
      "Uri": "https://wiki.libsdl.org/SDL_SetClipboardText",
      "Categories": [
        "CategoryAPI",
        "CategoryClipboard"
      ],
      "LastUpdate": "2021-01-16T14:51:38.5125978-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetClipboardText =\r\nUse this function to put UTF-8 text into the clipboard.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetClipboardText(const char* text)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''text'''||the text to store in the clipboard||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetClipboardText]]\r\n .[[SDL_HasClipboardText]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryClipboard]]\r\n"
    },
    {
      "Name": "SDL_SetColorKey",
      "Uri": "https://wiki.libsdl.org/SDL_SetColorKey",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:51:38.9344187-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetColorKey =\r\nUse this function to set the color key (transparent pixel) in a surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetColorKey(SDL_Surface* surface,\r\n                    int          flag,\r\n                    Uint32       key)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to update||\r\n||'''flag'''||SDL_TRUE to enable color key, SDL_FALSE to disable color key||\r\n||'''key'''||the transparent pixel||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe color key defines a pixel value that will be treated as transparent in a blit.  It is a pixel of the format used by the surface, as generated by [[SDL_MapRGB]]().\r\n\r\n\r\nRLE acceleration can substantially speed up blitting of images with large horizontal runs of transparent pixels.  See [[SDL_SetSurfaceRLE]]() for details.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]] \r\n .[[SDL_GetColorKey]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SetCursor",
      "Uri": "https://wiki.libsdl.org/SDL_SetCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:51:39.7072498-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_SetCursor =\r\nUse this function to set the active cursor.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetCursor(SDL_Cursor* cursor)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''cursor'''||a cursor to make active; see [[#Remarks|Remarks]] for details||\r\n\r\n== Code Examples ==\r\n\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function sets the currently active cursor to the specified one. If the cursor is currently visible, the change will be immediately represented on the display. [[SDL_SetCursor]](NULL) can be used to force cursor redraw, if this is desired for any reason.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateCursor]]\r\n .[[SDL_GetCursor]]\r\n .[[SDL_ShowCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_SetError",
      "Uri": "https://wiki.libsdl.org/SDL_SetError",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:51:45.0788451-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_SetError =\r\nUse this function to set the SDL error message.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetError(const char* fmt,\r\n                 ...)\r\n}}}\r\n== Function Parameters ==\r\n||'''fmt''' ||a printf() style message format string ||\r\n||'''...''' ||additional parameters matching % tokens in the '''fmt''' string, if any ||\r\n\r\n== Return Value ==\r\nReturns always -1.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_SetError(\"Something unexpected happened!\");\r\n}}}\r\n{{{#!highlight cpp\r\nint errorCode = 0;\r\n...\r\nerrorCode = -37;\r\n...\r\nif (errorCode < 0)\r\n    SDL_SetError(\"Something unexpected happened: Error Code %d\", errorCode);\r\n}}}\r\n== Remarks ==\r\nCalling this function will replace any previous error message that was set.\r\n\r\n== Related Functions ==\r\n . [[SDL_ClearError]]\r\n . [[SDL_GetError]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryError\r\n"
    },
    {
      "Name": "SDL_SetEventFilter",
      "Uri": "https://wiki.libsdl.org/SDL_SetEventFilter",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T14:51:46.2205734-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetEventFilter =\r\nUse this function to set up a filter to process all events before they change internal state and are posted to the internal event queue.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetEventFilter(SDL_EventFilter filter,\r\n                        void*           userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''filter'''||the function to call when an event happens; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||a pointer that is passed to '''filter'''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n##The following is included on SDL_AddEventWatch and SDL_DelEventWatch.  Any changes between these comments will be reflected on those pages.  Please use caution when editing.  Start Include here.\r\n\r\nThe function prototype for '''filter''' is:\r\n{{{#!highlight cpp\r\nint YourEventFilter(void*      userdata,\r\n                    SDL_Event* event)\r\n}}}\r\n##End Include here\r\n . where `YourEventFilter` is the name of your function and its parameters are:\r\n ||`userdata`||what was passed as '''userdata''' to [[SDL_SetEventFilter]]()||\r\n ||`event`||the event that triggered the callback||\r\n\r\n . If '''filter''' returns 1, then the event will be added to the internal queue.  If it returns 0, then the event will be dropped from the queue, but the internal state will still be updated.  This allows selective filtering of dynamically arriving events.\r\n\r\n/!\\ WARNING: Be very careful of what you do in the event filter function, as it may run in a different thread!\r\n\r\nIf the quit event is generated by an interrupt signal (e.g. Ctrl-C), it will be delivered to the application at the next event poll.\r\n\r\nNote: Disabled events never make it to the event filter function; see [[SDL_EventState]]().\r\n\r\nNote: If you just want to inspect events without filtering, you should use [[SDL_AddEventWatch]]() instead.\r\n\r\nNote: Events pushed onto the queue with [[SDL_PushEvent]]() get passed through the event filter, but events pushed onto the queue with [[SDL_PeepEvents]]() do not.\r\n\r\n== Related Functions ==\r\n .[[SDL_AddEventWatch]]\r\n .[[SDL_EventState]]\r\n .[[SDL_GetEventFilter]]\r\n .[[SDL_PeepEvents]]\r\n .[[SDL_PushEvent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_SetHint",
      "Uri": "https://wiki.libsdl.org/SDL_SetHint",
      "Categories": [
        "CategoryAPI",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:52:27.7071481-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetHint =\r\nUse this function to set a hint with normal priority.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_SetHint(const char* name,\r\n                     const char* value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''name'''||the hint to set; see the list of hints on [[CategoryHints#Hints|CategoryHints]] for details||\r\n||'''value'''||the value of the hint variable||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, \"1\");\r\n}}}\r\n\r\n== Remarks ==\r\nHints will not be set if there is an existing override hint or environment variable that takes precedence.  You can use [[SDL_SetHintWithPriority]]() to set the hint with override priority instead.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetHint]]\r\n .[[SDL_SetHintWithPriority]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_SetHintWithPriority",
      "Uri": "https://wiki.libsdl.org/SDL_SetHintWithPriority",
      "Categories": [
        "CategoryAPI",
        "CategoryHints"
      ],
      "LastUpdate": "2021-01-16T14:52:28.1298903-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetHintWithPriority =\r\nUse this function to set a hint with a specific priority.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_SetHintWithPriority(const char*      name,\r\n                                 const char*      value,\r\n                                 SDL_HintPriority priority)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''name'''||the hint to set; see the list of hints on [[CategoryHints#Hints|CategoryHints]] for details||\r\n||'''value'''||the value of the hint variable||\r\n||'''priority'''||the [[SDL_HintPriority]] level for the hint||\r\n\r\n== Return Value ==\r\nReturns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe priority controls the behavior when setting a hint that already has a value.  Hints will replace existing hints of their priority and lower.  Environment variables are considered to have override priority.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetHint]]\r\n .[[SDL_SetHint]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryHints]]\r\n"
    },
    {
      "Name": "SDL_SetMainReady",
      "Uri": "https://wiki.libsdl.org/SDL_SetMainReady",
      "Categories": [
        "CategoryAPI",
        "CategoryInit"
      ],
      "LastUpdate": "2021-01-16T14:52:28.7009274-06:00",
      "RawText": "## page was renamed from SDL_\r\n#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\"style=\"color:#FF0000;  ;text-align:center\">DRAFT ||\r\n\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n= SDL_SetMainReady =\r\nUse this function to circumvent failure of [[SDL_Init]]() when not using SDL_main() as an entry point.\r\n\r\n##Replace SDL_Function with the name of the function and ****** with a short description of the function according to the Style Guide, then delete this comment.\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetMainReady(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#define SDL_MAIN_HANDLED\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    SDL_SetMainReady();\r\n    SDL_Init(SDL_INIT_VIDEO);\r\n\r\n    ...\r\n\r\n    SDL_Quit();\r\n\r\n    return 0;\r\n}\r\n}}}\r\n== Remarks ==\r\nThis function is defined in SDL_main.h, along with the preprocessor rule to redefine main() as SDL_main().  Thus to ensure that your main() function will not be changed it is necessary to define SDL_MAIN_HANDLED before including SDL.h.\r\n\r\n== Related Functions ==\r\n . [[SDL_Init]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryInit]]\r\n"
    },
    {
      "Name": "SDL_SetModState",
      "Uri": "https://wiki.libsdl.org/SDL_SetModState",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:52:29.0867761-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_SetModState =\r\nUse this function to set the current key modifier state for the keyboard.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetModState(SDL_Keymod modstate)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''modstate'''||the desired [[SDL_Keymod]] for the keyboard||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe inverse of [[SDL_GetModState]](), [[SDL_SetModState]]() allows you to impose modifier key states on your application.  Simply pass your desired modifier states into '''modstate'''. This value may be a bitwise, OR'd combination of [[SDL_Keymod]] values.\r\n\r\nThis does not change the keyboard state, only the key modifier flags.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetModState]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_SetPaletteColors",
      "Uri": "https://wiki.libsdl.org/SDL_SetPaletteColors",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T14:52:34.5482051-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_SetPaletteColors =\r\nUse this function to set a range of colors in a palette.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetPaletteColors(SDL_Palette*     palette,\r\n                         const SDL_Color* colors,\r\n                         int              firstcolor,\r\n                         int              ncolors)\r\n}}}\r\n== Function Parameters ==\r\n||'''palette''' ||the [[SDL_Palette]] structure to modify ||\r\n||'''colors''' ||an array of [[SDL_Color]] structures to copy into the palette ||\r\n||'''firstcolor''' ||the index of the first palette entry to modify ||\r\n||'''ncolors''' ||the number of entries to modify ||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code if not all of the colors could be set; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocPalette]]\r\n .[[SDL_CreateRGBSurface]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryPixels\r\n"
    },
    {
      "Name": "SDL_SetPixelFormatPalette",
      "Uri": "https://wiki.libsdl.org/SDL_SetPixelFormatPalette",
      "Categories": [
        "CategoryAPI",
        "CategoryPixels"
      ],
      "LastUpdate": "2021-01-16T14:52:34.9775319-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetPixelFormatPalette =\r\nUse this function to set the palette for a pixel format structure.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetPixelFormatPalette(SDL_PixelFormat* format,\r\n                              SDL_Palette*     palette)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''format'''||the [[SDL_PixelFormat]] structure that will use the palette||\r\n||'''palette'''||the [[SDL_Palette]] structure that will be used||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_AllocPalette]]\r\n .[[SDL_FreePalette]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryPixels]]\r\n"
    },
    {
      "Name": "SDL_SetRelativeMouseMode",
      "Uri": "https://wiki.libsdl.org/SDL_SetRelativeMouseMode",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:52:35.4370845-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_SetRelativeMouseMode =\r\nUse this function to set relative mouse mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetRelativeMouseMode(SDL_bool enabled)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''enabled'''||whether or not to enable relative mode, SDL_TRUE for enabled relative mode||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\nIf relative mode is not supported this returns -1.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhile the mouse is in relative mode, the cursor is hidden, and the driver will try to report continuous motion in the current window. Only relative motion events will be delivered, the mouse position will not change.\r\n\r\nThis function will flush any pending mouse motion.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRelativeMouseMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_SetRenderDrawBlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_SetRenderDrawBlendMode",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:52:35.8660092-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetRenderDrawBlendMode =\r\nUse this function to set the blend mode used for drawing operations (Fill and Line).\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer,\r\n                               SDL_BlendMode blendMode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''blendMode'''||the [[SDL_BlendMode]] to use for blending; see [[#blendMode|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(blendMode)>> '''blendMode''' may be one of the following: <<Include(SDL_BlendMode, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRenderDrawBlendMode]]\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_SetRenderDrawColor",
      "Uri": "https://wiki.libsdl.org/SDL_SetRenderDrawColor",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:52:36.4122727-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetRenderDrawColor =\r\nUse this function to set the color used for drawing operations (Rect, Line and Clear).\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetRenderDrawColor(SDL_Renderer* renderer,\r\n                           Uint8         r,\r\n                           Uint8         g,\r\n                           Uint8         b,\r\n                           Uint8         a)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''r'''||the red value used to draw on the rendering target||\r\n||'''g'''||the green value used to draw on the rendering target||\r\n||'''b'''||the blue value used to draw on the rendering target||\r\n||'''a'''||the alpha value used to draw on the rendering target; usually SDL_ALPHA_OPAQUE (255). Use [[SDL_SetRenderDrawBlendMode]] to specify how the alpha channel is used||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\r\nSDL_Rect rectangle;\r\n\r\nrectangle.x = 0;\r\nrectangle.y = 0;\r\nrectangle.w = 50;\r\nrectangle.h = 50;\r\nSDL_RenderFillRect(renderer, &rectangle);\r\n}}}\r\n\r\n== Remarks ==\r\nUse this function to set the color for drawing or filling rectangles, lines, and points, and for [[SDL_RenderClear]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRenderDrawColor]]\r\n .[[SDL_RenderClear]]\r\n .[[SDL_RenderDrawLine]]\r\n .[[SDL_RenderDrawLines]]\r\n .[[SDL_RenderDrawPoint]]\r\n .[[SDL_RenderDrawPoints]]\r\n .[[SDL_RenderDrawRect]]\r\n .[[SDL_RenderDrawRects]]\r\n .[[SDL_RenderFillRect]]\r\n .[[SDL_RenderFillRects]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_SetRenderTarget",
      "Uri": "https://wiki.libsdl.org/SDL_SetRenderTarget",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:52:36.8606169-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetRenderTarget =\r\nUse this function to set a texture as the current rendering target.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetRenderTarget(SDL_Renderer* renderer,\r\n                        SDL_Texture*  texture)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''renderer'''||the rendering context||\r\n||'''texture'''||the targeted texture, which must be created with the [[SDL_TextureAccess|SDL_TEXTUREACCESS_TARGET]] flag, or NULL for the default render target||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nBefore using this function, you should check the SDL_RENDERER_TARGETTEXTURE bit in the flags of [[SDL_RendererInfo]] to see if render targets are supported.\r\n\r\nThe default render target is the window for which the renderer was created.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetRenderTarget]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_SetSurfaceAlphaMod",
      "Uri": "https://wiki.libsdl.org/SDL_SetSurfaceAlphaMod",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:53:22.9530396-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetSurfaceAlphaMod =\r\nUse this function to set an additional alpha value used in blit operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetSurfaceAlphaMod(SDL_Surface* surface,\r\n                           Uint8        alpha)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to update||\r\n||'''alpha'''||the alpha value multiplied into blit operations||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen this surface is blitted, during the blit operation the source alpha value is modulated by this alpha value according to the following formula:\r\n .`srcA = srcA * (alpha / 255)`\r\n\r\n== Related Functions ==\r\n .[[SDL_GetSurfaceAlphaMod]]\r\n .[[SDL_SetSurfaceColorMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SetSurfaceBlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_SetSurfaceBlendMode",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:53:23.4103009-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetSurfaceBlendMode =\r\nUse this function to set the blend mode used for blit operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetSurfaceBlendMode(SDL_Surface*  surface,\r\n                            SDL_BlendMode blendMode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to update||\r\n||'''blendMode'''||the [[SDL_BlendMode]] to use for blit blending; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''blendMode''' may be one of the following: <<Include(SDL_BlendMode, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\nTo copy a surface to another surface (or texture) without blending with the existing data, the blendmode of the SOURCE surface should be set to 'SDL_BLENDMODE_NONE'.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetSurfaceBlendMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SetSurfaceColorMod",
      "Uri": "https://wiki.libsdl.org/SDL_SetSurfaceColorMod",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:53:23.848567-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetSurfaceColorMod =\r\nUse this function to set an additional color value multiplied into blit operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetSurfaceColorMod(SDL_Surface* surface,\r\n                           Uint8        r,\r\n                           Uint8        g,\r\n                           Uint8        b)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to update||\r\n||'''r'''||the red color value multiplied into blit operations||\r\n||'''g'''||the green color value multiplied into blit operations||\r\n||'''b'''||the blue color value multiplied into blit operations||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen this surface is blitted, during the blit operation each source color channel is modulated by the appropriate color value according to the following formula:\r\n `srcC = srcC * (color / 255)`\r\n\r\n== Related Functions ==\r\n .[[SDL_GetSurfaceColorMod]]\r\n .[[SDL_SetSurfaceAlphaMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SetSurfacePalette",
      "Uri": "https://wiki.libsdl.org/SDL_SetSurfacePalette",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:53:24.2769989-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetSurfacePalette =\r\nUse this function to set the palette used by a surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetSurfacePalette(SDL_Surface* surface,\r\n                          SDL_Palette* palette)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to update||\r\n||'''palette'''||the [[SDL_Palette]] structure to use||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nA single palette can be shared with many surfaces.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SetSurfaceRLE",
      "Uri": "https://wiki.libsdl.org/SDL_SetSurfaceRLE",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T14:53:24.6800952-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetSurfaceRLE =\r\nUse this function to set the RLE acceleration hint for a surface.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetSurfaceRLE(SDL_Surface* surface,\r\n                      int          flag)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to optimize||\r\n||'''flag'''||0 to disable, non-zero to enable RLE acceleration||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf RLE is enabled, color key and alpha blending blits are much faster, but the surface must be locked before directly accessing the pixels. \r\n\r\n== Related Functions ==\r\n .[[SDL_BlitSurface]]\r\n .[[SDL_LockSurface]]\r\n .[[SDL_UnlockSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_SetTextInputRect",
      "Uri": "https://wiki.libsdl.org/SDL_SetTextInputRect",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:53:25.0794121-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_SetTextInputRect =\r\nUse this function to set the rectangle used to type Unicode text inputs.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetTextInputRect(SDL_Rect* rect)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''rect'''||the [[SDL_Rect]] structure representing the rectangle to receive text (ignored if NULL)||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThere is a [[Tutorials/TextInput|tutorial]].\r\n\r\n== Related Functions ==\r\n .[[SDL_StartTextInput]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_SetTextureAlphaMod",
      "Uri": "https://wiki.libsdl.org/SDL_SetTextureAlphaMod",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:53:30.5461669-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetTextureAlphaMod =\r\nUse this function to set an additional alpha value multiplied into render copy operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetTextureAlphaMod(SDL_Texture* texture,\r\n                           Uint8        alpha)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to update||\r\n||'''alpha'''||the source alpha value multiplied into copy operations||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen this texture is rendered, during the copy operation the source alpha value is modulated by this alpha value according to the following formula:\r\n `srcA = srcA * (alpha / 255)`\r\n\r\nAlpha modulation is not always supported by the renderer; it will return -1 if alpha modulation is not supported.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTextureAlphaMod]]\r\n .[[SDL_SetTextureColorMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_SetTextureBlendMode",
      "Uri": "https://wiki.libsdl.org/SDL_SetTextureBlendMode",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:53:30.9976682-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetTextureBlendMode =\r\nUse this function to set the blend mode for a texture, used by [[SDL_RenderCopy]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetTextureBlendMode(SDL_Texture*  texture,\r\n                            SDL_BlendMode blendMode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to update||\r\n||'''blendMode'''||the [[SDL_BlendMode]] to use for texture blending; see [[#blendMode|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(blendMode)>> '''blendMode''' may be one of the following:\r\n<<Include(SDL_BlendMode, , , from=\"== Values ==\", to=\"== Code Examples ==\")>>\r\n\r\nIf the blend mode is not supported, the closest supported mode is chosen and this function returns -1. \r\n\r\n== Related Functions ==\r\n .[[SDL_GetTextureBlendMode]]\r\n .[[SDL_RenderCopy]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_SetTextureColorMod",
      "Uri": "https://wiki.libsdl.org/SDL_SetTextureColorMod",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T14:53:31.4038488-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetTextureColorMod =\r\nUse this function to set an additional color value multiplied into render copy operations.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetTextureColorMod(SDL_Texture* texture,\r\n                           Uint8        r,\r\n                           Uint8        g,\r\n                           Uint8        b)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to update||\r\n||'''r'''||the red color value multiplied into copy operations||\r\n||'''g'''||the green color value multiplied into copy operations||\r\n||'''b'''||the blue color value multiplied into copy operations||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n...\r\nSDL_Texture* pTexture = SDL_CreateTextureFromSurface( renderer, loadedSurface );\r\nSDL_SetTextureColorMod( pTexture, 64, 64, 64 );\r\n...\r\n}}}\r\n\r\n== Remarks ==\r\nWhen this texture is rendered, during the copy operation each source color channel is modulated by the appropriate color value according to the following formula:\r\n `srcC = srcC * (color / 255)`\r\n\r\nColor modulation is not always supported by the renderer; it will return -1 if color modulation is not supported.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTextureColorMod]]\r\n .[[SDL_SetTextureAlphaMod]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_SetThreadPriority",
      "Uri": "https://wiki.libsdl.org/SDL_SetThreadPriority",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T14:54:12.3985882-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetThreadPriority =\r\nUse this function to set the priority for the current thread.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetThreadPriority(SDL_ThreadPriority priority)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''priority'''||the [[SDL_ThreadPriority]] to set; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''priority''' may be one of the following:\r\n<<Include(SDL_ThreadPriority, , , from=\"Start Include here.\", to=\"##End Include here.\")>>\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_SetWindowBordered",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowBordered",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:54:12.8774446-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowBordered =\r\nUse this function to set the border state of a window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowBordered(SDL_Window* window,\r\n                           SDL_bool    bordered)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window of which to change the border state||\r\n||'''bordered'''||SDL_FALSE to remove border, SDL_TRUE to add border||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis will add or remove the window's SDL_WINDOW_BORDERLESS flag and add or remove the border from the actual window. This is a no-op if the window's border already matches the requested state.\r\n\r\nYou can't change the border state of a fullscreen window.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowFlags]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowBrightness",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowBrightness",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:54:13.3290554-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetWindowBrightness =\r\nUse this function to set the brightness (gamma multiplier) for the display that owns a given window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowBrightness(SDL_Window* window,\r\n                            float       brightness)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window used to select the display whose brightness will be changed||\r\n||'''brightness'''||the brightness (gamma multiplier) value to set where 0.0 is completely dark and 1.0 is normal brightness||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nDespite the name and signature, this method sets the brightness of the entire display, not an individual window. A window is considered to be owned by the display that contains the window's center pixel. (The index of this display can be retrieved using [[SDL_GetWindowDisplayIndex]]().) The brightness set will not follow the window if it is moved to another display.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowBrightness]]\r\n .[[SDL_SetWindowGammaRamp]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowData",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowData",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:54:18.9950116-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetWindowData =\r\nUse this function to associate an arbitrary named pointer with a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_SetWindowData(SDL_Window* window,\r\n                        const char* name,\r\n                        void*       userdata)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to associate with the pointer||\r\n||'''name'''||the name of the pointer||\r\n||'''userdata'''||the associated pointer||\r\n\r\n== Return Value ==\r\nReturns the previous value associated with '''name'''.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''name''' is case-sensitive.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowData]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowDisplayMode",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowDisplayMode",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:54:20.0335033-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetWindowDisplayMode =\r\nUse this function to set the display mode to use when a window is visible at fullscreen.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowDisplayMode(SDL_Window*            window,\r\n                             const SDL_DisplayMode* mode)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to affect||\r\n||'''mode'''||the [[SDL_DisplayMode]] structure representing the mode to use, or NULL to use the window's dimensions and the desktop's format and refresh rate||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis only affects the display mode used when the window is fullscreen. To change the window size when the window is not fullscreen, use [[SDL_SetWindowSize]]().\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowDisplayMode]]\r\n .[[SDL_SetWindowFullscreen]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowFullscreen",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowFullscreen",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:54:20.6629464-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetWindowFullscreen =\r\nUse this function to set a window's fullscreen state.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowFullscreen(SDL_Window* window,\r\n                            Uint32      flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to change||\r\n||'''flags'''||SDL_WINDOW_FULLSCREEN, SDL_WINDOW_FULLSCREEN_DESKTOP or 0; see [[#Remarks|Remarks]] for details||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n'''flags''' may be SDL_WINDOW_FULLSCREEN, for \"real\" fullscreen with a videomode change; SDL_WINDOW_FULLSCREEN_DESKTOP for \"fake\" fullscreen that takes the size of the desktop; and 0 for windowed mode.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowDisplayMode]]\r\n .[[SDL_SetWindowDisplayMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowGammaRamp",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowGammaRamp",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:54:21.9142362-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetWindowGammaRamp =\r\nUse this function to set the gamma ramp for the display that owns a given window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowGammaRamp(SDL_Window*   window,\r\n                           const Uint16* red,\r\n                           const Uint16* green,\r\n                           const Uint16* blue)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window used to select the display whose gamma ramp will be changed||\r\n||'''red'''||a 256 element array of 16-bit quantities representing the translation table for the red channel, or NULL||\r\n||'''green'''||a 256 element array of 16-bit quantities representing the translation table for the green channel, or NULL||\r\n||'''blue'''||a 256 element array of 16-bit quantities representing the translation table for the blue channel, or NULL||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSet the gamma translation table for the red, green, and blue channels of the video hardware.  Each table is an array of 256 16-bit quantities, representing a mapping between the input and output for that channel.  The input is the index into the array, and the output is the 16-bit gamma value at that index, scaled to the output color precision. Despite the name and signature, this method sets the gamma ramp of the entire display, not an individual window. A window is considered to be owned by the display that contains the window's center pixel. (The index of this display can be retrieved using [[SDL_GetWindowDisplayIndex]]().) The gamma ramp set will not follow the window if it is moved to another display.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowGammaRamp]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowGrab",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowGrab",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:54:24.5375555-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_SetWindowGrab =\r\nUse this function to set a window's input grab mode.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowGrab(SDL_Window* window,\r\n                       SDL_bool    grabbed)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window for which the input grab mode should be set||\r\n||'''grabbed'''||SDL_TRUE to grab input or SDL_FALSE to release input||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nWhen input is grabbed the mouse is confined to the window.\r\n\r\nIf the caller enables a grab while another window is currently grabbed, the other window loses its grab in favor of the caller's window.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetGrabbedWindow]]\r\n .[[SDL_GetWindowGrab]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowHitTest",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowHitTest",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:05.8306994-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowHitTest =\r\nUse this function to provide a callback that decides if a window region has special properties.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowHitTest(SDL_Window* window,\r\n                         SDL_HitTest callback,\r\n                         void*       callback_data)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to set hit-testing on||\r\n||'''callback'''||the function to call when doing a hit-test||\r\n||'''callback_data'''||an app-defined void pointer passed to '''callback'''||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or -1 on error (including unsupported); call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe function prototype for '''callback''' is:\r\n {{{#!highlight cpp\r\nSDL_HitTestResult SDL_HitTest(SDL_Window*      win,\r\n                              const SDL_Point* area,\r\n                              void*            data)\r\n}}}\r\n . where `SDL_HitTest` is your function name and its parameters are:\r\n ||`win`||the SDL_Window where hit-testing was set on ||\r\n ||`area`||an [[SDL_Point]] which should be hit-tested||\r\n ||`data`||what was passed as '''callback_data''' to SDL_!SetWindowHitTest()||\r\n . '''callback''' should return an [[SDL_HitTestResult]].\r\n\r\nNormally windows are dragged and resized by decorations provided by the system window manager (a title bar, borders, etc), but for some apps, it makes sense to drag them from somewhere else inside the window itself; for example, one might have a borderless window that wants to be draggable from any part, or simulate its own title bar, etc.\r\n\r\nThis function lets the app provide a callback that designates pieces of a given window as special. This callback is run during event processing if we need to tell the OS to treat a region of the window specially; the use of this callback is known as \"hit testing.\"\r\n\r\nMouse input may not be delivered to your application if it is within a special area; the OS will often apply that input to moving the window or resizing the window and not deliver it to the application.\r\n\r\nSpecifying NULL for a callback disables hit-testing. Hit-testing is disabled by default.\r\n\r\nPlatforms that don't support this functionality will return -1 unconditionally, even if you're attempting to disable hit-testing.\r\n\r\nYour callback may fire at any time, and its firing does not indicate any specific behavior (for example, on Windows, this certainly might fire when the OS is deciding whether to drag your window, but it fires for lots of other reasons, too, some unrelated to anything you probably care about _and when the mouse isn't actually at the location it is testing_). Since this can fire at any time, you should try to keep your callback efficient, devoid of allocations, etc.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowIcon",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowIcon",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:06.6520207-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetWindowIcon =\r\nUse this function to set the icon for a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowIcon(SDL_Window*  window,\r\n                       SDL_Surface* icon)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to change||\r\n||'''icon'''||an [[SDL_Surface]] structure containing the icon for the window||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Using SDL2 to set a window icon\r\n\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[]){\r\n\r\n  SDL_Event e;\r\n\r\n  SDL_Init(SDL_INIT_VIDEO);   // Initialize SDL2\r\n\r\n  SDL_Window *window = SDL_CreateWindow(    // Open a new window\r\n    \"SDL2 window icon demo\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, SDL_WINDOW_RESIZABLE\r\n  );\r\n\r\n  SDL_Surface *surface;     // Declare an SDL_Surface to be filled in with pixel data from an image file\r\n  Uint16 pixels[16*16] = {  // ...or with raw pixel data:\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0aab, 0x0789, 0x0bcc, 0x0eee, 0x09aa, 0x099a, 0x0ddd,\r\n    0x0fff, 0x0eee, 0x0899, 0x0fff, 0x0fff, 0x1fff, 0x0dde, 0x0dee,\r\n    0x0fff, 0xabbc, 0xf779, 0x8cdd, 0x3fff, 0x9bbc, 0xaaab, 0x6fff,\r\n    0x0fff, 0x3fff, 0xbaab, 0x0fff, 0x0fff, 0x6689, 0x6fff, 0x0dee,\r\n    0xe678, 0xf134, 0x8abb, 0xf235, 0xf678, 0xf013, 0xf568, 0xf001,\r\n    0xd889, 0x7abc, 0xf001, 0x0fff, 0x0fff, 0x0bcc, 0x9124, 0x5fff,\r\n    0xf124, 0xf356, 0x3eee, 0x0fff, 0x7bbc, 0xf124, 0x0789, 0x2fff,\r\n    0xf002, 0xd789, 0xf024, 0x0fff, 0x0fff, 0x0002, 0x0134, 0xd79a,\r\n    0x1fff, 0xf023, 0xf000, 0xf124, 0xc99a, 0xf024, 0x0567, 0x0fff,\r\n    0xf002, 0xe678, 0xf013, 0x0fff, 0x0ddd, 0x0fff, 0x0fff, 0xb689,\r\n    0x8abb, 0x0fff, 0x0fff, 0xf001, 0xf235, 0xf013, 0x0fff, 0xd789,\r\n    0xf002, 0x9899, 0xf001, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0xe789,\r\n    0xf023, 0xf000, 0xf001, 0xe456, 0x8bcc, 0xf013, 0xf002, 0xf012,\r\n    0x1767, 0x5aaa, 0xf013, 0xf001, 0xf000, 0x0fff, 0x7fff, 0xf124,\r\n    0x0fff, 0x089a, 0x0578, 0x0fff, 0x089a, 0x0013, 0x0245, 0x0eff,\r\n    0x0223, 0x0dde, 0x0135, 0x0789, 0x0ddd, 0xbbbc, 0xf346, 0x0467,\r\n    0x0fff, 0x4eee, 0x3ddd, 0x0edd, 0x0dee, 0x0fff, 0x0fff, 0x0dee,\r\n    0x0def, 0x08ab, 0x0fff, 0x7fff, 0xfabc, 0xf356, 0x0457, 0x0467,\r\n    0x0fff, 0x0bcd, 0x4bde, 0x9bcc, 0x8dee, 0x8eff, 0x8fff, 0x9fff,\r\n    0xadee, 0xeccd, 0xf689, 0xc357, 0x2356, 0x0356, 0x0467, 0x0467,\r\n    0x0fff, 0x0ccd, 0x0bdd, 0x0cdd, 0x0aaa, 0x2234, 0x4135, 0x4346,\r\n    0x5356, 0x2246, 0x0346, 0x0356, 0x0467, 0x0356, 0x0467, 0x0467,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff,\r\n    0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff\r\n  };\r\n  surface = SDL_CreateRGBSurfaceFrom(pixels,16,16,16,16*2,0x0f00,0x00f0,0x000f,0xf000);\r\n\r\n  // The icon is attached to the window pointer\r\n  SDL_SetWindowIcon(window, surface);\r\n\r\n  // ...and the surface containing the icon pixel data is no longer required.\r\n  SDL_FreeSurface(surface);\r\n\r\n  // Loop until the user closes the window or presses any key.\r\n  for( ; e.type != SDL_QUIT && e.type != SDL_KEYDOWN; SDL_PollEvent(&e));\r\n\r\n  SDL_DestroyWindow(window);   // Close and destroy the window.\r\n  SDL_Quit();                  // Clean up and exit.\r\n  return 0;\r\n\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowInputFocus",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowInputFocus",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:12.1051701-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowInputFocus =\r\nUse this function to explicitly set input focus to the window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowInputFocus(SDL_Window* window)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window that should get the input focus||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nYou almost certainly want [[SDL_RaiseWindow]]() instead of this function. Use this with caution, as you might give focus to a window that is completely obscured by other windows.\r\n\r\nThis function is only supported on X11.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_RaiseWindow]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowMaximumSize",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowMaximumSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:12.5884705-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowMaximumSize =\r\nUse this function to set the maximum size of a window's client area.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowMaximumSize(SDL_Window* window,\r\n                              int         max_w,\r\n                              int         max_h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to change||\r\n||'''max_w'''||the maximum width of the window in pixels||\r\n||'''max_h'''||the maximum height of the window in pixels||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowMaximumSize]]\r\n .[[SDL_SetWindowMinimumSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowMinimumSize",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowMinimumSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:13.0274481-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowMinimumSize =\r\nUse this function to set the minimum size of a window's client area.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowMinimumSize(SDL_Window* window,\r\n                              int         min_w,\r\n                              int         min_h)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to change||\r\n||'''min_w'''||the minimum width of the window in pixels||\r\n||'''min_h'''||the minimum height of the window in pixels||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowMinimumSize]]\r\n .[[SDL_SetWindowMaximumSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowModalFor",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowModalFor",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:13.6976745-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowModalFor =\r\nUse this function to set the window as a modal for another window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowModalFor(SDL_Window* modal_window,\r\n                          SDL_Window* parent_window)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''modal_window'''||the window that should be set modal||\r\n||'''parent_window'''||the parent window for the modal window||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function is only supported on X11.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowOpacity",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowOpacity",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:14.4591079-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowOpacity =\r\nUse this function to set the opacity for a window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_SetWindowOpacity(SDL_Window* window,\r\n                         float       opacity)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window which will be made transparent or opaque||\r\n||'''opacity'''||the opacity value (0.0f - transparent, 1.0f - opaque)||\r\n\r\n##Fill in the above table per the Style Guide, then delete this comment.\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe parameter '''opacity''' will be clamped internally between 0.0f (transparent) and 1.0f (opaque).\r\n\r\nThis function also returns -1 if setting the opacity isn't supported.\r\n\r\nThis function is only supported on DirectFB, X11, Cocoa (Apple Mac OS X) and Microsoft Windows.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowOpacity]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowPosition",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowPosition",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:56.7388615-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetWindowPosition =\r\nUse this function to set the position of a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowPosition(SDL_Window* window,\r\n                           int         x,\r\n                           int         y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to reposition||\r\n||'''x'''||the x coordinate of the window in screen coordinates, or SDL_WINDOWPOS_CENTERED or SDL_WINDOWPOS_UNDEFINED||\r\n||'''y'''||the y coordinate of the window in screen coordinates, or SDL_WINDOWPOS_CENTERED or SDL_WINDOWPOS_UNDEFINED||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe window coordinate origin is the upper left of the display.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowPosition]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowResizable",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowResizable",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:55:58.6625285-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowResizable =\r\nUse this function to set the user-resizable state of a window.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowResizable(SDL_Window* window,\r\n                            SDL_bool    resizable)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window of which to change the resizable state||\r\n||'''resizable'''||SDL_TRUE to allow resizing, SDL_FALSE to disallow||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis will add or remove the window's [[SDL_WindowFlags|SDL_WINDOW_RESIZABLE]] flag and allow/disallow user resizing of the window.  This is a no-op if the window's resizable state already matches the requested state.\r\n\r\n{i} ''Note'': You can't change the resizable state of a fullscreen window.\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.5.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowFlags]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_SetWindowSize",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowSize",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:56:05.1439507-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetWindowSize =\r\nUse this function to set the size of a window's client area.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowSize(SDL_Window* window,\r\n                       int         w,\r\n                       int         h)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to change||\r\n||'''w'''||the width of the window in pixels, in screen coordinates, must be > 0||\r\n||'''h'''||the height of the window in pixels, in screen coordinates, must be > 0||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe window size in screen coordinates may differ from the size in pixels, if the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a platform with high-dpi support (e.g. iOS or OS X). Use [[SDL_GL_GetDrawableSize]]() or [[SDL_GetRendererOutputSize]]() to get the real client area size in pixels.\r\n\r\nFullscreen windows automatically match the size of the display mode, and you should use [[SDL_SetWindowDisplayMode]]() to change their size.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowSize]]\r\n .[[SDL_SetWindowDisplayMode]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowTitle",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowTitle",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:56:09.1287216-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SetWindowTitle =\r\nUse this function to set the title of a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowTitle(SDL_Window* window,\r\n                        const char* title)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to change||\r\n||'''title'''||the desired window title in UTF-8 format||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// dynamically setting a window title\r\n\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char* argv[]){\r\n\r\n  SDL_Window *window;\r\n  SDL_Event e;\r\n\r\n  const char *titles[] = { // just for fun, let's make the title animate like a marquee and annoy users\r\n    \"t\", \"thi\", \"this w\", \"this win\", \"this windo\", \"this window's\", \"this window's ti\", \"this window's title\",\r\n    \"chis window's title is\", \"chih window's title is \", \"chih wandnw's title is \", \"c  h wandnw'g title is \",\r\n    \"c  h  a  nw'g titln is \", \"c  h  a  n  g  i  n ig \", \"c  h  a  n  g  i  n  g!\", \"\",\r\n    \"c  h  a  n  g  i  n  g!\", \"\", \"c  h  a  n  g  i  n  g!\", \"c  h  a  n  g  i  n  g!\"\r\n  };\r\n\r\n  SDL_Init(SDL_INIT_VIDEO); // Init SDL2\r\n\r\n  // Create a window.\r\n  window = SDL_CreateWindow(\r\n    \"This will surely be overwritten\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 320, 240, SDL_WINDOW_RESIZABLE\r\n  );\r\n\r\n  // Enter the main loop. Press any key or hit the x to exit.\r\n  for( ; e.type!=SDL_QUIT&&e.type!=SDL_KEYDOWN; SDL_PollEvent(&e)){\r\n    static int i = 0, t = 0;\r\n\r\n    if(!(++t%9)){ // every 9th frame...\r\n      SDL_SetWindowTitle(window, titles[i]);            // loop through the\r\n      if(++i >= sizeof(titles)/sizeof(titles[0])) i = 0; // array of titles\r\n    }\r\n\r\n    SDL_Delay(10);\r\n\r\n  }\r\n\r\n  SDL_DestroyWindow(window);\r\n  SDL_Quit();\r\n  return 0;\r\n\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowTitle]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_SetWindowsMessageHook",
      "Uri": "https://wiki.libsdl.org/SDL_SetWindowsMessageHook",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T14:56:11.3393739-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_SetWindowsMessageHook =\r\nUse this function to set a function that is called for every windows message, before !TranslateMessage().\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_SetWindowsMessageHook(SDL_WindowsMessageHook callback,\r\n                               void*                  userdata)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''callback'''||the function to call for every message; see [[#Remarks|Remarks]] for details||\r\n||'''userdata'''||a pointer that is passed to '''callback'''||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function is available on Microsoft Windows.\r\n\r\nThe function prototype for '''callback''' is:\r\n\r\n{{{#!highlight cpp\r\nvoid SDL_WindowsMessageHook(void*        userdata,\r\n                            void*        hWnd,\r\n                            unsigned int message,\r\n                            Uint64       wParam,\r\n                            Sint64       lParam)\r\n}}}\r\n  . where its parameter is:\r\n ||`userdata` ||what was passed as '''userdata''' to [[SDL_SetWindowsMessageHook]]() ||\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_ShowCursor",
      "Uri": "https://wiki.libsdl.org/SDL_ShowCursor",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T14:56:11.8688671-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_ShowCursor =\r\nUse this function to toggle whether or not the cursor is shown.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_ShowCursor(int toggle)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''toggle'''||SDL_ENABLE to show the cursor, SDL_DISABLE to hide it, SDL_QUERY to query the current state||\r\n\r\n== Return Value ==\r\nReturns SDL_ENABLE if the cursor is shown, or SDL_DISABLE if the cursor is hidden, or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint main(int argc, char *argv[]) {\r\n    /* creates a blank cursor */\r\n    SDL_ShowCursor(SDL_DISABLE);\r\n    /* ... */\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThe cursor starts off displayed but can be turned off.  Passing SDL_ENABLE displays the cursor and passing SDL_DISABLE hides it.\r\n\r\nThe current state of the mouse cursor can be queried by passing SDL_QUERY; either SDL_DISABLE or SDL_ENABLE will be returned.\r\n\r\n'''toggle''' may be any of the following:\r\n||-1||SDL_QUERY||returns the current visibility of the cursor||\r\n||0||SDL_DISABLE||makes the cursor hidden (also a return value as to the current state of the cursor)||\r\n||1||SDL_ENABLE||makes the cursor visible (also a return value as to the current state of the cursor)||\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateCursor]]\r\n .[[SDL_SetCursor]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_ShowMessageBox",
      "Uri": "https://wiki.libsdl.org/SDL_ShowMessageBox",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:56:53.0167539-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_ShowMessageBox =\r\nUse this function to create a modal message box.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_ShowMessageBox(const SDL_MessageBoxData* messageboxdata,\r\n                       int*                      buttonid)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''messageboxdata'''||the [[SDL_MessageBoxData]] structure with title, text and other options||\r\n||'''buttonid'''||the pointer to which user id of hit button should be copied||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    const SDL_MessageBoxButtonData buttons[] = {\r\n        { /* .flags, .buttonid, .text */        0, 0, \"no\" },\r\n        { SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT, 1, \"yes\" },\r\n        { SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT, 2, \"cancel\" },\r\n    };\r\n    const SDL_MessageBoxColorScheme colorScheme = {\r\n        { /* .colors (.r, .g, .b) */\r\n            /* [SDL_MESSAGEBOX_COLOR_BACKGROUND] */\r\n            { 255,   0,   0 },\r\n            /* [SDL_MESSAGEBOX_COLOR_TEXT] */\r\n            {   0, 255,   0 },\r\n            /* [SDL_MESSAGEBOX_COLOR_BUTTON_BORDER] */\r\n            { 255, 255,   0 },\r\n            /* [SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND] */\r\n            {   0,   0, 255 },\r\n            /* [SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED] */\r\n            { 255,   0, 255 }\r\n        }\r\n    };\r\n    const SDL_MessageBoxData messageboxdata = {\r\n        SDL_MESSAGEBOX_INFORMATION, /* .flags */\r\n        NULL, /* .window */\r\n        \"example message box\", /* .title */\r\n        \"select a button\", /* .message */\r\n        SDL_arraysize(buttons), /* .numbuttons */\r\n        buttons, /* .buttons */\r\n        &colorScheme /* .colorScheme */\r\n    };\r\n    int buttonid;\r\n    if (SDL_ShowMessageBox(&messageboxdata, &buttonid) < 0) {\r\n        SDL_Log(\"error displaying message box\");\r\n        return 1;\r\n    }\r\n    if (buttonid == -1) {\r\n        SDL_Log(\"no selection\");\r\n    } else {\r\n        SDL_Log(\"selection was %s\", buttons[buttonid].text);\r\n    }\r\n    return 0;\r\n}\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function should be called on the thread that created the parent window, or on the main thread if the messagebox has no parent. It will block execution of that thread until the user clicks a button or closes the messagebox.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_ShowSimpleMessageBox]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_ShowSimpleMessageBox",
      "Uri": "https://wiki.libsdl.org/SDL_ShowSimpleMessageBox",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:56:53.4492942-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ShowSimpleMessageBox =\r\nUse this function to display a simple modal message box.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_ShowSimpleMessageBox(Uint32      flags,\r\n                             const char* title,\r\n                             const char* message,\r\n                             SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''flags'''||an [[SDL_MessageBoxFlags|SDL_MessageBoxFlag]]; see [[#flags|Remarks]] for details||\r\n||'''title'''||UTF-8 title text||\r\n||'''message'''||UTF-8 message text||\r\n||'''window'''||the parent window, or NULL for no parent||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR,\r\n                         \"Missing file\",\r\n                         \"File is missing. Please reinstall the program.\",\r\n                         NULL);\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(flags)>> '''flags''' may be any of the following:\r\n||SDL_MESSAGEBOX_ERROR||error dialog||\r\n||SDL_MESSAGEBOX_WARNING||warning dialog||\r\n||SDL_MESSAGEBOX_INFORMATION||informational dialog||\r\n\r\nThis function may be called at any time, even before [[SDL_Init]](). This makes it useful for reporting errors like a failure to create a renderer or OpenGL context.\r\n\r\nOn X11, SDL rolls its own dialog box with X11 primitives instead of a formal toolkit like GTK+ or Qt.\r\n\r\nNote that if [[SDL_Init]]() would fail because there isn't any available video target, this function is likely to fail for the same reasons. If this is a concern, check the return value from this function and fall back to writing to stderr if you can.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_ShowWindow",
      "Uri": "https://wiki.libsdl.org/SDL_ShowWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T14:56:58.8899409-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ShowWindow =\r\nUse this function to show a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_ShowWindow(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to show||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_ShowWindow(window);\r\n}}}\r\n\r\n== Remarks ==\r\nIn SDL 1.2 you might have used BOOL WINAPI !ShowWindow(_In_  HWND hWnd, _In_  int nCmdShow) for Win32 builds. SDL_!ShowWindow() replaces this.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_HideWindow]]\r\n .[[SDL_RaiseWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_StartTextInput",
      "Uri": "https://wiki.libsdl.org/SDL_StartTextInput",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:56:59.3850799-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_StartTextInput =\r\nUse this function to start accepting Unicode text input events.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_StartTextInput(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nThis function will start accepting Unicode text input events in the focused SDL window, and start emitting [[SDL_TextInputEvent|SDL_TEXTINPUT]] and [[SDL_TextEditingEvent|SDL_TEXTEDITING]] events.\r\nPlease use this function in pair with [[SDL_StopTextInput]]().\r\n\r\nOn some platforms using this function activates the screen keyboard.\r\n\r\nThere is a [[Tutorials/TextInput|tutorial]].\r\n\r\n== Related Functions ==\r\n .[[SDL_SetTextInputRect]]\r\n .[[SDL_StopTextInput]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_StopTextInput",
      "Uri": "https://wiki.libsdl.org/SDL_StopTextInput",
      "Categories": [
        "CategoryAPI",
        "CategoryKeyboard"
      ],
      "LastUpdate": "2021-01-16T14:56:59.848076-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_StopTextInput =\r\nUse this function to stop receiving any text input events.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_StopTextInput(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThere is a [[Tutorials/TextInput|tutorial]].\r\n\r\n== Related Functions ==\r\n .[[SDL_StartTextInput]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryKeyboard]]\r\n"
    },
    {
      "Name": "SDL_Swap16",
      "Uri": "https://wiki.libsdl.org/SDL_Swap16",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:57:40.8883901-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Swap16 =\r\nUse this function to swap the byte order of a 16-bit value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint16 SDL_Swap16(Uint16 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the swapped value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SwapBE16]]\r\n .[[SDL_SwapLE16]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_Swap32",
      "Uri": "https://wiki.libsdl.org/SDL_Swap32",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:57:41.4792826-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Swap32 =\r\nUse this function to swap the byte order of a 32-bit value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_Swap32(Uint32 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the swapped value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SwapBE32]]\r\n .[[SDL_SwapLE32]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_Swap64",
      "Uri": "https://wiki.libsdl.org/SDL_Swap64",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:57:41.9494696-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_Swap64 =\r\nUse this function to swap the byte order of a 64-bit value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint64 SDL_Swap64(Uint64 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the swapped value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SwapBE64]]\r\n .[[SDL_SwapLE64]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapBE16",
      "Uri": "https://wiki.libsdl.org/SDL_SwapBE16",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:57:47.3758801-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapBE16 =\r\nUse this function to swap the byte order of a 16-bit big-endian value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint16 SDL_SwapBE16(Uint16 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native 16-bit value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Swap16]]\r\n .[[SDL_SwapLE16]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapBE32",
      "Uri": "https://wiki.libsdl.org/SDL_SwapBE32",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:58:28.9039886-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapBE32 =\r\nUse this function to swap the byte order of a 32-bit big-endian value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_SwapBE32(Uint32 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native 32-bit value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Swap32]]\r\n .[[SDL_SwapLE32]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapBE64",
      "Uri": "https://wiki.libsdl.org/SDL_SwapBE64",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:58:29.6327648-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapBE64 =\r\nUse this function to swap the byte order of a 64-bit big-endian value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint64 SDL_SwapBE64(Uint64 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native 64-bit value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Swap64]]\r\n .[[SDL_SwapLE64]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapFloat",
      "Uri": "https://wiki.libsdl.org/SDL_SwapFloat",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:58:30.0739234-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapFloat =\r\nUse this function to swap the byte order of a floating point value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nfloat SDL_SwapFloat(float x)\r\n\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the swapped value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SwapFloatBE]]\r\n .[[SDL_SwapFloatLE]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapFloatBE",
      "Uri": "https://wiki.libsdl.org/SDL_SwapFloatBE",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:59:11.2090187-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapFloatBE =\r\nUse this function to swap the byte order of a big-endian floating point value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nfloat SDL_SwapFloatBE(float x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native floating point value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SwapFloat]]\r\n .[[SDL_SwapFloatLE]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapFloatLE",
      "Uri": "https://wiki.libsdl.org/SDL_SwapFloatLE",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:59:11.7298638-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapFloatLE =\r\nUse this function to swap the byte order of a little-endian floating point value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nfloat SDL_SwapFloatLE(float x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native floating point value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_SwapFloat]]\r\n .[[SDL_SwapFloatBE]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapLE16",
      "Uri": "https://wiki.libsdl.org/SDL_SwapLE16",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T14:59:57.7824585-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapLE16 =\r\nUse this function to swap the byte order of a 16-bit little-endian value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint16 SwapLE16(Uint16 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native 16-bit value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Swap16]]\r\n .[[SDL_SwapBE16]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapLE32",
      "Uri": "https://wiki.libsdl.org/SDL_SwapLE32",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T15:03:51.0851221-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapLE32 =\r\nUse this function to swap the byte order of a 32-bit little-endian value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_SwapLE32(Uint32 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native 32-bit value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Swap32]]\r\n .[[SDL_SwapBE32]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_SwapLE64",
      "Uri": "https://wiki.libsdl.org/SDL_SwapLE64",
      "Categories": [
        "CategoryAPI",
        "CategoryEndian"
      ],
      "LastUpdate": "2021-01-16T15:03:51.3795716-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_SwapLE64 =\r\nUse this function to swap the byte order of a 64-bit little-endian value to native ordering.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint64 SDL_SwapLE64(Uint64 x)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''x'''||the value to be swapped||\r\n\r\n== Return Value ==\r\nReturns the native 64-bit value.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_Swap64]]\r\n .[[SDL_SwapBE64]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEndian]]\r\n"
    },
    {
      "Name": "SDL_TICKS_PASSED",
      "Uri": "https://wiki.libsdl.org/SDL_TICKS_PASSED",
      "Categories": [
        "CategoryAPI",
        "CategoryTimer"
      ],
      "LastUpdate": "2021-01-16T15:03:51.6807672-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_TICKS_PASSED =\r\nUse this macro to compare SDL ticks values.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_TICKS_PASSED(A, B)\r\n}}}\r\n\r\n##Fill in the above syntax per the Style Guide, then delete this comment.\r\n\r\n\r\n== Function Parameters ==\r\n||'''A'''||the first ticks values||\r\n||'''B'''||the second ticks values||\r\n\r\n\r\n== Return Value ==\r\nReturns return \"true\" if A has passed B.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* if you want to wait 100 ms, you could do this: */\r\nUint32 timeout = SDL_GetTicks() + 100;\r\nwhile (!SDL_TICKS_PASSED(SDL_GetTicks(), timeout)) {\r\n    /* ... do work until timeout has elapsed */\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetTicks]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryTimer]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_TLSCreate",
      "Uri": "https://wiki.libsdl.org/SDL_TLSCreate",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T15:03:51.9872842-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_TLSCreate =\r\nUse this function to create an identifier that is globally visible to all threads but refers to data that is thread-specific.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_TLSID SDL_TLSCreate(void)\r\n}}}\r\n\r\n\r\n== Return Value ==\r\nReturns the newly created thread local storage identifier or 0 on error.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nstatic SDL_SpinLock tls_lock;\r\nstatic SDL_TLSID thread_local_storage;\r\n\r\nvoid SetMyThreadData(void *value)\r\n{\r\n    if (!thread_local_storage) {\r\n        SDL_AtomicLock(&tls_lock);\r\n        if (!thread_local_storage) {\r\n            thread_local_storage = SDL_TLSCreate();\r\n        }\r\n        SDL_AtomicUnlock(&tls_lock);\r\n    }\r\n    SDL_TLSSet(thread_local_storage, value, 0);\r\n}\r\n\r\nvoid *GetMyThreadData(void)\r\n{\r\n    return SDL_TLSGet(thread_local_storage);\r\n}\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_TLSGet]]\r\n .[[SDL_TLSSet]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_TLSGet",
      "Uri": "https://wiki.libsdl.org/SDL_TLSGet",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T15:03:52.2868768-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_TLSGet =\r\nUse this function to get the value associated with a thread local storage ID for the current thread.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid* SDL_TLSGet(SDL_TLSID id)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''id'''||the thread local storage ID||\r\n\r\n\r\n== Return Value ==\r\nReturns the value associated with the ID for the current thread or NULL if no value has been set; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_TLSCreate]]\r\n .[[SDL_TLSSet]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_TLSSet",
      "Uri": "https://wiki.libsdl.org/SDL_TLSSet",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T15:03:59.5927802-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_TLSSet =\r\nUse this function to set the value associated with a thread local storage ID for the current thread.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_TLSSet(SDL_TLSID   id,\r\n               const void* value,\r\n               void (*destructor)(void*))\r\n}}}\r\n\r\n##Fill in the above syntax per the Style Guide, then delete this comment.\r\n\r\n\r\n== Function Parameters ==\r\n||'''id'''||the thread local storage ID||\r\n||'''value'''||the value to associate with the ID for the current thread||\r\n||'''destructor'''||a function called when the thread exits, to free the value||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe function prototype for '''destructor''' is:\r\n {{{#!highlight cpp\r\nvoid destructor(void* value)\r\n}}}\r\n . where its parameter is:\r\n ||`value`||what was passed as '''value''' to [[SDL_TLSSet]]()||\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n== Related Functions ==\r\n .[[SDL_TLSCreate]]\r\n .[[SDL_TLSGet]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_ThreadID",
      "Uri": "https://wiki.libsdl.org/SDL_ThreadID",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T15:03:59.8917392-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_ThreadID =\r\nUse this function to get the thread identifier for the current thread.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_threadID SDL_ThreadID(void)\r\n}}}\r\n== Return Value ==\r\nReturns the ID of the current thread.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\nSDL_threadID threadID;\r\n\r\n/* Retrieve our current thread identifier */\r\nthreadID = SDL_ThreadID();\r\n}}}\r\n== Remarks ==\r\nThis thread identifier is as reported by the underlying operating system. If SDL is running on a platform that does not support threads the return value will always be zero.\r\n\r\nThis function also returns a valid thread ID when called from the main thread.\r\n\r\n== Related Functions ==\r\n . [[SDL_GetThreadID]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_TriggerBreakpoint",
      "Uri": "https://wiki.libsdl.org/SDL_TriggerBreakpoint",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T15:04:00.2059111-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_TriggerBreakpoint =\r\nUse this function to trigger a breakpoint during debugging.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_TriggerBreakpoint(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf the program is running under a debugger this function will trigger a breakpoint.  It is typically used temporarily during debugging or with other error handling. Note that if a debugger isn't running, on some platforms this can terminate your application.\r\n\r\nThis isn't actually a function, but rather a macro. The intention is that the debugger will stop on exactly this line of code instead of somewhere inside the SDL library. As such, [[CategoryAssertions|the assertion facility]] uses this so that the debugger stops on the exact line of code where an [[SDL_assert]] failed.\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_TryLockMutex",
      "Uri": "https://wiki.libsdl.org/SDL_TryLockMutex",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T15:04:00.5230207-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_TryLockMutex =\r\nUse this function to try to lock a mutex without blocking.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_TryLockMutex(SDL_mutex* mutex)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''mutex'''||the mutex to try to lock||\r\n\r\n== Return Value ==\r\nReturns return 0, SDL_MUTEX_TIMEDOUT, or -1 on error; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nint status;\r\nSDL_mutex *mutex;\r\n\r\nmutex = SDL_CreateMutex();\r\nif (!mutex) {\r\n  fprintf(stderr, \"Couldn't create mutex\\n\");\r\n  return;\r\n}\r\n\r\nstatus = SDL_TryLockMutex(mutex);\r\n\r\nif (status == 0) {\r\n  printf(\"Locked mutex\\n\");\r\n  SDL_UnlockMutex(mutex);\r\n} else if (status == SDL_MUTEX_TIMEDOUT) {\r\n  /* Mutex not available for locking right now */\r\n} else {\r\n  fprintf(stderr, \"Couldn't lock mutex\\n\");\r\n}\r\n\r\nSDL_DestroyMutex(mutex);\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateMutex]]\r\n .[[SDL_DestroyMutex]]\r\n .[[SDL_LockMutex]]\r\n .[[SDL_UnlockMutex]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_UnionRect",
      "Uri": "https://wiki.libsdl.org/SDL_UnionRect",
      "Categories": [
        "CategoryAPI",
        "CategoryRect"
      ],
      "LastUpdate": "2021-01-16T15:04:00.8281264-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_UnionRect =\r\nUse this function to calculate the union of two rectangles.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_UnionRect(const SDL_Rect* A,\r\n                   const SDL_Rect* B,\r\n                   SDL_Rect*       result)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''A'''||an [[SDL_Rect]] structure representing the first rectangle||\r\n||'''B'''||an [[SDL_Rect]] structure representing the second rectangle||\r\n||'''result'''||an [[SDL_Rect]] structure filled in with the union of rectangles '''A''' and '''B'''||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRect]]\r\n"
    },
    {
      "Name": "SDL_UnloadObject",
      "Uri": "https://wiki.libsdl.org/SDL_UnloadObject",
      "Categories": [
        "CategoryAPI",
        "CategorySharedObject"
      ],
      "LastUpdate": "2021-01-16T15:04:01.1273582-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_UnloadObject =\r\nUse this function to unload a shared object from memory.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_UnloadObject(void* handle)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''handle'''||a valid shared object handle returned by [[SDL_LoadObject]]()||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_LoadFunction]]\r\n .[[SDL_LoadObject]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySharedObject]]\r\n"
    },
    {
      "Name": "SDL_UnlockAudio",
      "Uri": "https://wiki.libsdl.org/SDL_UnlockAudio",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T15:04:08.4388616-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_UnlockAudio =\r\nThis function is a legacy means of unlocking the audio device. New programs might want to use [[SDL_UnlockAudioDevice]]() instead.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_UnlockAudio(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nvoid MyAudioCallback(void *userdata, Uint8* stream, int len)\r\n{\r\n    printf(\"The audio callback is running!\\n\");\r\n    SDL_memset(stream, 0, len);  // just silence.\r\n    printf(\"The audio callback is done!\\n\");\r\n}\r\n\r\n// don't lock for 2 seconds at a time in real life, please.\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\nSDL_LockAudio();\r\nprintf(\"The audio callback can't be running right now!\\n\");\r\nSDL_Delay(2000);  // callback doesn't run for 2 seconds.\r\nprintf(\"Ok, unlocking!\\n\");\r\nSDL_UnlockAudio();\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is equivalent to calling\r\n\r\n{{{#!highlight cpp\r\nSDL_UnlockAudioDevice(1);\r\n}}}\r\n\r\nand is only useful if you used the legacy [[SDL_OpenAudio]]() function.\r\n\r\n== Related Functions ==\r\n .[[SDL_LockAudio]]\r\n .[[SDL_UnlockAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_UnlockAudioDevice",
      "Uri": "https://wiki.libsdl.org/SDL_UnlockAudioDevice",
      "Categories": [
        "CategoryAPI",
        "CategoryAudio"
      ],
      "LastUpdate": "2021-01-16T15:04:08.7548657-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_UnlockAudioDevice =\r\nUse this function to unlock the audio callback function for a specified device.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_UnlockAudioDevice(SDL_AudioDeviceID dev)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dev'''||the ID of the device to be unlocked||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nvoid MyAudioCallback(void *userdata, Uint8* stream, int len)\r\n{\r\n    printf(\"The audio callback is running!\\n\");\r\n    SDL_memset(stream, 0, len);  // just silence.\r\n    printf(\"The audio callback is done!\\n\");\r\n}\r\n\r\n// don't lock for 2 seconds at a time in real life, please.\r\nextern SDL_AudioDeviceID devid;\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\nSDL_LockAudioDevice(devid);\r\nprintf(\"The audio callback can't be running right now!\\n\");\r\nSDL_Delay(2000);  // callback doesn't run for 2 seconds.\r\nprintf(\"Ok, unlocking!\\n\");\r\nSDL_UnlockAudioDevice(devid);\r\nSDL_Delay(2000);  // callback runs for 2 seconds.\r\n}}}\r\n\r\n== Remarks ==\r\nUnlocks a previous [[SDL_LockAudioDevice]]() call. Please see [[SDL_LockAudioDevice#Remarks|that function's remarks]] for more details.\r\n\r\n== Related Functions ==\r\n .[[SDL_LockAudioDevice]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAudio]]\r\n"
    },
    {
      "Name": "SDL_UnlockMutex",
      "Uri": "https://wiki.libsdl.org/SDL_UnlockMutex",
      "Categories": [
        "CategoryAPI",
        "CategoryMutex"
      ],
      "LastUpdate": "2021-01-16T15:04:09.0557671-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_UnlockMutex =\r\nUse this function to unlock a mutex created with [[SDL_CreateMutex]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_UnlockMutex(SDL_mutex* mutex)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''mutex''' ||the mutex to unlock||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n<<Include(SDL_CreateMutex, , , from=\"## Begin Mutex Example\", to=\"## End Mutex Example\")>>\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateMutex]]\r\n .[[SDL_DestroyMutex]]\r\n .[[SDL_LockMutex]]\r\n .[[SDL_TryLockMutex]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMutex]]\r\n"
    },
    {
      "Name": "SDL_UnlockSurface",
      "Uri": "https://wiki.libsdl.org/SDL_UnlockSurface",
      "Categories": [
        "CategoryAPI",
        "CategorySurface"
      ],
      "LastUpdate": "2021-01-16T15:04:09.3601953-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_UnlockSurface =\r\nUse this function to release a surface after directly accessing the pixels.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_UnlockSurface(SDL_Surface* surface)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''surface'''||the [[SDL_Surface]] structure to be unlocked||\r\n\r\n== Code Examples ==\r\n<<Include(SDL_LockSurface, , , from=\"== Code Examples ==\", to=\"== Remarks ==\")>>\r\n\r\n== Remarks ==\r\n<<Include(SDL_LockSurface, , , from=\"== Remarks ==\", to=\"== Related Functions ==\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_LockSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySurface]]\r\n"
    },
    {
      "Name": "SDL_UnlockTexture",
      "Uri": "https://wiki.libsdl.org/SDL_UnlockTexture",
      "Categories": [
        "CategoryAPI"
      ],
      "LastUpdate": "2021-01-16T15:04:09.6688027-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n= SDL_UnlockTexture =\r\nUse this function to unlock a texture, uploading the changes to video memory, if needed.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_UnlockTexture(SDL_Texture* texture)\r\n}}}\r\n== Function Parameters ==\r\n||'''texture''' ||a texture locked by [[SDL_LockTexture]]() ||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n== Remarks ==\r\n/!\\ ''WARNING'': See [[https://bugzilla.libsdl.org/show_bug.cgi?id=1586|SDL bug #1586]] before using this function!\r\n\r\n== Related Functions ==\r\n . [[SDL_LockTexture]]\r\n\r\n----\r\n[[CategoryAPI]], CategoryRender\r\n"
    },
    {
      "Name": "SDL_UpdateTexture",
      "Uri": "https://wiki.libsdl.org/SDL_UpdateTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T15:04:09.9852265-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_UpdateTexture =\r\nUse this function to update the given texture rectangle with new pixel data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_UpdateTexture(SDL_Texture*    texture,\r\n                      const SDL_Rect* rect,\r\n                      const void*     pixels,\r\n                      int             pitch)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to update||\r\n||'''rect'''||an [[SDL_Rect]] structure representing the area to update, or NULL to update the entire texture||\r\n||'''pixels'''||the raw pixel data in the format of the texture||\r\n||'''pitch'''||the number of bytes in a row of pixel data, including padding between lines||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThe pixel data must be in the pixel format of the texture. Use [[SDL_QueryTexture]]() to query the pixel format of the texture.\r\n\r\nThis is a fairly slow function, intended for use with static textures that do not change often.\r\n\r\nIf the texture is intended to be updated often, it is preferred to create the texture as streaming and use the locking functions referenced below. While this function will work with streaming textures, for optimization reasons you may not get the pixels back if you lock the texture afterward.\r\n\r\n== Related Functions ==\r\n .[[SDL_CreateTexture]]\r\n .[[SDL_LockTexture]]\r\n .[[SDL_UnlockTexture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n"
    },
    {
      "Name": "SDL_UpdateWindowSurface",
      "Uri": "https://wiki.libsdl.org/SDL_UpdateWindowSurface",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T15:04:17.3780982-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_UpdateWindowSurface =\r\nUse this function to copy the window surface to the screen.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_UpdateWindowSurface(SDL_Window* window)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to update||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is the function you use to reflect any changes to the surface on the screen.\r\n\r\nThis function is equivalent to the SDL 1.2 API SDL_Flip().\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowSurface]]\r\n .[[SDL_UpdateWindowSurfaceRects]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_UpdateWindowSurfaceRects",
      "Uri": "https://wiki.libsdl.org/SDL_UpdateWindowSurfaceRects",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T15:04:17.6792892-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_UpdateWindowSurfaceRects =\r\nUse this function to copy areas of the window surface to the screen.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_UpdateWindowSurfaceRects(SDL_Window* window,\r\n                           const SDL_Rect*   rects,\r\n                                 int         numrects)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to update||\r\n||'''rects'''||an array of [[SDL_Rect]] structures representing areas of the surface to copy||\r\n||'''numrects'''||the number of rectangles||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis is the function you use to reflect changes to portions of the surface on the screen. \r\n\r\nThis function is equivalent to the SDL 1.2 API SDL_!UpdateRects(). \r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowSurface]]\r\n .[[SDL_UpdateWindowSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_UpdateYUVTexture",
      "Uri": "https://wiki.libsdl.org/SDL_UpdateYUVTexture",
      "Categories": [
        "CategoryAPI",
        "CategoryRender"
      ],
      "LastUpdate": "2021-01-16T15:04:17.9885418-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_UpdateYUVTexture =\r\nUse this function to update a rectangle within a planar YV12 or IYUV texture with new pixel data.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_UpdateYUVTexture(SDL_Texture*    texture,\r\n                         const SDL_Rect* rect,\r\n                         const Uint8*    Yplane,\r\n                         int             Ypitch,\r\n                         const Uint8*    Uplane,\r\n                         int             Upitch,\r\n                         const Uint8*    Vplane,\r\n                         int             Vpitch)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''texture'''||the texture to update||\r\n||'''rect'''||a pointer to the rectangle of pixels to update, or NULL to update the entire texture||\r\n||'''Yplane'''||the raw pixel data for the Y plane||\r\n||'''Ypitch'''||the number of bytes between rows of pixel data for the Y plane||\r\n||'''Uplane'''||the raw pixel data for the U plane||\r\n||'''Upitch'''||the number of bytes between rows of pixel data for the U plane||\r\n||'''Vplane'''||the raw pixel data for the V plane||\r\n||'''Vpitch'''||the number of bytes between rows of pixel data for the V plane||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or -1 if the texture is not valid; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nYou can use [[SDL_UpdateTexture]]() as long as your pixel data is a contiguous block of Y and U/V planes in the proper order, but this function is available if your pixel data is not contiguous.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.1.\r\n\r\n== Related Functions ==\r\n .[[SDL_UpdateTexture]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryRender]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_VERSIONNUM",
      "Uri": "https://wiki.libsdl.org/SDL_VERSIONNUM",
      "Categories": [
        "CategoryAPI",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T15:04:18.2947615-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_VERSIONNUM =\r\nUse this macro to convert separate version components into a single numeric value.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_VERSIONNUM(X, Y, Z)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''X'''||major version; reported in thousands place||\r\n||'''Y'''||minor version; reported in hundreds place||\r\n||'''Z'''||update version (patchlevel); reported in tens and ones places||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis assumes that there will never be more than 100 patchlevels.\r\n ''Example:'' {{{SDL_VERSIONNUM(1,2,3) -> (1203)}}}\r\n\r\n== Related Macros ==\r\n .[[SDL_COMPILEDVERSION]]\r\n .[[SDL_VERSION_ATLEAST]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_VERSION_ATLEAST",
      "Uri": "https://wiki.libsdl.org/SDL_VERSION_ATLEAST",
      "Categories": [
        "CategoryAPI",
        "CategoryVersion"
      ],
      "LastUpdate": "2021-01-16T15:04:58.987319-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_VERSION_ATLEAST =\r\nUse this macro to determine whether the SDL version compiled against is at least as new as the specified version.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_VERSION_ATLEAST(X, Y, Z)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''X'''||major version||\r\n||'''Y'''||minor version||\r\n||'''Z'''||update version (patchlevel)||\r\n\r\n== Return Value ==\r\nThis macro will evaluate to true if compiled with SDL version at least X.Y.Z.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nif (! SDL_VERSION_ATLEAST(2,0,0)) {\r\n    SDL_Log(\"SDL_VERSION %i is less than 2.0.0\", SDL_MAJOR_VERSION);\r\n    return 1;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n== Related Macros ==\r\n .[[SDL_COMPILEDVERSION]]\r\n .[[SDL_VERSIONNUM]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVersion]]\r\n"
    },
    {
      "Name": "SDL_VideoInit",
      "Uri": "https://wiki.libsdl.org/SDL_VideoInit",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T15:04:59.3264051-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_VideoInit =\r\nUse this function to initialize the video subsystem, optionally specifying a video driver.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_VideoInit(const char* driver_name)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''driver_name'''||the name of a video driver to initialize, or NULL for the default driver||\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include \"SDL.h\"\r\n#include <stdio.h> /* for printf() */\r\n#include <stdlib.h> /* for atexit() */\r\n\r\nSDL_bool videoinit = SDL_FALSE;\r\n\r\nvoid OnQuit(void) {\r\n    if (videoinit) {\r\n        SDL_VideoQuit();\r\n    }\r\n    SDL_Quit();\r\n}\r\n\r\nint main(int argc, char** argv) {\r\n    if (SDL_Init(0) != 0) {\r\n        printf(\"Error initializing SDL:  %s\\n\", SDL_GetError());\r\n        return 1;\r\n    }\r\n    atexit(OnQuit);\r\n\r\n    if (SDL_VideoInit(NULL) != 0) {\r\n        printf(\"Error initializing SDL video:  %s\\n\", SDL_GetError());\r\n        return 2;\r\n    }\r\n    videoinit = SDL_TRUE;\r\n\r\n    /* ... */\r\n\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\nThis function initializes the video subsystem, setting up a connection to the window manager, etc, and determines the available display modes and pixel formats, but does not initialize a window or graphics mode.\r\n\r\nIf you use this function and you haven't used the SDL_INIT_VIDEO flag with either [[SDL_Init]]() or [[SDL_InitSubSystem]](), you should call [[SDL_VideoQuit]]() before calling [[SDL_Quit]]().\r\n\r\nIt is safe to call this function multiple times. [[SDL_VideoInit]]() will call [[SDL_VideoQuit]]() itself if the video subsystem has already been initialized.\r\n\r\nYou can use [[SDL_GetNumVideoDrivers]]() and [[SDL_GetVideoDriver]]() to find a specific '''driver_name'''.\r\n\r\n== Related Functions ==\r\n .[[SDL_GetNumVideoDrivers]]\r\n .[[SDL_GetVideoDriver]]\r\n .[[SDL_InitSubSystem]]\r\n .[[SDL_VideoQuit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_VideoQuit",
      "Uri": "https://wiki.libsdl.org/SDL_VideoQuit",
      "Categories": [
        "CategoryAPI",
        "CategoryVideo"
      ],
      "LastUpdate": "2021-01-16T15:05:06.6616831-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_VideoQuit =\r\nUse this function to shut down the video subsystem, if initialized with [[SDL_VideoInit]]().\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_VideoQuit(void)\r\n}}}\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function closes all windows, and restores the original video mode.\r\n\r\n== Related Functions ==\r\n .[[SDL_VideoInit]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVideo]]\r\n"
    },
    {
      "Name": "SDL_Vulkan_CreateSurface",
      "Uri": "https://wiki.libsdl.org/SDL_Vulkan_CreateSurface",
      "Categories": [
        "CategoryAPI",
        "CategoryVulkan"
      ],
      "LastUpdate": "2021-01-16T15:05:06.9903713-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_Vulkan_CreateSurface =\r\nUse this function to create a Vulkan rendering surface for a window.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_Vulkan_CreateSurface(SDL_Window* window,\r\n                                  VkInstance instance,\r\n                                  VkSurfaceKHR* surface);\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||The window to which to attach the Vulkan surface||\r\n||'''instance'''||The Vulkan instance handle||\r\n||'''surface'''||A pointer to a {{{VkSurfaceKHR}}} handle to output the newly created surface||\r\n\r\n== Return Value ==\r\nReturns {{{SDL_TRUE}}} on success, {{{SDL_FALSE}}} on error.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nVkSurfaceKHR surface;\r\n\r\nif (!SDL_Vulkan_CreateSurface(window, instance, &surface)) handle_error();\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n\r\n'''Note''': The {{{window}}} must have been created with the {{{SDL_WINDOW_VULKAN}}} flag and the {{{VkInstance}}} must have been created with extensions returned by {{{SDL_Vulkan_GetInstanceExtensions}}} enabled.\r\n\r\n== Version ==\r\nThis function is available in SDL 2.0.8\r\n\r\n== Related Functions ==\r\n .[[SDL_Vulkan_GetInstanceExtensions]]\r\n .[[SDL_Vulkan_GetDrawableSize]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVulkan]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_Vulkan_GetDrawableSize",
      "Uri": "https://wiki.libsdl.org/SDL_Vulkan_GetDrawableSize",
      "Categories": [],
      "LastUpdate": "2021-01-16T15:05:07.3117222-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_Vulkan_GetDrawableSize =\r\nUse this function to get the size of the window's underlying drawable dimensions in pixels. This is used for setting viewport sizes, scissor rectangles, and other places where the a {{{VkExtent}}} might show up in relation to the window.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_Vulkan_GetDrawableSize(SDL_Window* window,\r\n                                int* w,\r\n                                int* h);\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||{{{SDL_Window}}} for which the size is to be queried||\r\n||'''w'''||Pointer to the variable to write the width to or {{{NULL}}}||\r\n||'''h'''||Pointer to the variable to write the height to or {{{NULL}}}||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// may instead choose to use std::clamp() in C++17\r\n#define CLAMP(x, lo, hi)    ((x) < (lo) ? (lo) : (x) > (hi) ? (hi) : (x))\r\n\r\nSDL_Window *window;\r\nVkSurfaceKHR surface;\r\nVkPhysicalDevice physicalDevice;\r\n\r\n// window = SDL_CreateWindow(...);\r\nif (!SDL_Vulkan_CreateSurface(window, instance, &surface)) {\r\n    // handle error\r\n}\r\n// physicalDevice = ...;\r\n\r\n// ...\r\n\r\n// Create Swapchain\r\n\r\nVkSurfaceCapabilitiesKHR capabilities;\r\nvkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, &capabilities);\r\n\r\nint width;\r\nint height;\r\nSDL_Vulkan_GetDrawableSize(window, &width, &height);\r\n\r\nwidth = CLAMP(width, capabilities.minImageExtent.width, capabilities.maxImageExtent.width);\r\nheight = CLAMP(height, capabilities.minImageExtent.height, capabilities.maxImageExtent.height);\r\n\r\n// ...\r\n\r\n// vkCreateSwapchainKHR(...);\r\n}}}\r\n\r\n\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n\r\nThis may differ from [[SDL_GetWindowSize]] if we're rendering to a high-DPI drawable, i.e. the window was created with {{{SDL_WINDOW_ALLOW_HIGHDPI}}} on a platform with high-DPI support (Apple calls this \"Retina\"), and not disabled by the {{{SDL_HINT_VIDEO_HIGHDPI_DISABLED}}} hint.\r\n\r\n== Version ==\r\nThis function is available in SDL 2.0.8\r\n\r\n== Related Functions ==\r\n .[[SDL_GetWindowSize]]\r\n .[[SDL_CreateWindow]]\r\n .[[SDL_Vulkan_CreateSurface]]\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVulkan]]\r\n##See the Style Guide for instructions on editing the footer.\r\n----\r\nCategoryVulkan\r\n"
    },
    {
      "Name": "SDL_Vulkan_GetInstanceExtensions",
      "Uri": "https://wiki.libsdl.org/SDL_Vulkan_GetInstanceExtensions",
      "Categories": [],
      "LastUpdate": "2021-01-16T15:05:07.6323794-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_Vulkan_GetInstanceExtensions =\r\n\r\nUse this function to get the names of the Vulkan instance extensions needed to create a surface with [[SDL_Vulkan_CreateSurface]].\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nSDL_bool SDL_Vulkan_GetInstanceExtensions(SDL_Window* window,\r\n                                          unsigned int* pCount,\r\n                                          const char** pNames);\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||A window for which the required Vulkan instance extensions should be retrieved (will be deprecated in a future release)||\r\n||'''pCount'''||A pointer to an {{{unsigned int}}} corresponding to the number of extensions to be returned||\r\n||'''names'''||{{{NULL}}} or a pointer to an array to be filled with required Vulkan instance extensions||\r\n\r\n\r\n== Return Value ==\r\nReturns {{{SDL_TRUE}}} on success, {{{SDL_FALSE}}} on error.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n// Note: This sample uses C++17 features/syntax.\r\n// Get the required extension count\r\nunsigned int count;\r\nif (!SDL_Vulkan_GetInstanceExtensions(window, &count, nullptr)) handle_error();\r\n\r\nstd::vector<const char*> extensions = {\r\n    VK_EXT_DEBUG_REPORT_EXTENSION_NAME // Sample additional extension\r\n};\r\nsize_t additional_extension_count = extensions.size();\r\nextensions.resize(additional_extension_count + count);\r\n\r\nif (!SDL_Vulkan_GetInstanceExtensions(window, &count, extensions.data() + additional_extension_count)) handle_error();\r\n\r\n// Now we can make the Vulkan instance\r\nVkInstanceCreateInfo create_info = {};\r\ncreate_info.enabledExtensionCount = static_cast<uint32_t>(extensions.size());\r\ncreate_info.ppEnabledExtensionNames = extensions.data();\r\n\r\nVkInstance instance;\r\nVkResult result = vkCreateInstance(&create_info, nullptr, &instance);\r\n}}}\r\n\r\n\r\n== Remarks ==\r\n\r\nIf {{{pNames}}} is {{{NULL}}}, then the number of required Vulkan instance extensions is returned in {{{pCount}}}. Otherwise, {{{pCount}}} must point to a variable set to the number of elements in the {{{pNames}}} array, and on return the variable is overwritten with the number of names actually written to {{{pNames}}}. If {{{pCount}}} is less than the number of required extensions, at most {{{pCount}}} structures will be written. If {{{pCount}}} is smaller than the number of required extensions, {{{SDL_FALSE}}} will be returned instead of {{{SDL_TRUE}}}, to indicate that not all the required extensions were returned.\r\n\r\n```Note``` The {{{window}}} parameter is currently needed to be valid as of SDL 2.0.8, however, this parameter will likely be removed in future releases\r\n\r\n== Version ==\r\nThis function is available in SDL 2.0.8\r\n\r\n== Related Functions ==\r\n .[[SDL_Vulkan_CreateSurface]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVulkan]]\r\n----\r\nCategoryVulkan\r\n"
    },
    {
      "Name": "SDL_Vulkan_GetVkInstanceProcAddr",
      "Uri": "https://wiki.libsdl.org/SDL_Vulkan_GetVkInstanceProcAddr",
      "Categories": [
        "CategoryAPI",
        "CategoryVulkan"
      ],
      "LastUpdate": "2021-01-16T15:05:07.9427179-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_Vulkan_GetVkGetInstanceProcAddr =\r\nUse this function to get the address of the {{{vkGetInstanceProcAddr}}} function.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid *SDLCALL SDL_Vulkan_GetVkGetInstanceProcAddr()\r\n}}}\r\n\r\n== Return Value ==\r\nReturns a pointer to the [[https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetInstanceProcAddr.html|vkGetInstanceProcAddr]] which can be used to load Vulkan function pointers at runtime.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n\r\n== Remarks ==\r\nThis should be called after either calling [[SDL_Vulkan_LoadLibrary]] or creating a window with the SDL_WINDOW_VULKAN flag.\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available in SDL 2.0.8\r\n\r\n== Related Functions ==\r\n .[[SDL_Vulkan_LoadLibrary]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVulkan]]\r\n"
    },
    {
      "Name": "SDL_Vulkan_LoadLibrary",
      "Uri": "https://wiki.libsdl.org/SDL_Vulkan_LoadLibrary",
      "Categories": [],
      "LastUpdate": "2021-01-16T15:05:08.2564113-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_Vulkan_LoadLibrary =\r\nUse this function to dynamically load the Vulkan loader library.\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_Vulkan_LoadLibrary(const char* path)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''path'''||The platform dependent Vulkan loader library name or {{{NULL}}}||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or -1 if the library couldn't be loaded; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Remarks ==\r\n\r\nThis should be called after initializing the video driver, but before creating any Vulkan windows. If no Vulkan loader library is loaded, the default library will be loaded upon creation of the first Vulkan window.\r\n\r\nIt is fairly common for Vulkan applications to link with libvulkan instead of explicitly loading it at run time. This will work with SDL provided the application links to a dynamic library and both it and SDL use the same search path.\r\n\r\nIf you specify a non-{{{NULL}}} {{{path}}}, an application should retrieve all of the Vulkan functions it uses from the dynamic library using [[SDL_Vulkan_GetVkGetInstanceProcAddr]] unless you can guarantee {{{path}}} points to the same vulkan loader library the application linked to.\r\n\r\nOn Apple devices, if {{{path}}} is {{{NULL}}}, SDL will attempt to find the {{{vkGetInstanceProcAddr}}} address within all the mach-o images of the current process. This is because it is fairly common for Vulkan applications to link with libvulkan (and historically MoltenVK was provided as a static library). If it is not found then, on macOS, SDL will attempt to load {{{vulkan.framework/vulkan}}}, {{{libvulkan.1.dylib}}}, {{{MoltenVK.framework/MoltenVK}}}, and {{{libMoltenVK.dylib}}} in that order. On iOS SDL will attempt to load {{{libMoltenVK.dylib}}}. Applications using a dynamic framework or .dylib must ensure it is included in its application bundle.\r\n\r\nOn non-Apple devices, application linking with a static libvulkan is not supported. Either do not link to the Vulkan loader or link to a dynamic library version.\r\n\r\n== Version ==\r\nThis function is available in SDL 2.0.8\r\n\r\n== Related Functions ==\r\n .[[SDL_Vulkan_GetVkInstanceProcAddr]]\r\n .[[SDL_Vulkan_UnloadLibrary]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVulkan]]\r\n----\r\nCategoryVulkan\r\n"
    },
    {
      "Name": "SDL_Vulkan_UnloadLibrary",
      "Uri": "https://wiki.libsdl.org/SDL_Vulkan_UnloadLibrary",
      "Categories": [],
      "LastUpdate": "2021-01-16T15:05:15.5794441-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_Vulkan_UnloadLibrary =\r\n\r\nUse this function to unload the Vulkan loader library previously loaded by [[SDL_Vulkan_LoadLibrary]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_Vulkan_UnloadLibrary()\r\n}}}\r\n\r\n\r\n== Version ==\r\nThis function is available in SDL 2.0.8\r\n\r\n== Related Functions ==\r\n .[[SDL_Vulkan_LoadLibrary]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryVulkan]]\r\n----\r\nCategoryVulkan\r\n"
    },
    {
      "Name": "SDL_WaitEvent",
      "Uri": "https://wiki.libsdl.org/SDL_WaitEvent",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T15:05:15.8994939-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WaitEvent =\r\nUse this function to wait indefinitely for the next available event.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_WaitEvent(SDL_Event* event)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''event'''||the [[SDL_Event]] structure to be filled in with the next event from the queue, or NULL||\r\n\r\n== Return Value ==\r\nReturns 1 on success or 0 if there was an error while waiting for events; call [[SDL_GetError]]() for more information.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''event''' is not NULL, the next event is removed from the queue and stored in the SDL_Event structure pointed to by '''event'''.\r\n\r\nAs this function implicitly calls [[SDL_PumpEvents]](), you can only call this function in the thread that initialized the video subsystem.\r\n\r\n== Related Functions ==\r\n .[[SDL_PollEvent]]\r\n .[[SDL_PumpEvents]]\r\n .[[SDL_WaitEventTimeout]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_WaitEventTimeout",
      "Uri": "https://wiki.libsdl.org/SDL_WaitEventTimeout",
      "Categories": [
        "CategoryAPI",
        "CategoryEvents"
      ],
      "LastUpdate": "2021-01-16T15:05:16.2202688-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WaitEventTimeout =\r\nUse this function to wait until the specified timeout (in milliseconds) for the next available event.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_WaitEventTimeout(SDL_Event* event,\r\n                         int        timeout)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''event'''||the [[SDL_Event]] structure to be filled in with the next event from the queue, or NULL||\r\n||'''timeout'''||the maximum number of milliseconds to wait for the next available event||\r\n\r\n== Return Value ==\r\nReturns 1 on success or 0 if there was an error while waiting for events; call [[SDL_GetError]]() for more information. This also returns 0 if the timeout elapsed without an event arriving.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nIf '''event''' is not NULL, the next event is removed from the queue and stored in the SDL_Event structure pointed to by '''event'''.\r\n\r\nAs this function implicitly calls [[SDL_PumpEvents]](), you can only call this function in the thread that initialized the video subsystem.\r\n\r\n== Related Functions ==\r\n .[[SDL_PollEvent]]\r\n .[[SDL_PumpEvents]]\r\n .[[SDL_WaitEvent]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryEvents]]\r\n"
    },
    {
      "Name": "SDL_WaitThread",
      "Uri": "https://wiki.libsdl.org/SDL_WaitThread",
      "Categories": [
        "CategoryAPI",
        "CategoryThread"
      ],
      "LastUpdate": "2021-01-16T15:05:16.5457941-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_WaitThread =\r\nUse this function to wait for a thread to finish.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_WaitThread(SDL_Thread* thread,\r\n                    int*        status)\r\n}}}\r\n== Function Parameters ==\r\n||'''thread''' ||the SDL_Thread pointer that was returned from the [[SDL_CreateThread]]() call that started this thread||\r\n||'''status''' ||pointer to an integer that will receive the value returned from the thread function by its 'return', or '''NULL''' to not receive such value back. see [[#Remarks|Remarks]] for details ||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n#include <stdio.h>\r\n#include \"SDL_thread.h\"\r\n#include \"SDL_timer.h\"\r\n\r\n// Very simple thread - counts 0 to 9 delaying 50ms between increments\r\nstatic int TestThread(void *ptr)\r\n{\r\n    int cnt;\r\n\r\n    for (cnt = 0; cnt < 10; ++cnt) {\r\n        printf(\"\\nThread counter: %d\", cnt);\r\n        SDL_Delay(50);\r\n    }\r\n\r\n    // Return the final value to the SDL_WaitThread function above\r\n    return cnt;\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    SDL_Thread *thread;\r\n    int         threadReturnValue;\r\n\r\n    printf(\"\\nSimple SDL_CreateThread test:\");\r\n\r\n    // Simply create a thread\r\n    thread = SDL_CreateThread(TestThread, \"TestThread\", (void *)NULL);\r\n\r\n    if (NULL == thread) {\r\n        printf(\"\\nSDL_CreateThread failed: %s\\n\", SDL_GetError());\r\n    } else {\r\n        // Wait for the thread to complete. The thread functions return code will\r\n        //       be placed in the \"threadReturnValue\" variable when it completes.\r\n        //\r\n        SDL_WaitThread(thread, &threadReturnValue);\r\n        printf(\"\\nThread returned value: %d\", threadReturnValue);\r\n    }\r\n\r\n    return 0;\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n\r\nWait for a thread to finish. Threads that haven't been detached will remain (as a \"zombie\") until this function cleans them up. Not doing so is a resource leak.\r\n\r\nOnce a thread has been cleaned up through this function, the SDL_Thread that references it becomes invalid and should not be referenced again. As such, only one thread may call SDL_!WaitThread() on another.\r\n\r\nThe return code for the thread function is placed in the area pointed to by '''status''', if '''status''' is not NULL.\r\n\r\nYou may not wait on a thread that has been used in a call to [[SDL_DetachThread]](). Use either that function or this one, but not both, or behavior is undefined.\r\n\r\nIt is safe to pass a NULL thread to this function; it is a no-op.\r\n\r\nNote that the thread pointer is freed by this function and is not valid afterward.\r\n\r\n== Related Functions ==\r\n . [[SDL_CreateThread]]\r\n . [[SDL_DetachThread]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryThread]]\r\n"
    },
    {
      "Name": "SDL_WarpMouseGlobal",
      "Uri": "https://wiki.libsdl.org/SDL_WarpMouseGlobal",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T15:05:16.8777321-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_WarpMouseGlobal =\r\nUse this function to move the mouse to the given position in global screen space.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_WarpMouseGlobal(int x,\r\n                        int y)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''x'''||the x coordinate||\r\n||'''y'''||the y coordinate||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function generates a mouse motion event.\r\n\r\nA failure of this function usually means that it is unsupported by a platform.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.4.\r\n\r\n== Related Functions ==\r\n .[[SDL_WarpMouseInWindow]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_WarpMouseInWindow",
      "Uri": "https://wiki.libsdl.org/SDL_WarpMouseInWindow",
      "Categories": [
        "CategoryAPI",
        "CategoryMouse"
      ],
      "LastUpdate": "2021-01-16T15:05:17.1899803-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n= SDL_WarpMouseInWindow =\r\nUse this function to move the mouse to the given position within the window.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_WarpMouseInWindow(SDL_Window* window,\r\n                           int         x,\r\n                           int         y)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window to move the mouse into, or NULL for the current mouse focus||\r\n||'''x'''||the x coordinate within the window||\r\n||'''y'''||the y coordinate within the window||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function generates a mouse motion event.\r\n\r\n== Related Functions ==\r\n .[[SDL_WarpMouseGlobal]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryMouse]]\r\n"
    },
    {
      "Name": "SDL_WasInit",
      "Uri": "https://wiki.libsdl.org/SDL_WasInit",
      "Categories": [
        "CategoryAPI",
        "CategoryInit"
      ],
      "LastUpdate": "2021-01-16T15:05:24.5077911-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WasInit =\r\nUse this function to get a mask of the specified subsystems which have previously been initialized.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nUint32 SDL_WasInit(Uint32 flags)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''flags'''||any of the flags used by [[SDL_Init]](); see [[#flags|Remarks]] for details||\r\n\r\n== Return Value ==\r\nIf '''flags''' is 0 it returns a mask of all initialized subsystems, otherwise it returns the initialization status of the specified subsystems.\r\n\r\nThe return value does not include SDL_INIT_NOPARACHUTE.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n/* Get init data on all the subsystems */\r\nUint32 subsystem_init;\r\n\r\nsubsystem_init = SDL_WasInit(SDL_INIT_EVERYTHING);\r\n\r\nif (subsystem_init & SDL_INIT_VIDEO) {\r\n    printf(\"Video is initialized.\\n\");\r\n} else {\r\n    printf(\"Video is not initialized.\\n\");\r\n}\r\n}}}\r\n{{{#!highlight cpp\r\n/* Just check for one specific subsystem */\r\n\r\nif (SDL_WasInit(SDL_INIT_VIDEO) != 0) {\r\n    printf(\"Video is initialized.\\n\");\r\n} else {\r\n    printf(\"Video is not initialized.\\n\");\r\n}\r\n}}}\r\n{{{#!highlight cpp\r\n/* Check for two subsystems */\r\nUint32 subsystem_mask = SDL_INIT_VIDEO | SDL_INIT_AUDIO;\r\n\r\nif (SDL_WasInit(subsystem_mask) == subsystem_mask) {\r\n    printf(\"Video and Audio initialized.\\n\");\r\n} else {\r\n    printf(\"Video and Audio not initialized.\\n\");\r\n}\r\n}}}\r\n\r\n== Remarks ==\r\n<<Anchor(flags)>>These are the flags which may be passed to [[SDL_WasInit]]() and may be OR'd together to query multiple subsystems simultaneously.\r\n\r\n<<Include(SDL_Init, , , from=\"OR'd together:\", to=\"If you want to initialize\")>>\r\n\r\n== Related Functions ==\r\n .[[SDL_Init]]\r\n .[[SDL_InitSubSystem]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryInit]]\r\n"
    },
    {
      "Name": "SDL_WinRTGetFSPathUNICODE",
      "Uri": "https://wiki.libsdl.org/SDL_WinRTGetFSPathUNICODE",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T15:05:24.8292143-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_WinRTGetFSPathUNICODE =\r\nUse this function to retrieve a WinRT defined path on the local file system.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst wchar_t* SDL_WinRTGetFSPathUNICODE(SDL_WinRT_Path pathType)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''pathType'''||the type of path to retrieve, one of [[SDL_WinRT_Path]]||\r\n\r\n\r\n== Return Value ==\r\nReturns a UCS-2 string (16-bit, wide-char) containing the path, or NULL if the path is not available for any reason; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nNot all paths are available on all versions of Windows.  This is especially true on Windows Phone.  Check the documentation for the given [[SDL_WinRT_Path]] for more information on which path types are supported where.\r\n\r\nDocumentation on most app-specific path types on WinRT can be found on MSDN, at the URL: http://msdn.microsoft.com/en-us/library/windows/apps/hh464917.aspx\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.3.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_WinRTGetFSPathUTF8]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_WinRTGetFSPathUTF8",
      "Uri": "https://wiki.libsdl.org/SDL_WinRTGetFSPathUTF8",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T15:05:25.1499475-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_WinRTGetFSPathUTF8 =\r\nUse this function to retrieve a WinRT defined path on the local file system.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nconst char* SDL_WinRTGetFSPathUTF8(SDL_WinRT_Path pathType)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''pathType'''||the type of path to retrieve, one of [[SDL_WinRT_Path]]||\r\n\r\n\r\n== Return Value ==\r\nReturns a UTF-8 string (8-bit, multi-byte) containing the path, or NULL if the path is not available for any reason; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nNot all paths are available on all versions of Windows.  This is especially true on Windows Phone.  Check the documentation for the given [[SDL_WinRT_Path]] for more information on which path types are supported where.\r\n\r\nDocumentation on most app-specific path types on WinRT can be found on MSDN, at the URL: http://msdn.microsoft.com/en-us/library/windows/apps/hh464917.aspx\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.3.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_WinRTGetFSPathUNICODE]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_WinRTRunApp",
      "Uri": "https://wiki.libsdl.org/SDL_WinRTRunApp",
      "Categories": [
        "CategoryAPI",
        "CategoryInit"
      ],
      "LastUpdate": "2021-01-16T15:05:25.4632054-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_WinRTRunApp =\r\nUse this function to initialize and launch an SDL/WinRT application.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_WinRTRunApp(MainFunction mainFunction\r\n                    void*        reserved)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''mainFunction'''||the SDL app's C-style main(); see [[#Remarks|Remarks]] for details||\r\n||'''reserved'''||reserved for future use; should be NULL||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or -1 on failure; call [[SDL_GetError]]() to retrieve more information on the failure.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe function prototype for '''mainFunction''' is:\r\n\r\n{{{#!highlight cpp\r\nint MainFunction(int argc, char **argv)\r\n}}}\r\n  . where its parameters are:\r\n ||`argc` ||the number of arguments ||\r\n ||`argv` ||an array of arguments ||\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.3.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryInit]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_WriteBE16",
      "Uri": "https://wiki.libsdl.org/SDL_WriteBE16",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T15:05:25.7808447-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WriteBE16 =\r\nUse this function to write 16 bits in native format to a [[SDL_RWops]] as big-endian data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_WriteBE16(SDL_RWops* dst,\r\n                     Uint16     value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the stream to which data will be written||\r\n||'''value'''||the data to be written, in native format||\r\n\r\n== Return Value ==\r\nReturns 1 on successful write, 0 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the application always specifies native format, and the data written will be in big-endian format.\r\n\r\n== Related Functions ==\r\n .[[SDL_WriteLE16]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_WriteBE32",
      "Uri": "https://wiki.libsdl.org/SDL_WriteBE32",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T15:05:26.0855271-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WriteBE32 =\r\nUse this function to write 32 bits in native format to a [[SDL_RWops]] as big-endian data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_WriteBE32(SDL_RWops* dst,\r\n                     Uint32     value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the stream to which data will be written||\r\n||'''value'''||the data to be written, in native format||\r\n\r\n== Return Value ==\r\nReturns 1 on successful write, 0 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the application always specifies native format, and the data written will be in big-endian format.\r\n\r\n== Related Functions ==\r\n .[[SDL_WriteLE32]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_WriteBE64",
      "Uri": "https://wiki.libsdl.org/SDL_WriteBE64",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T15:06:13.7673844-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WriteBE64 =\r\nUse this function to write 64 bits in native format to a [[SDL_RWops]] as big-endian data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_WriteBE64(SDL_RWops* dst,\r\n                     Uint64     value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the stream to which data will be written||\r\n||'''value'''||the data to be written, in native format||\r\n\r\n== Return Value ==\r\nReturns 1 on successful write, 0 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the application always specifies native format, and the data written will be in big-endian format.\r\n\r\n== Related Functions ==\r\n .[[SDL_WriteLE64]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_WriteLE16",
      "Uri": "https://wiki.libsdl.org/SDL_WriteLE16",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T15:06:14.0901295-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WriteLE16 =\r\nUse this function to write 16 bits in native format to a [[SDL_RWops]] as little-endian data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_WriteLE16(SDL_RWops* dst,\r\n                     Uint16     value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the stream to which data will be written||\r\n||'''value'''||the data to be written, in native format||\r\n\r\n== Return Value ==\r\nReturns 1 on successful write, 0 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the application always specifies native format, and the data written will be in little-endian format.\r\n\r\n== Related Functions ==\r\n .[[SDL_WriteBE16]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_WriteLE32",
      "Uri": "https://wiki.libsdl.org/SDL_WriteLE32",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T15:06:14.4035256-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WriteLE32 =\r\nUse this function to write 32 bits in native format to a [[SDL_RWops]] as little-endian data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_WriteLE32(SDL_RWops* dst,\r\n                     Uint32     value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the stream to which data will be written||\r\n||'''value'''||the data to be written, in native format||\r\n\r\n== Return Value ==\r\nReturns 1 on successful write, 0 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the application always specifies native format, and the data written will be in little-endian format.\r\n\r\n== Related Functions ==\r\n .[[SDL_WriteBE32]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_WriteLE64",
      "Uri": "https://wiki.libsdl.org/SDL_WriteLE64",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T15:06:14.7165848-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma disable-camelcase\r\n\r\n= SDL_WriteLE64 =\r\nUse this function to write 64 bits in native format to a [[SDL_RWops]] as little-endian data.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_WriteLE64(SDL_RWops* dst,\r\n                     Uint64     value)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the stream to which data will be written||\r\n||'''value'''||the data to be written, in native format||\r\n\r\n== Return Value ==\r\nReturns 1 on successful write, 0 on error.\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nSDL byteswaps the data only if necessary, so the application always specifies native format, and the data written will be in little-endian format.\r\n\r\n== Related Functions ==\r\n .[[SDL_WriteBE64]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n"
    },
    {
      "Name": "SDL_WriteU8",
      "Uri": "https://wiki.libsdl.org/SDL_WriteU8",
      "Categories": [
        "CategoryAPI",
        "CategoryIO"
      ],
      "LastUpdate": "2021-01-16T15:06:15.040899-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_WriteU8 =\r\nUse this function to write a byte to an [[SDL_RWops]].\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nsize_t SDL_WriteU8(SDL_RWops* dst,\r\n                   Uint8      value)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''dst'''||the [[SDL_RWops]] to write to||\r\n||'''value'''||the byte value to write||\r\n\r\n\r\n== Return Value ==\r\nReturns 1 on success or 0 on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\n''You can add useful comments here''\r\n\r\n##Leave this section as-is unless you have a remark to put in.  In that case, replace ''You can add useful comments here'' with your remark(s) following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_ReadU8]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryIO]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_acos",
      "Uri": "https://wiki.libsdl.org/SDL_acos",
      "Categories": [
        "CategoryAPI",
        "CategoryStandard"
      ],
      "LastUpdate": "2021-01-16T15:06:15.3464506-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_acos =\r\nUse this function to compute arc cosine of '''x'''.\r\n\r\n\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\ndouble SDL_acos(double x)\r\n}}}\r\n\r\n\r\n\r\n\r\n== Function Parameters ==\r\n||'''x'''||floating point value, in radians||\r\n\r\n\r\n\r\n\r\n== Return Value ==\r\nReturns arc cosine of '''x'''.\r\n\r\n\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\n\r\n    /* acos(x) = Pi/2 - asin(x) */\r\n    SDL_Log(\"acos(0):\\t\\t%f\", SDL_acos(0));\r\n    SDL_Log(\"Pi/2 - asin(0):\\t%f\", M_PI / 2 - SDL_asin(0));\r\n\r\n    /* acos(-x) = Pi  - acos(x) */\r\n    SDL_Log(\"acos(-(-1)):\\t%f\", SDL_acos(-(-1)));\r\n    SDL_Log(\"Pi - acos(-1):\\t%f\", M_PI - SDL_acos(-1));\r\n\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe definition of y = acos('''x''') is '''x''' = cos(y). <<BR>>\r\nDomain: -1 <= x <= 1 <<BR>>\r\nRange:   0 <= y <= Pi <<BR>>\r\n\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.2.\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryStandard]]\r\n"
    },
    {
      "Name": "SDL_assert",
      "Uri": "https://wiki.libsdl.org/SDL_assert",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T15:06:22.6563994-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_assert =\r\nUse this macro to create an assertion for debugging.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_assert(condition)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''condition'''||the expression to check||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nSDL_assert(1 == 0);  // triggers an assertion.\r\nSDL_assert(1 == 1);  // does NOT trigger an assertion.\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is enabled only when the SDL_ASSERT_LEVEL is set to 2 or 3, otherwise it is disabled.  See the [[CategoryAssertions|Assertions Category page]] for details.\r\n\r\n== Related Functions ==\r\n .[[SDL_assert_paranoid]]\r\n .[[SDL_assert_release]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_assert_paranoid",
      "Uri": "https://wiki.libsdl.org/SDL_assert_paranoid",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T15:06:22.9718509-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_assert_paranoid =\r\nUse this function to create an assertion for detailed checking.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_assert_paranoid(condition)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''condition'''||the expression to check||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is disabled by default.  It is available for use only when the SDL_ASSERT_LEVEL is set to 3.  See the [[CategoryAssertions|Assertions Category page]] for details.\r\n\r\n== Related Functions ==\r\n .[[SDL_assert]]\r\n .[[SDL_assert_release]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_assert_release",
      "Uri": "https://wiki.libsdl.org/SDL_assert_release",
      "Categories": [
        "CategoryAPI",
        "CategoryAssertions"
      ],
      "LastUpdate": "2021-01-16T15:06:23.2855578-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n\r\n= SDL_assert_release =\r\nUse this function to create an assertion for release builds.\r\n\r\n<<TableOfContents()>>\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_assert_release(condition)\r\n}}}\r\n\r\n== Function Parameters ==\r\n||'''condition'''||the expression to check||\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n== Remarks ==\r\nThis function is enabled by default.  It can be disabled by setting the SDL_ASSERT_LEVEL to 0.  See the [[CategoryAssertions|Assertions Category page]] for details.\r\n\r\n== Related Functions ==\r\n .[[SDL_assert]]\r\n .[[SDL_assert_paranoid]]\r\n\r\n----\r\n[[CategoryAPI]], [[CategoryAssertions]]\r\n"
    },
    {
      "Name": "SDL_iPhoneSetAnimationCallback",
      "Uri": "https://wiki.libsdl.org/SDL_iPhoneSetAnimationCallback",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T15:06:23.6094616-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_iPhoneSetAnimationCallback =\r\nUse this function to set the animation callback on Apple iOS.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nint SDL_iPhoneSetAnimationCallback(SDL_Window*   window,\r\n                                   int           interval,\r\n                                   void (*callback)(void*),\r\n                                   void*         callbackParam)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''window'''||the window for which the animation callback should be set||\r\n||'''interval'''||the number of frames after which '''callback''' will be called||\r\n||'''callback'''||the function to call for every frame; see [[#Remarks|Remarks]] for details||\r\n||'''callbackParam'''||a pointer that is passed to '''callback'''||\r\n\r\n\r\n== Return Value ==\r\nReturns 0 on success or a negative error code on failure; call [[SDL_GetError]]() for more information.\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThe function prototype for '''callback''' is:\r\n {{{#!highlight cpp\r\nvoid callback(void* callbackParam)\r\n}}}\r\n . where its parameter is:\r\n ||`callbackParam`||what was passed as '''callbackParam''' to [[SDL_iPhoneSetAnimationCallback]]()||\r\n\r\nThis function is only available on Apple iOS.\r\n\r\nFor more information see: [[https://hg.libsdl.org/SDL/file/default/docs/README-ios.md|README-ios.md]]\r\n\r\nThis functions is also accessible using the macro [[SDL_iOSSetAnimationCallback]]() since SDL 2.0.4.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_iPhoneSetEventPump]]\r\n##Remove this section if empty\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    },
    {
      "Name": "SDL_iPhoneSetEventPump",
      "Uri": "https://wiki.libsdl.org/SDL_iPhoneSetEventPump",
      "Categories": [
        "CategoryAPI",
        "CategorySystem"
      ],
      "LastUpdate": "2021-01-16T15:06:23.9245692-06:00",
      "RawText": "#pragma section-numbers off\r\n#pragma camelcase off\r\n||<tablewidth=\"100%\" style=\"color: #FF0000;\" :> DRAFT||\r\n\r\n##You will need to remove the line #acl All:read above in order to be able to save the new page.  Do not remove any other content above this comment.  You may delete this comment before you save.\r\n\r\n##*^*^*^*^*See http://wiki.libsdl.org/moin.cgi/SGFunctions for details on editing this page*^*^*^*^*\r\n\r\n\r\n= SDL_iPhoneSetEventPump =\r\nUse this function to enable or disable the SDL event pump on Apple iOS.\r\n\r\n\r\n<<TableOfContents()>>\r\n\r\n\r\n== Syntax ==\r\n{{{#!highlight cpp\r\nvoid SDL_iPhoneSetEventPump(SDL_bool enabled)\r\n}}}\r\n\r\n\r\n== Function Parameters ==\r\n||'''enabled'''||SDL_TRUE to enable the event pump, SDL_FALSE to disable it||\r\n\r\n\r\n== Code Examples ==\r\n{{{#!highlight cpp\r\nYou can add your code example here\r\n}}}\r\n\r\n##Leave this section as-is unless you have a code example to put in.  In that case, replace You can add your code example here with your code example following the Style Guide instructions.  Leave the rest of the markup alone and delete this comment.\r\n\r\n\r\n== Remarks ==\r\nThis function is only available on Apple iOS.\r\n\r\nThis functions is also accessible using the macro [[SDL_iOSSetEventPump]]() since SDL 2.0.4.\r\n\r\n== Version ==\r\nThis function is available since SDL 2.0.0.\r\n\r\n\r\n== Related Functions ==\r\n .[[SDL_iPhoneSetAnimationCallback]]\r\n##Remove this section if empty\r\n\r\n\r\n----\r\n[[CategoryAPI]], [[CategorySystem]]\r\n##See the Style Guide for instructions on editing the footer.\r\n"
    }
  ],
  "LastUpdate": "2021-01-16T15:06:23.9245737-06:00"
}